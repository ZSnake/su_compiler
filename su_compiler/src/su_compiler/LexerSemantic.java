/* The following code was generated by JFlex 1.4.3 on 12/15/12 2:12 PM */

package su_compiler;

import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/15/12 2:12 PM from the specification file
 * <tt>C:/Users/Carlos/Desktop/lexerSemantic.flex</tt>
 */
class LexerSemantic implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\12\1\0\1\14\1\15\22\0\1\3\1\52\1\11"+
    "\1\5\2\0\1\47\1\16\1\57\1\60\1\61\1\7\1\62\1\10"+
    "\1\6\1\63\12\2\1\64\1\65\1\66\1\51\1\67\2\0\1\25"+
    "\1\34\1\20\1\31\1\17\1\24\1\36\1\32\1\35\1\1\1\44"+
    "\1\26\1\42\1\30\1\33\1\37\1\46\1\22\1\27\1\21\1\23"+
    "\1\45\1\43\1\41\1\40\1\1\1\53\1\0\1\54\1\0\1\4"+
    "\1\0\1\25\1\34\1\20\1\31\1\17\1\24\1\36\1\32\1\35"+
    "\1\1\1\44\1\26\1\42\1\30\1\33\1\37\1\46\1\22\1\27"+
    "\1\21\1\23\1\13\1\43\1\41\1\40\1\1\1\55\1\50\1\56"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\11\23\2\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\5\0\1\35\2\0\1\36\23\2\1\37\14\2\1\40"+
    "\2\2\1\41\1\2\1\42\2\2\1\43\1\44\1\45"+
    "\11\2\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\32\1\0"+
    "\1\63\1\64\1\0\2\65\1\36\2\2\1\66\16\2"+
    "\1\67\3\2\1\70\4\2\1\71\2\2\1\72\1\2"+
    "\1\73\1\74\6\2\1\75\1\2\1\76\4\2\1\0"+
    "\1\2\1\77\4\2\1\100\5\2\1\101\1\2\1\102"+
    "\1\103\3\2\1\104\1\0\1\105\3\2\1\106\1\107"+
    "\2\2\1\110\1\111\1\2\1\112\1\113\15\2\1\0"+
    "\3\2\1\114\4\2\1\115\5\2\1\0\2\2\1\116"+
    "\3\2\1\117\5\2\1\120\1\2\1\121\2\0\1\122"+
    "\1\123\11\2\1\124\1\125\1\126\1\2\1\127\2\2"+
    "\1\130\1\2\1\0\2\2\1\131\5\2\1\132\1\133"+
    "\2\2\1\0\1\2\1\134\10\2\1\135\1\104\1\0"+
    "\3\2\1\136\1\2\1\137\1\140\3\2\1\141\1\142"+
    "\1\2\1\0\3\2\1\143\3\2\1\144\1\145\1\0"+
    "\4\2\1\146\7\2\1\147\1\150\1\151\1\2\1\152"+
    "\1\0\2\2\1\153\1\2\1\154\1\155\2\156\1\157"+
    "\1\160\1\161\2\2\1\162\1\163\1\2\1\164\1\2"+
    "\1\165\2\166\1\167\1\170\2\2\1\171\1\172\1\173"+
    "\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\160"+
    "\0\u0188\0\160\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0738\0\160\0\u0770\0\u07a8\0\160\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\160\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\160\0\u09d8\0\u0a10\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\250"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\250\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\250\0\u11f0\0\u1228\0\250\0\250\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\160\0\u1570\0\160\0\u15a8\0\u15e0\0\250"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0"+
    "\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\250\0\u1928"+
    "\0\u1960\0\u1998\0\250\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\250"+
    "\0\u1ab0\0\u1ae8\0\250\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\250\0\u1d18\0\250\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\250\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\250\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\250\0\u2098\0\250\0\250\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\250\0\u21e8\0\u2220\0\u2258\0\250\0\250\0\u2290"+
    "\0\u22c8\0\250\0\250\0\u2300\0\250\0\250\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\250"+
    "\0\u26f0\0\u2728\0\u2760\0\u2798\0\250\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\250\0\u2990\0\u29c8"+
    "\0\u2a00\0\250\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\250"+
    "\0\u2b50\0\250\0\u2b88\0\u2bc0\0\250\0\250\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\250"+
    "\0\250\0\250\0\u2df0\0\250\0\u2e28\0\u2e60\0\250\0\u2e98"+
    "\0\u2ed0\0\u2f08\0\u2f40\0\250\0\u2f78\0\u2fb0\0\u2fe8\0\u3020"+
    "\0\u3058\0\250\0\250\0\u3090\0\u30c8\0\u3100\0\u3138\0\250"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\250\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\250\0\u3448"+
    "\0\250\0\250\0\u3480\0\u34b8\0\u34f0\0\250\0\250\0\u3528"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\250\0\u3640\0\u3678\0\u36b0"+
    "\0\250\0\250\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\250"+
    "\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\250"+
    "\0\250\0\250\0\u3988\0\250\0\u39c0\0\u39f8\0\u3a30\0\250"+
    "\0\u3a68\0\250\0\250\0\160\0\250\0\250\0\250\0\250"+
    "\0\u3aa0\0\u3ad8\0\250\0\250\0\u3b10\0\250\0\u3b48\0\250"+
    "\0\160\0\250\0\250\0\250\0\u3b80\0\u3bb8\0\250\0\250"+
    "\0\250\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\3\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\2\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\30\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\37\3\4\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\11\61\1\62\1\63\2\61"+
    "\1\63\52\61\71\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\30\4\23\0\1\5\1\0\1\65\1\66\1\67"+
    "\10\0\1\70\53\0\1\6\6\0\4\6\60\0\1\71"+
    "\71\0\1\72\60\0\2\4\1\6\1\64\5\0\1\6"+
    "\1\13\2\6\1\0\30\4\21\0\12\73\1\0\1\73"+
    "\2\0\1\74\51\73\1\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\7\4\1\75\1\4\1\76\10\4\1\77"+
    "\5\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\6\4\1\100\5\4\1\101\13\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\102\2\4\1\103\2\4"+
    "\1\104\4\4\1\105\5\4\1\106\6\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\1\107\5\4\1\110"+
    "\21\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\10\4\1\111\1\112\16\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\4\4\1\113\1\4\1\114\1\115"+
    "\4\4\1\116\13\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\4\1\117\1\120\1\121\3\4\1\122"+
    "\1\4\1\123\3\4\1\124\12\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\14\4\1\125\1\4\1\126"+
    "\11\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\127\3\4\1\130\23\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\131\3\4\1\132\7\4\1\133"+
    "\13\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\134\13\4\1\135\1\4\1\136\11\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\2\4\1\137\1\140"+
    "\1\141\1\142\22\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\143\13\4\1\144\13\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\5\4\1\145\2\4"+
    "\1\146\1\147\16\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\150\13\4\1\151\13\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\152\1\153"+
    "\1\4\1\154\21\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\14\4\1\155\13\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\14\4\1\156\13\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\13\4\1\157"+
    "\2\4\1\160\11\4\70\0\1\161\70\0\1\162\70\0"+
    "\1\163\15\0\1\164\51\0\1\165\77\0\1\166\57\0"+
    "\1\167\67\0\1\170\67\0\1\171\14\0\1\172\1\173"+
    "\51\0\1\174\15\0\1\175\11\61\2\0\2\61\1\0"+
    "\52\61\11\0\1\176\57\0\2\4\10\0\1\4\3\0"+
    "\30\4\23\0\1\5\67\0\1\177\14\0\2\177\3\0"+
    "\2\177\3\0\1\177\2\0\1\177\35\0\1\200\67\0"+
    "\1\201\4\0\2\202\57\0\12\72\1\203\2\72\1\204"+
    "\52\72\16\0\1\205\52\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\10\4\1\206\17\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\2\4\1\207\7\4\1\210"+
    "\15\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\4\1\211\14\4\1\212\11\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\10\4\1\213\17\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\11\4\1\214"+
    "\16\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\3\4\1\215\24\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\4\4\1\216\23\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\10\4\1\217\6\4\1\220"+
    "\10\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\221\27\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\20\4\1\222\7\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\223\3\0\1\4\1\224\1\225\6\4\1\226"+
    "\11\4\1\227\2\4\1\223\1\230\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\11\4\1\231\4\4\1\232"+
    "\11\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\233\27\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\234\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\11\4\1\235\16\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\7\4\1\236\20\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\14\4"+
    "\1\237\13\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\3\4\1\240\24\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\4\1\241\26\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\242\24\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\7\4"+
    "\1\243\6\4\1\244\11\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\12\4\1\245\15\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\10\4\1\246\3\4"+
    "\1\247\13\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\14\4\1\250\13\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\23\4\1\251\4\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\7\4\1\252\10\4"+
    "\1\253\7\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\15\4\1\254\12\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\24\4\1\255\3\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\7\4\1\256\20\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\2\4"+
    "\1\257\25\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\1\4\1\260\5\4\1\261\20\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\17\4\1\262\10\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\13\4"+
    "\1\263\14\4\22\0\2\4\1\264\1\64\5\0\1\264"+
    "\1\265\2\264\1\0\30\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\266\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\17\4\1\267\10\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\12\4"+
    "\1\270\1\4\1\271\13\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\272\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\2\4\1\273\6\4"+
    "\1\274\16\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\275\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\6\4\1\276\5\4\1\277\1\4"+
    "\1\300\11\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\301\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\4\1\302\26\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\303\24\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\12\4"+
    "\1\304\15\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\1\305\15\4\1\306\11\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\2\4\1\307\25\4\23\0"+
    "\1\177\1\0\1\66\1\310\1\311\10\0\2\177\3\0"+
    "\2\177\3\0\1\177\2\0\1\177\35\0\1\200\1\0"+
    "\1\67\12\0\1\70\52\0\1\201\1\0\1\202\65\0"+
    "\1\201\77\0\1\203\56\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\312\15\4\1\313\11\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\314\24\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\315"+
    "\27\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\2\4\1\316\25\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\317\27\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\10\4\1\320\17\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\23\4\1\321\4\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\322"+
    "\27\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\25\4\1\323\2\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\17\4\1\324\10\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\11\4\1\325\16\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\326\27\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\327"+
    "\27\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\14\4\1\330\13\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\4\4\1\331\23\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\6\4\1\332\21\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\4\4\1\333"+
    "\23\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\17\4\1\334\10\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\10\4\1\335\17\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\16\4\1\336\11\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\4\1\337"+
    "\26\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\10\4\1\216\17\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\6\4\1\340\21\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\341\27\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\6\4\1\342\21\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\6\4"+
    "\1\343\21\4\22\0\2\4\1\344\1\64\5\0\1\344"+
    "\1\345\2\344\1\0\30\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\346\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\347\24\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\20\4"+
    "\1\350\7\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\16\4\1\351\11\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\352\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\6\4\1\353\21\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\2\4\1\354"+
    "\25\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\7\4\1\355\20\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\7\4\1\356\20\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\2\4\1\357\3\4\1\360"+
    "\21\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\16\4\1\361\11\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\362\27\4\24\0\1\264\6\0\4\264"+
    "\1\0\1\363\51\0\2\4\1\264\1\64\5\0\1\264"+
    "\1\265\2\264\1\0\1\364\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\16\4\1\365\11\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\21\4\1\366"+
    "\6\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\7\4\1\367\20\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\370\27\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\371\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\14\4\1\372\13\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\17\4\1\373"+
    "\10\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\4\1\374\1\375\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\376\3\0\26\4\1\376\1\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\25\4\1\377\2\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\11\4"+
    "\1\u0100\16\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\7\4\1\u0101\20\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\13\4\1\u0102\14\4\40\0\1\u0103"+
    "\52\0\1\u0104\14\0\2\u0104\3\0\2\u0104\3\0\1\u0104"+
    "\2\0\1\u0104\34\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\5\4\1\u0105\22\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\21\4\1\u0106\6\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\20\4\1\u0107\7\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\2\4"+
    "\1\u0108\25\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\16\4\1\u0109\11\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\u010a\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\3\4\1\u010b\24\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\3\4\1\u010c"+
    "\24\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\3\4\1\u010d\24\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\23\4\1\u010e\4\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\u010f\27\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\1\u0110\27\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\u0111\27\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\7\4"+
    "\1\u0112\20\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\u0113\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\u0114\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\10\4\1\u0115\7\4"+
    "\1\u0116\7\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\21\4\1\u0117\6\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\10\4\1\u0118\17\4\24\0\1\344"+
    "\6\0\4\344\3\0\1\u0119\47\0\2\4\1\344\1\64"+
    "\5\0\1\344\1\345\2\344\1\0\2\4\1\u011a\25\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\3\4"+
    "\1\u011b\24\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\u011c\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\u011d\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\1\4\1\u011e\26\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\3\4"+
    "\1\u011f\24\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\21\4\1\u0120\6\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\6\4\1\u0121\21\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\6\4\1\u0122\21\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\21\4"+
    "\1\u0123\6\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\u0124\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\3\4\1\u0125\24\4\47\0\1\u0126"+
    "\42\0\2\4\1\0\1\64\6\0\1\4\3\0\7\4"+
    "\1\u0127\20\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\11\4\1\u0128\16\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\u0129\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\17\4\1\u012a\10\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\3\4\1\u012b"+
    "\24\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\23\4\1\u012c\4\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\u012d\27\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\u012e\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\6\4\1\u012f\21\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\6\4\1\u0130"+
    "\21\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\u0131\27\4\23\0\1\u0132\4\0\2\u0133\61\0\1\u0104"+
    "\1\0\1\311\1\310\11\0\2\u0104\3\0\2\u0104\3\0"+
    "\1\u0104\2\0\1\u0104\34\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\2\4\1\u0134\25\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\6\4\1\u0135\21\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\11\4\1\u0136"+
    "\16\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\12\4\1\u0137\15\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\10\4\1\u0138\17\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\12\4\1\u0139\15\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\11\4\1\u013a"+
    "\16\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\u013b\27\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\4\4\1\u013c\23\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\16\4\1\u013d\11\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\10\4\1\u013e\17\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\2\4"+
    "\1\u013f\25\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\1\u0140\27\4\53\0\1\u0141\36\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\13\4\1\u0142\14\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\6\4\1\u0143"+
    "\21\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\1\u0144\27\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\2\4\1\u0145\25\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\6\4\1\u0146\21\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\20\4\1\u0147\7\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\3\4"+
    "\1\u0148\24\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\10\4\1\u0149\17\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\10\4\1\u014a\17\4\50\0\1\u014b"+
    "\41\0\2\4\1\0\1\64\6\0\1\4\3\0\10\4"+
    "\1\u014c\17\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\6\4\1\u014d\21\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\u014e\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\16\4\1\u014f\11\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\6\4\1\u0150"+
    "\21\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\12\4\1\u0151\15\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\4\1\u0152\26\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\2\4\1\u0153\25\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\17\4\1\u0154"+
    "\10\4\23\0\1\u0132\1\0\1\u0133\65\0\1\u0132\66\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\16\4\1\u0155"+
    "\11\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\11\4\1\u0156\16\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\6\4\1\u0157\21\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\u0158\27\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\10\4\1\u0159\17\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\u015a"+
    "\27\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\14\4\1\u015b\13\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\12\4\1\u015c\15\4\40\0\1\u015d\51\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\u015e\27\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\4"+
    "\1\u015f\26\4\22\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\12\4\1\u0160\15\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\2\4\1\u0161\25\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\1\u0162\27\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\u0163\27\4"+
    "\40\0\1\u0164\51\0\2\4\1\0\1\64\6\0\1\4"+
    "\3\0\1\u0165\27\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\11\4\1\u0166\16\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\3\4\1\u0167\24\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\1\4\1\u0168"+
    "\26\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\4\4\1\u0169\23\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\2\4\1\u016a\25\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\u016b\27\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\1\u016c\27\4\22\0"+
    "\2\4\1\0\1\64\6\0\1\4\3\0\14\4\1\u016d"+
    "\13\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\2\4\1\u016e\25\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\2\4\1\u016f\25\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\11\4\1\u0170\16\4\51\0"+
    "\1\u0171\40\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\11\4\1\u0172\16\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\2\4\1\u0173\25\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\1\u0174\27\4\22\0\2\4"+
    "\1\0\1\64\6\0\1\4\3\0\3\4\1\u0175\24\4"+
    "\22\0\2\4\1\0\1\64\6\0\1\4\3\0\1\u0176"+
    "\27\4\22\0\2\4\1\0\1\64\6\0\1\4\3\0"+
    "\11\4\1\u0177\16\4\22\0\2\4\1\0\1\64\6\0"+
    "\1\4\3\0\1\u0178\27\4\22\0\2\4\1\0\1\64"+
    "\6\0\1\4\3\0\1\u0179\27\4\22\0\2\4\1\0"+
    "\1\64\6\0\1\4\3\0\12\4\1\u017a\15\4\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\31\1\6\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\11\5\0\1\11"+
    "\2\0\65\1\16\11\1\0\2\1\1\0\1\11\1\1"+
    "\1\11\56\1\1\0\24\1\1\0\32\1\1\0\16\1"+
    "\1\0\17\1\2\0\24\1\1\0\14\1\1\0\14\1"+
    "\1\0\15\1\1\0\11\1\1\0\21\1\1\0\6\1"+
    "\1\11\14\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public ArrayList<String> lexical_errors=new ArrayList<String>();
public ArrayList<String> lexical_warnings=new ArrayList<String>();
private String currentText="";
public String getCurrentText(){return currentText;}
StringBuffer string=new StringBuffer();
private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn);
}

private Symbol symbol(int type, Object value){
	return new Symbol(type, yyline, yycolumn, value);
}

public Integer unbase_literal(String based){
        String clean=based.replaceAll("[_]|(\\.[_a-zA-Z0-9]*)", "");
        String[] terms=clean.split("#");
        return Integer.parseInt(terms[1],Integer.parseInt(terms[0]));
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerSemantic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerSemantic(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 104: 
          { currentText=yytext();return symbol(symbolsSemantic.RENAMES);
          }
        case 125: break;
        case 31: 
          { currentText=yytext();return symbol(symbolsSemantic.AT);
          }
        case 126: break;
        case 87: 
          { currentText=yytext();return symbol(symbolsSemantic.FLOAT);
          }
        case 127: break;
        case 58: 
          { currentText=yytext();return symbol(symbolsSemantic.ALL);
          }
        case 128: break;
        case 122: 
          { currentText=yytext();return symbol(symbolsSemantic.TERMINATE);
          }
        case 129: break;
        case 7: 
          { currentText=yytext();return symbol(symbolsSemantic.MINUS);
          }
        case 130: break;
        case 3: 
          { currentText=yytext();return symbol(symbolsSemantic.INTEGER_LITERAL,new Integer(Integer.parseInt(yytext().replaceAll("_",""))));
          }
        case 131: break;
        case 82: 
          { currentText=yytext();return symbol(symbolsSemantic.ELSIF);
          }
        case 132: break;
        case 61: 
          { currentText=yytext();return symbol(symbolsSemantic.NEW);
          }
        case 133: break;
        case 12: 
          { currentText=yytext();return symbol(symbolsSemantic.EQUAL);
          }
        case 134: break;
        case 42: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '!=' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber�a ser '/='");
	currentText=yytext();return symbol(symbolsSemantic.INEQUALITY);
          }
        case 135: break;
        case 96: 
          { currentText=yytext();return symbol(symbolsSemantic.RETURN);
          }
        case 136: break;
        case 15: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '{' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
	currentText=yytext();
          }
        case 137: break;
        case 44: 
          { currentText=yytext();return symbol(symbolsSemantic.INEQUALITY);
          }
        case 138: break;
        case 67: 
          { currentText=yytext();return symbol(symbolsSemantic.MOD);
          }
        case 139: break;
        case 18: 
          { currentText=yytext();return symbol(symbolsSemantic.RIGHTPAR);
          }
        case 140: break;
        case 103: 
          { currentText=yytext();return symbol(symbolsSemantic.REVERSE);
          }
        case 141: break;
        case 73: 
          { currentText=yytext();return symbol(symbolsSemantic.TASK);
          }
        case 142: break;
        case 8: 
          { string.setLength(0);yybegin(STRING);
          }
        case 143: break;
        case 22: 
          { currentText=yytext();return symbol(symbolsSemantic.COLON);
          }
        case 144: break;
        case 88: 
          { currentText=yytext();return symbol(symbolsSemantic.ARRAY);
          }
        case 145: break;
        case 51: 
          { currentText=yytext();return symbol(symbolsSemantic.FLOATING_POINT_LITERAL,new Float(Float.parseFloat(yytext().replaceAll("_",""))));
          }
        case 146: break;
        case 121: 
          { currentText=yytext();return symbol(symbolsSemantic.EXCEPTION);
          }
        case 147: break;
        case 25: 
          { currentText=yytext();return symbol(symbolsSemantic.GT);
          }
        case 148: break;
        case 113: 
          { currentText=yytext();return symbol(symbolsSemantic.GENERIC);
          }
        case 149: break;
        case 10: 
          { currentText=yytext();return symbol(symbolsSemantic.CONCATENATE);
          }
        case 150: break;
        case 65: 
          { currentText=yytext();return symbol(symbolsSemantic.PUT);
          }
        case 151: break;
        case 77: 
          { currentText=yytext();return symbol(symbolsSemantic.NULL);
          }
        case 152: break;
        case 29: 
          { currentText=yytext();return symbol(symbolsSemantic.DOUBLEDOT);
          }
        case 153: break;
        case 9: 
          { currentText=yytext();return symbol(symbolsSemantic.TICK);
          }
        case 154: break;
        case 5: 
          { currentText=yytext();return symbol(symbolsSemantic.POINT);
          }
        case 155: break;
        case 86: 
          { currentText=yytext();return symbol(symbolsSemantic.UNTIL);
          }
        case 156: break;
        case 81: 
          { currentText=yytext();return symbol(symbolsSemantic.WITH);
          }
        case 157: break;
        case 109: 
          { currentText=yytext();return symbol(symbolsSemantic.DECLARE);
          }
        case 158: break;
        case 23: 
          { currentText=yytext();return symbol(symbolsSemantic.SEMICOLON);
          }
        case 159: break;
        case 6: 
          { currentText=yytext();return symbol(symbolsSemantic.PLUS);
          }
        case 160: break;
        case 85: 
          { currentText=yytext();return symbol(symbolsSemantic.RAISE);
          }
        case 161: break;
        case 47: 
          { currentText=yytext();return symbol(symbolsSemantic.LEFTLABEL);
          }
        case 162: break;
        case 21: 
          { currentText=yytext();return symbol(symbolsSemantic.DIVIDE);
          }
        case 163: break;
        case 32: 
          { currentText=yytext();return symbol(symbolsSemantic.DO);
          }
        case 164: break;
        case 40: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '==' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber�a ser '='");
	currentText=yytext();return symbol(symbolsSemantic.EQUAL);
          }
        case 165: break;
        case 36: 
          { currentText=yytext();return symbol(symbolsSemantic.IS);
          }
        case 166: break;
        case 93: 
          { currentText=yytext();return symbol(symbolsSemantic.WHILE);
          }
        case 167: break;
        case 39: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '||' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber�a ser 'or else'");
	currentText=yytext();return symbol(symbolsSemantic.OR_ELSE);
          }
        case 168: break;
        case 110: 
          { currentText=yytext();return symbol(symbolsSemantic.OR_ELSE);
          }
        case 169: break;
        case 50: 
          { currentText=yytext();return symbol(symbolsSemantic.RIGHTLABEL);
          }
        case 170: break;
        case 111: 
          { currentText=yytext();return symbol(symbolsSemantic.BOOLEAN);
          }
        case 171: break;
        case 94: 
          { currentText=yytext();return symbol(symbolsSemantic.TAGGED);
          }
        case 172: break;
        case 20: 
          { currentText=yytext();return symbol(symbolsSemantic.COMMA);
          }
        case 173: break;
        case 68: 
          { lexical_warnings.add("Advertencia L�xica: N�mero ilegal (con base) '"+yytext()+"' sustituido por su equivalente entero:"+ unbase_literal(yytext()).toString()+" en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)); return symbol(symbolsSemantic.INTEGER_LITERAL,unbase_literal(yytext()));
          }
        case 174: break;
        case 24: 
          { currentText=yytext();return symbol(symbolsSemantic.LT);
          }
        case 175: break;
        case 27: 
          { yybegin(YYINITIAL);
	 currentText=yytext();return symbol(symbolsSemantic.STRING_LITERAL,string.toString());
          }
        case 176: break;
        case 124: 
          { currentText=yytext();return symbol(symbolsSemantic.PROTECTED);
          }
        case 177: break;
        case 16: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '}' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
	currentText=yytext();
          }
        case 178: break;
        case 114: 
          { currentText=yytext();return symbol(symbolsSemantic.PRIVATE);
          }
        case 179: break;
        case 59: 
          { currentText=yytext();return symbol(symbolsSemantic.AND);
          }
        case 180: break;
        case 79: 
          { currentText=yytext();return symbol(symbolsSemantic.GOTO);
          }
        case 181: break;
        case 74: 
          { currentText=yytext();return symbol(symbolsSemantic.THEN);
          }
        case 182: break;
        case 14: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� ']' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y se ha reemplazado por ')'");
	currentText=yytext();return symbol(symbolsSemantic.RIGHTPAR);
          }
        case 183: break;
        case 63: 
          { currentText=yytext();return symbol(symbolsSemantic.OUT);
          }
        case 184: break;
        case 52: 
          { lexical_warnings.add("Advertencia l�xica: N�mero ilegal (con exponente) '"+yytext()+"' sustituido por :"+Float.parseFloat(yytext().replaceAll("_",""))+" en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));return symbol(symbolsSemantic.FLOATING_POINT_LITERAL,new Float(Float.parseFloat(yytext().replaceAll("_",""))));
          }
        case 185: break;
        case 37: 
          { currentText=yytext();return symbol(symbolsSemantic.IN);
          }
        case 186: break;
        case 62: 
          { currentText=yytext();return symbol(symbolsSemantic.NOT);
          }
        case 187: break;
        case 117: 
          { currentText=yytext();return symbol(symbolsSemantic.FUNCTION);
          }
        case 188: break;
        case 33: 
          { currentText=yytext();return symbol(symbolsSemantic.OR);
          }
        case 189: break;
        case 108: 
          { currentText=yytext();return symbol(symbolsSemantic.SUBTYPE);
          }
        case 190: break;
        case 4: 
          { /*currentText=yytext();return symbol(symbolsSemantic.SEPARATOR);*/
          }
        case 191: break;
        case 116: 
          { currentText=yytext();return symbol(symbolsSemantic.CONSTANT);
          }
        case 192: break;
        case 64: 
          { currentText=yytext();return symbol(symbolsSemantic.GET);
          }
        case 193: break;
        case 115: 
          { currentText=yytext();return symbol(symbolsSemantic.PACKAGE);
          }
        case 194: break;
        case 26: 
          { string.append(yytext());
          }
        case 195: break;
        case 13: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '[' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y se ha reemplazado por '('");
	currentText=yytext();return symbol(symbolsSemantic.LEFTPAR);
          }
        case 196: break;
        case 106: 
          { currentText=yytext();return symbol(symbolsSemantic.ALIASED);
          }
        case 197: break;
        case 30: 
          { currentText=yytext();return symbol(symbolsSemantic.CHARACTER_LITERAL,yytext());
          }
        case 198: break;
        case 48: 
          { currentText=yytext();return symbol(symbolsSemantic.BOX);
          }
        case 199: break;
        case 60: 
          { currentText=yytext();return symbol(symbolsSemantic.ABS);
          }
        case 200: break;
        case 41: 
          { currentText=yytext();return symbol(symbolsSemantic.ARROW);
          }
        case 201: break;
        case 123: 
          { currentText=yytext();return symbol(symbolsSemantic.PROCEDURE);
          }
        case 202: break;
        case 54: 
          { currentText=yytext();return symbol(symbolsSemantic.END);
          }
        case 203: break;
        case 120: 
          { currentText=yytext();return symbol(symbolsSemantic.SEPARATE);
          }
        case 204: break;
        case 92: 
          { currentText=yytext();return symbol(symbolsSemantic.BEGIN);
          }
        case 205: break;
        case 66: 
          { currentText=yytext();return symbol(symbolsSemantic.XOR);
          }
        case 206: break;
        case 2: 
          { currentText=yytext();return symbol(symbolsSemantic.IDENTIFIER, yytext());
          }
        case 207: break;
        case 28: 
          { lexical_errors.add("Error l�xico: literal de cadena de caracteres no cerrada. En l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));yybegin(YYINITIAL); return symbol(symbolsSemantic.STRING_LITERAL, string.toString());
          }
        case 208: break;
        case 55: 
          { currentText=yytext();return symbol(symbolsSemantic.REM);
          }
        case 209: break;
        case 112: 
          { currentText=yytext();return symbol(symbolsSemantic.INTEGER);
          }
        case 210: break;
        case 107: 
          { currentText=yytext();return symbol(symbolsSemantic.LIMITED);
          }
        case 211: break;
        case 71: 
          { currentText=yytext();return symbol(symbolsSemantic.CASE);
          }
        case 212: break;
        case 98: 
          { currentText=yytext();return symbol(symbolsSemantic.ACCEPT);
          }
        case 213: break;
        case 1: 
          { lexical_errors.add("Error l�xico: caracter inesperado: '"+yytext()+"' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
          }
        case 214: break;
        case 19: 
          { currentText=yytext();return symbol(symbolsSemantic.MULTIPLY);
          }
        case 215: break;
        case 35: 
          { currentText=yytext();return symbol(symbolsSemantic.IF);
          }
        case 216: break;
        case 56: 
          { currentText=yytext();return symbol(symbolsSemantic.USE);
          }
        case 217: break;
        case 99: 
          { currentText=yytext();return symbol(symbolsSemantic.SELECT);
          }
        case 218: break;
        case 11: 
          { currentText=yytext();return symbol(symbolsSemantic.VERTICAL_LINE);
          }
        case 219: break;
        case 75: 
          { currentText=yytext();return symbol(symbolsSemantic.TYPE);
          }
        case 220: break;
        case 91: 
          { currentText=yytext();return symbol(symbolsSemantic.DELAY);
          }
        case 221: break;
        case 102: 
          { currentText=yytext();return symbol(symbolsSemantic.PRAGMA);
          }
        case 222: break;
        case 46: 
          { currentText=yytext();return symbol(symbolsSemantic.LTEQ);
          }
        case 223: break;
        case 118: 
          { currentText=yytext();return symbol(symbolsSemantic.AND_THEN);
          }
        case 224: break;
        case 97: 
          { currentText=yytext();return symbol(symbolsSemantic.ACCESS);
          }
        case 225: break;
        case 38: 
          { lexical_warnings.add("Advertencia l�xica: se encontr� '&&' en l�nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber�a ser 'and then'");
	currentText=yytext();return symbol(symbolsSemantic.AND_THEN);
          }
        case 226: break;
        case 89: 
          { currentText=yytext();return symbol(symbolsSemantic.ABORT);
          }
        case 227: break;
        case 119: 
          { currentText=yytext();return symbol(symbolsSemantic.ABSTRACT);
          }
        case 228: break;
        case 80: 
          { currentText=yytext();return symbol(symbolsSemantic.WHEN);
          }
        case 229: break;
        case 83: 
          { currentText=yytext();return symbol(symbolsSemantic.ENTRY);
          }
        case 230: break;
        case 34: 
          { currentText=yytext();return symbol(symbolsSemantic.OF);
          }
        case 231: break;
        case 43: 
          { currentText=yytext();return symbol(symbolsSemantic.EXPONENTIATE);
          }
        case 232: break;
        case 78: 
          { currentText=yytext();return symbol(symbolsSemantic.BODY);
          }
        case 233: break;
        case 72: 
          { currentText=yytext();return symbol(symbolsSemantic.BOOLEAN_LITERAL,new Boolean(Boolean.parseBoolean(yytext())));
          }
        case 234: break;
        case 95: 
          { currentText=yytext();return symbol(symbolsSemantic.RECORD);
          }
        case 235: break;
        case 45: 
          { currentText=yytext();return symbol(symbolsSemantic.ASSIGNMENT);
          }
        case 236: break;
        case 69: 
          { currentText=yytext();return symbol(symbolsSemantic.ELSE);
          }
        case 237: break;
        case 70: 
          { currentText=yytext();return symbol(symbolsSemantic.EXIT);
          }
        case 238: break;
        case 105: 
          { currentText=yytext();return symbol(symbolsSemantic.REQUEUE);
          }
        case 239: break;
        case 101: 
          { currentText=yytext();return symbol(symbolsSemantic.OTHERS);
          }
        case 240: break;
        case 17: 
          { currentText=yytext();return symbol(symbolsSemantic.LEFTPAR);
          }
        case 241: break;
        case 49: 
          { currentText=yytext();return symbol(symbolsSemantic.GTEQ);
          }
        case 242: break;
        case 90: 
          { currentText=yytext();return symbol(symbolsSemantic.DELTA);
          }
        case 243: break;
        case 76: 
          { currentText=yytext();return symbol(symbolsSemantic.LOOP);
          }
        case 244: break;
        case 84: 
          { currentText=yytext();return symbol(symbolsSemantic.RANGE);
          }
        case 245: break;
        case 100: 
          { currentText=yytext();return symbol(symbolsSemantic.DIGITS);
          }
        case 246: break;
        case 53: 
          { 
          }
        case 247: break;
        case 57: 
          { currentText=yytext();return symbol(symbolsSemantic.FOR);
          }
        case 248: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
