package su_compiler;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 08 17:53:01 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import Ada95_Semantic.*;
import Ada95_Intermediate.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 08 17:53:01 CST 2012
  */
public class AnalizadorSemantic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSemantic() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSemantic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSemantic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\325\000\002\002\004\000\002\104\004\000\002\104" +
    "\004\000\002\104\004\000\002\104\002\000\002\107\004" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\004\000\002\107\004\000\002\107\004\000\002" +
    "\107\003\000\002\107\004\000\002\113\002\000\002\007" +
    "\010\000\002\114\002\000\002\010\006\000\002\010\002" +
    "\000\002\011\004\000\002\011\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\012\004\000\002\012\002\000\002\002" +
    "\007\000\002\002\006\000\002\003\007\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\006\002\000\002\015\004\000\002" +
    "\016\004\000\002\017\005\000\002\017\002\000\002\020" +
    "\005\000\002\020\002\000\002\021\003\000\002\115\002" +
    "\000\002\021\005\000\002\021\003\000\002\021\005\000" +
    "\002\116\002\000\002\021\006\000\002\037\003\000\002" +
    "\033\006\000\002\033\004\000\002\033\003\000\002\034" +
    "\004\000\002\034\002\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\004\000\002\036\003\000" +
    "\002\036\005\000\002\036\003\000\002\106\003\000\002" +
    "\040\013\000\002\117\002\000\002\041\007\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\002\000\002\042\007\000\002\042\002\000\002" +
    "\043\004\000\002\043\002\000\002\044\003\000\002\053" +
    "\015\000\002\055\003\000\002\120\002\000\002\054\007" +
    "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\054\002\000\002\045\007\000\002\121" +
    "\002\000\002\046\007\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\005\000\002\046\004\000\002" +
    "\046\002\000\002\047\005\000\002\047\005\000\002\030" +
    "\003\000\002\030\003\000\002\022\012\000\002\023\010" +
    "\000\002\024\006\000\002\024\002\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\011\000\002" +
    "\032\004\000\002\032\002\000\002\031\004\000\002\031" +
    "\002\000\002\027\003\000\002\027\003\000\002\050\011" +
    "\000\002\051\003\000\002\122\002\000\002\052\007\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\002\000\002\123\002\000\002\056\016" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\002\000\002\060\012\000\002\060\002\000\002" +
    "\067\010\000\002\067\002\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\070\003\000\002\070\002" +
    "\000\002\062\005\000\002\062\002\000\002\063\004\000" +
    "\002\063\002\000\002\064\004\000\002\065\005\000\002" +
    "\065\005\000\002\124\002\000\002\066\007\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\002\000\002\105\003\000\002" +
    "\125\002\000\002\071\015\000\002\100\004\000\002\100" +
    "\004\000\002\100\004\000\002\100\004\000\002\100\002" +
    "\000\002\072\005\000\002\072\004\000\002\072\003\000" +
    "\002\072\002\000\002\073\004\000\002\103\005\000\002" +
    "\103\002\000\002\074\007\000\002\074\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\002" +
    "\000\002\076\005\000\002\076\002\000\002\101\004\000" +
    "\002\101\004\000\002\101\002\000\002\126\002\000\002" +
    "\102\007\000\002\102\004\000\002\102\004\000\002\102" +
    "\004\000\002\102\004\000\002\102\004\000\002\102\004" +
    "\000\002\102\004\000\002\102\002\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\110\005\000\002" +
    "\110\004\000\002\111\004\000\002\111\004\000\002\111" +
    "\003\000\002\111\003\000\002\112\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\012\002\ufffd\003\005\023\010\031\011\001" +
    "\002\000\012\002\ufffd\003\005\023\010\031\011\001\002" +
    "\000\032\002\ufffd\003\005\004\174\010\163\023\010\031" +
    "\011\032\014\036\172\037\161\040\166\042\175\044\057" +
    "\001\002\000\004\002\u0184\001\002\000\012\002\ufffd\003" +
    "\005\023\010\031\011\001\002\000\004\044\u0140\001\002" +
    "\000\004\044\012\001\002\000\012\005\uff59\026\uff59\032" +
    "\uff59\044\uff59\001\002\000\012\005\016\026\uff4f\032\014" +
    "\044\017\001\002\000\004\044\u012c\001\002\000\004\026" +
    "\047\001\002\000\010\006\044\032\014\044\017\001\002" +
    "\000\006\011\027\015\uff44\001\002\000\004\026\uff50\001" +
    "\002\000\010\006\uff4c\007\024\026\uff4c\001\002\000\010" +
    "\006\uff4a\007\uff4a\026\uff4a\001\002\000\006\006\uff4e\026" +
    "\uff4e\001\002\000\006\032\014\044\017\001\002\000\010" +
    "\006\uff4c\007\024\026\uff4c\001\002\000\006\006\uff4d\026" +
    "\uff4d\001\002\000\004\044\042\001\002\000\004\015\031" +
    "\001\002\000\016\020\034\021\032\022\035\033\uff46\034" +
    "\uff46\035\uff46\001\002\000\010\033\uff48\034\uff48\035\uff48" +
    "\001\002\000\010\033\037\034\041\035\040\001\002\000" +
    "\010\033\uff49\034\uff49\035\uff49\001\002\000\010\033\uff47" +
    "\034\uff47\035\uff47\001\002\000\010\006\uff4b\007\uff4b\026" +
    "\uff4b\001\002\000\010\006\uff36\007\uff36\026\uff36\001\002" +
    "\000\010\006\uff34\007\uff34\026\uff34\001\002\000\010\006" +
    "\uff35\007\uff35\026\uff35\001\002\000\006\011\027\015\uff44" +
    "\001\002\000\004\015\uff45\001\002\000\004\026\uff51\001" +
    "\002\000\004\006\046\001\002\000\004\026\uff52\001\002" +
    "\000\014\023\010\027\uff53\031\011\032\014\044\057\001" +
    "\002\000\034\002\uff96\003\uff96\004\uff96\010\uff96\023\uff96" +
    "\027\uff96\031\uff96\032\uff96\036\uff96\037\uff96\040\uff96\042" +
    "\uff96\044\uff96\001\002\000\014\023\010\027\uff53\031\011" +
    "\032\014\044\057\001\002\000\014\023\010\027\uff53\031" +
    "\011\032\014\044\057\001\002\000\004\027\156\001\002" +
    "\000\014\023\010\027\uff53\031\011\032\014\044\057\001" +
    "\002\000\034\002\uff97\003\uff97\004\uff97\010\uff97\023\uff97" +
    "\027\uff97\031\uff97\032\uff97\036\uff97\037\uff97\040\uff97\042" +
    "\uff97\044\uff97\001\002\000\014\023\010\027\uff53\031\011" +
    "\032\014\044\057\001\002\000\014\005\061\007\ufff3\011" +
    "\ufff3\014\ufff3\015\ufff3\001\002\000\012\007\uffef\011\133" +
    "\014\uffef\015\uffef\001\002\000\010\005\064\044\066\056" +
    "\065\001\002\000\016\006\uffd9\007\uffd9\011\uffd9\037\uffd9" +
    "\041\uffd9\047\130\001\002\000\006\006\uff8a\011\115\001" +
    "\002\000\010\005\064\044\066\056\065\001\002\000\022" +
    "\006\uffd3\007\uffd3\011\uffd3\013\110\037\uffd3\041\uffd3\047" +
    "\uffd3\050\uffd3\001\002\000\022\005\uffd5\006\uffd6\007\uffd6" +
    "\011\uffd6\037\uffd6\041\uffd6\047\uffd6\050\uffd6\001\002\000" +
    "\020\006\uffd7\007\uffd7\011\uffd7\037\uffd7\041\uffd7\047\uffd7" +
    "\050\071\001\002\000\016\006\uffdb\007\uffdb\011\uffdb\037" +
    "\uffdb\041\uffdb\047\uffdb\001\002\000\010\005\064\044\066" +
    "\056\065\001\002\000\020\006\uffd7\007\uffd7\011\uffd7\037" +
    "\uffd7\041\uffd7\047\uffd7\050\071\001\002\000\016\006\uffd8" +
    "\007\uffd8\011\uffd8\037\uffd8\041\uffd8\047\uffd8\001\002\000" +
    "\004\005\076\001\002\000\020\006\uffd4\007\uffd4\011\uffd4" +
    "\037\uffd4\041\uffd4\047\uffd4\050\uffd4\001\002\000\014\005" +
    "\064\006\101\012\077\044\066\056\065\001\002\000\006" +
    "\006\uff2e\011\104\001\002\000\006\006\uff2f\011\104\001" +
    "\002\000\026\006\uff32\007\uff32\011\uff32\037\uff32\041\uff32" +
    "\043\uff32\047\uff32\050\uff32\051\uff32\052\uff32\001\002\000" +
    "\004\006\103\001\002\000\026\006\uff33\007\uff33\011\uff33" +
    "\037\uff33\041\uff33\043\uff33\047\uff33\050\uff33\051\uff33\052" +
    "\uff33\001\002\000\012\005\064\012\077\044\066\056\065" +
    "\001\002\000\004\006\uff30\001\002\000\004\006\uff2d\001" +
    "\002\000\004\006\uff31\001\002\000\004\056\111\001\002" +
    "\000\020\006\uffd2\007\uffd2\011\uffd2\037\uffd2\041\uffd2\047" +
    "\uffd2\050\uffd2\001\002\000\004\006\uffd1\001\002\000\004" +
    "\006\114\001\002\000\020\006\uffd0\007\uffd0\011\uffd0\037" +
    "\uffd0\041\uffd0\047\uffd0\050\uffd0\001\002\000\010\005\064" +
    "\044\066\056\065\001\002\000\004\006\117\001\002\000" +
    "\006\007\uff8c\014\121\001\002\000\004\007\125\001\002" +
    "\000\012\005\064\012\123\044\066\056\065\001\002\000" +
    "\004\007\uff88\001\002\000\004\007\uff89\001\002\000\004" +
    "\007\uff8d\001\002\000\046\002\uff8e\003\uff8e\004\uff8e\010" +
    "\uff8e\023\uff8e\024\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\042\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\053\uff8e\001\002\000\004\006\uff8b\001\002\000\014" +
    "\006\uffdc\007\uffdc\011\uffdc\037\uffdc\041\uffdc\001\002\000" +
    "\010\005\064\044\066\056\065\001\002\000\016\006\uffd9" +
    "\007\uffd9\011\uffd9\037\uffd9\041\uffd9\047\130\001\002\000" +
    "\014\006\uffda\007\uffda\011\uffda\037\uffda\041\uffda\001\002" +
    "\000\004\044\151\001\002\000\010\007\uffed\014\uffed\015" +
    "\135\001\002\000\010\033\146\034\150\035\147\001\002" +
    "\000\006\007\uffe6\014\140\001\002\000\004\007\144\001" +
    "\002\000\012\005\064\012\143\044\066\056\065\001\002" +
    "\000\004\007\uffe7\001\002\000\004\007\uffe8\001\002\000" +
    "\004\007\uffe9\001\002\000\034\002\ufff2\003\ufff2\004\ufff2" +
    "\010\ufff2\023\ufff2\027\ufff2\031\ufff2\032\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\042\ufff2\044\ufff2\001\002\000\006\007\uffee" +
    "\014\uffee\001\002\000\006\007\uffec\014\uffec\001\002\000" +
    "\006\007\uffea\014\uffea\001\002\000\006\007\uffeb\014\uffeb" +
    "\001\002\000\012\007\ufff1\011\ufff1\014\ufff1\015\ufff1\001" +
    "\002\000\012\007\uffef\011\133\014\uffef\015\uffef\001\002" +
    "\000\010\007\ufff0\014\ufff0\015\ufff0\001\002\000\004\027" +
    "\uff57\001\002\000\004\027\uff54\001\002\000\022\004\174" +
    "\010\163\030\uff37\036\172\037\161\040\166\042\175\044" +
    "\173\001\002\000\022\004\174\010\163\030\uff37\036\172" +
    "\037\161\040\166\042\175\044\173\001\002\000\022\004" +
    "\174\010\163\030\uff37\036\172\037\161\040\166\042\175" +
    "\044\173\001\002\000\024\004\174\010\163\030\uff9a\036" +
    "\172\037\161\040\166\042\175\044\u0113\053\u0110\001\002" +
    "\000\022\004\174\010\163\030\uff37\036\172\037\161\040" +
    "\166\042\175\044\173\001\002\000\004\005\u0104\001\002" +
    "\000\022\004\174\010\163\030\uff37\036\172\037\161\040" +
    "\166\042\175\044\173\001\002\000\022\004\174\010\163" +
    "\030\uff37\036\172\037\161\040\166\042\175\044\173\001" +
    "\002\000\004\044\344\001\002\000\022\004\174\010\163" +
    "\030\uff37\036\172\037\161\040\166\042\175\044\173\001" +
    "\002\000\022\004\174\010\163\030\uff37\036\172\037\161" +
    "\040\166\042\175\044\173\001\002\000\004\030\337\001" +
    "\002\000\020\005\202\012\177\037\uffca\044\206\051\203" +
    "\052\200\056\176\001\002\000\010\005\061\007\uff8c\014" +
    "\121\001\002\000\004\005\263\001\002\000\020\005\202" +
    "\012\177\043\uffca\044\206\051\203\052\200\056\176\001" +
    "\002\000\020\006\uffc5\007\uffc5\013\261\037\uffc5\043\uffc5" +
    "\051\uffc5\052\uffc5\001\002\000\016\006\uffc3\007\uffc3\037" +
    "\uffc3\043\uffc3\051\uffc3\052\uffc3\001\002\000\026\005\uffc9" +
    "\006\uffc9\007\uffc9\012\uffc9\037\uffc9\043\uffc9\044\uffc9\051" +
    "\uffc9\052\uffc9\056\uffc9\001\002\000\010\007\uffcf\037\uffcf" +
    "\043\uffcf\001\002\000\020\005\202\006\uffca\012\177\044" +
    "\206\051\203\052\200\056\176\001\002\000\026\005\uffc8" +
    "\006\uffc8\007\uffc8\012\uffc8\037\uffc8\043\uffc8\044\uffc8\051" +
    "\uffc8\052\uffc8\056\uffc8\001\002\000\012\006\uffcc\007\uffcc" +
    "\037\uffcc\043\uffcc\001\002\000\026\005\202\006\uffca\007" +
    "\uffca\012\177\037\uffca\043\uffca\044\206\051\203\052\200" +
    "\056\176\001\002\000\020\005\076\006\uffc7\007\uffc7\037" +
    "\uffc7\043\uffc7\051\uffc7\052\uffc7\001\002\000\016\006\uffca" +
    "\007\uffca\037\uffca\043\uffca\051\203\052\200\001\002\000" +
    "\004\043\212\001\002\000\004\043\uffb2\001\002\000\026" +
    "\004\174\010\163\030\uffb7\036\172\037\161\040\166\042" +
    "\175\044\222\045\uffb7\046\uffb7\001\002\000\026\004\174" +
    "\010\163\030\uffb7\036\172\037\161\040\166\042\175\044" +
    "\222\045\uffb7\046\uffb7\001\002\000\026\004\174\010\163" +
    "\030\uffb7\036\172\037\161\040\166\042\175\044\222\045" +
    "\uffb7\046\uffb7\001\002\000\026\004\174\010\163\030\uffb7" +
    "\036\172\037\161\040\166\042\175\044\222\045\uffb7\046" +
    "\uffb7\001\002\000\026\004\174\010\163\030\uffb7\036\172" +
    "\037\161\040\166\042\175\044\222\045\uffb7\046\uffb7\001" +
    "\002\000\026\004\174\010\163\030\uffb7\036\172\037\161" +
    "\040\166\042\175\044\222\045\uffb7\046\uffb7\001\002\000" +
    "\026\004\174\010\163\030\uffb7\036\172\037\161\040\166" +
    "\042\175\044\222\045\uffb7\046\uffb7\001\002\000\026\004" +
    "\174\010\163\030\uffb7\036\172\037\161\040\166\042\175" +
    "\044\222\045\uffb7\046\uffb7\001\002\000\010\005\061\007" +
    "\uff8c\014\121\001\002\000\010\030\uffb5\045\224\046\uffb5" +
    "\001\002\000\020\005\202\012\177\043\uffca\044\206\051" +
    "\203\052\200\056\176\001\002\000\006\030\uffb3\046\226" +
    "\001\002\000\022\004\174\010\163\030\uffb7\036\172\037" +
    "\161\040\166\042\175\044\222\001\002\000\004\030\230" +
    "\001\002\000\004\042\231\001\002\000\004\007\232\001" +
    "\002\000\044\002\uffc1\003\uffc1\004\uffc1\010\uffc1\023\uffc1" +
    "\024\uffc1\030\uffc1\031\uffc1\032\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\053\uffc1\001\002" +
    "\000\004\030\uffb4\001\002\000\004\043\235\001\002\000" +
    "\026\004\174\010\163\030\uffb7\036\172\037\161\040\166" +
    "\042\175\044\222\045\uffb7\046\uffb7\001\002\000\010\030" +
    "\uffb5\045\224\046\uffb5\001\002\000\006\030\uffb6\046\uffb6" +
    "\001\002\000\004\007\uffc0\001\002\000\004\007\242\001" +
    "\002\000\026\004\174\010\163\030\uffb7\036\172\037\161" +
    "\040\166\042\175\044\222\045\uffb7\046\uffb7\001\002\000" +
    "\010\030\uffbf\045\uffbf\046\uffbf\001\002\000\010\030\uffbe" +
    "\045\uffbe\046\uffbe\001\002\000\010\030\uffbc\045\uffbc\046" +
    "\uffbc\001\002\000\010\030\uffb8\045\uffb8\046\uffb8\001\002" +
    "\000\010\030\uffb9\045\uffb9\046\uffb9\001\002\000\010\030" +
    "\uffbd\045\uffbd\046\uffbd\001\002\000\010\030\uffbb\045\uffbb" +
    "\046\uffbb\001\002\000\010\030\uffba\045\uffba\046\uffba\001" +
    "\002\000\012\006\uffcd\007\uffcd\037\uffcd\043\uffcd\001\002" +
    "\000\016\006\uffc6\007\uffc6\037\uffc6\043\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\012\006\uffcb\007\uffcb\037\uffcb\043\uffcb" +
    "\001\002\000\004\006\257\001\002\000\016\006\uffca\007" +
    "\uffca\037\uffca\043\uffca\051\203\052\200\001\002\000\012" +
    "\006\uffce\007\uffce\037\uffce\043\uffce\001\002\000\004\056" +
    "\262\001\002\000\016\006\uffc4\007\uffc4\037\uffc4\043\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\016\005\064\006\270\012" +
    "\266\017\265\044\066\056\065\001\002\000\004\006\277" +
    "\001\002\000\006\006\uffe1\011\uffe1\001\002\000\006\006" +
    "\uffe0\011\uffe0\001\002\000\006\006\uffdf\011\uffdf\001\002" +
    "\000\004\007\276\001\002\000\006\006\uffdd\011\273\001" +
    "\002\000\004\006\uffe2\001\002\000\014\005\064\012\266" +
    "\017\265\044\066\056\065\001\002\000\006\006\uffdd\011" +
    "\273\001\002\000\004\006\uffde\001\002\000\044\002\uffe4" +
    "\003\uffe4\004\uffe4\010\uffe4\023\uffe4\024\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\053\uffe4\001\002\000\004\007\300\001" +
    "\002\000\044\002\uffe5\003\uffe5\004\uffe5\010\uffe5\023\uffe5" +
    "\024\uffe5\030\uffe5\031\uffe5\032\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\053\uffe5\001\002" +
    "\000\004\007\uff40\001\002\000\004\007\303\001\002\000" +
    "\022\004\174\010\163\030\uff37\036\172\037\161\040\166" +
    "\042\175\044\173\001\002\000\004\030\uff3f\001\002\000" +
    "\004\037\307\001\002\000\004\037\uff86\001\002\000\022" +
    "\004\174\010\163\030\uff7c\036\172\037\161\040\166\042" +
    "\175\044\320\001\002\000\022\004\174\010\163\030\uff7c" +
    "\036\172\037\161\040\166\042\175\044\320\001\002\000" +
    "\022\004\174\010\163\030\uff7c\036\172\037\161\040\166" +
    "\042\175\044\320\001\002\000\022\004\174\010\163\030" +
    "\uff7c\036\172\037\161\040\166\042\175\044\320\001\002" +
    "\000\004\030\331\001\002\000\022\004\174\010\163\030" +
    "\uff7c\036\172\037\161\040\166\042\175\044\320\001\002" +
    "\000\022\004\174\010\163\030\uff7c\036\172\037\161\040" +
    "\166\042\175\044\320\001\002\000\022\004\174\010\163" +
    "\030\uff7c\036\172\037\161\040\166\042\175\044\320\001" +
    "\002\000\022\004\174\010\163\030\uff7c\036\172\037\161" +
    "\040\166\042\175\044\320\001\002\000\010\005\061\007" +
    "\uff8c\014\121\001\002\000\004\007\uff85\001\002\000\004" +
    "\007\323\001\002\000\022\004\174\010\163\030\uff7c\036" +
    "\172\037\161\040\166\042\175\044\320\001\002\000\004" +
    "\030\uff84\001\002\000\004\030\uff81\001\002\000\004\030" +
    "\uff83\001\002\000\004\030\uff7d\001\002\000\004\030\uff7e" +
    "\001\002\000\004\037\332\001\002\000\004\007\333\001" +
    "\002\000\044\002\uff87\003\uff87\004\uff87\010\uff87\023\uff87" +
    "\024\uff87\030\uff87\031\uff87\032\uff87\036\uff87\037\uff87\040" +
    "\uff87\042\uff87\044\uff87\045\uff87\046\uff87\053\uff87\001\002" +
    "\000\004\030\uff82\001\002\000\004\030\uff80\001\002\000" +
    "\004\030\uff7f\001\002\000\004\044\340\001\002\000\004" +
    "\007\341\001\002\000\020\002\uff58\003\uff58\023\uff58\027" +
    "\uff58\031\uff58\032\uff58\044\uff58\001\002\000\004\030\uff3c" +
    "\001\002\000\004\030\uff3e\001\002\000\004\020\345\001" +
    "\002\000\010\005\064\044\066\056\065\001\002\000\006" +
    "\037\uffb0\041\uffb0\001\002\000\004\041\350\001\002\000" +
    "\010\005\064\044\066\056\065\001\002\000\004\037\352" +
    "\001\002\000\022\004\174\010\163\030\uffa6\036\172\037" +
    "\161\040\166\042\175\044\362\001\002\000\022\004\174" +
    "\010\163\030\uffa6\036\172\037\161\040\166\042\175\044" +
    "\362\001\002\000\022\004\174\010\163\030\uffa6\036\172" +
    "\037\161\040\166\042\175\044\362\001\002\000\022\004" +
    "\174\010\163\030\uffa6\036\172\037\161\040\166\042\175" +
    "\044\362\001\002\000\022\004\174\010\163\030\uffa6\036" +
    "\172\037\161\040\166\042\175\044\362\001\002\000\022" +
    "\004\174\010\163\030\uffa6\036\172\037\161\040\166\042" +
    "\175\044\362\001\002\000\022\004\174\010\163\030\uffa6" +
    "\036\172\037\161\040\166\042\175\044\362\001\002\000" +
    "\022\004\174\010\163\030\uffa6\036\172\037\161\040\166" +
    "\042\175\044\362\001\002\000\010\005\061\007\uff8c\014" +
    "\121\001\002\000\004\030\364\001\002\000\004\037\365" +
    "\001\002\000\004\007\366\001\002\000\044\002\uffb1\003" +
    "\uffb1\004\uffb1\010\uffb1\023\uffb1\024\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\036\uffb1\037\uffb1\040\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\053\uffb1\001\002\000\004\007\uffaf\001\002" +
    "\000\004\007\371\001\002\000\022\004\174\010\163\030" +
    "\uffa6\036\172\037\161\040\166\042\175\044\362\001\002" +
    "\000\004\030\uffae\001\002\000\004\030\uffab\001\002\000" +
    "\004\030\uffad\001\002\000\004\030\uffa7\001\002\000\004" +
    "\030\uffa8\001\002\000\004\030\uffac\001\002\000\004\030" +
    "\uffaa\001\002\000\004\030\uffa9\001\002\000\004\030\uff38" +
    "\001\002\000\004\030\uff39\001\002\000\004\044\u0105\001" +
    "\002\000\004\006\u0106\001\002\000\004\007\u0107\001\002" +
    "\000\044\002\uffe3\003\uffe3\004\uffe3\010\uffe3\023\uffe3\024" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\046\uffe3\053\uffe3\001\002\000" +
    "\004\030\uff3d\001\002\000\024\004\174\010\163\030\uff9a" +
    "\036\172\037\161\040\166\042\175\044\u0113\053\u0110\001" +
    "\002\000\024\004\174\010\163\030\uff9a\036\172\037\161" +
    "\040\166\042\175\044\u0113\053\u0110\001\002\000\004\007" +
    "\u0124\001\002\000\024\004\174\010\163\030\uff9a\036\172" +
    "\037\161\040\166\042\175\044\u0113\053\u0110\001\002\000" +
    "\024\004\174\010\163\030\uff9a\036\172\037\161\040\166" +
    "\042\175\044\u0113\053\u0110\001\002\000\024\004\174\010" +
    "\163\030\uff9a\036\172\037\161\040\166\042\175\044\u0113" +
    "\053\u0110\001\002\000\024\004\174\010\163\030\uff9a\036" +
    "\172\037\161\040\166\042\175\044\u0113\053\u0110\001\002" +
    "\000\006\003\u011d\054\u011c\001\002\000\024\004\174\010" +
    "\163\030\uff9a\036\172\037\161\040\166\042\175\044\u0113" +
    "\053\u0110\001\002\000\004\030\u0118\001\002\000\010\005" +
    "\061\007\uff8c\014\121\001\002\000\004\007\uffa4\001\002" +
    "\000\004\007\u0116\001\002\000\024\004\174\010\163\030" +
    "\uff9a\036\172\037\161\040\166\042\175\044\u0113\053\u0110" +
    "\001\002\000\004\030\uffa3\001\002\000\004\037\u0119\001" +
    "\002\000\004\007\u011a\001\002\000\044\002\uffa5\003\uffa5" +
    "\004\uffa5\010\uffa5\023\uffa5\024\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\053\uffa5\001\002\000\004\030\uffa0\001\002\000" +
    "\020\005\202\007\uffca\012\177\044\206\051\203\052\200" +
    "\056\176\001\002\000\020\005\202\007\uffca\012\177\044" +
    "\206\051\203\052\200\056\176\001\002\000\004\007\uff98" +
    "\001\002\000\004\007\uff99\001\002\000\004\030\uffa2\001" +
    "\002\000\004\030\uff9b\001\002\000\004\030\uff9d\001\002" +
    "\000\004\030\uffa1\001\002\000\024\004\174\010\163\030" +
    "\uff9a\036\172\037\161\040\166\042\175\044\u0113\053\u0110" +
    "\001\002\000\004\030\uff9c\001\002\000\004\030\uff9e\001" +
    "\002\000\004\030\uff9f\001\002\000\004\030\uff3b\001\002" +
    "\000\004\030\uff3a\001\002\000\004\027\uff56\001\002\000" +
    "\004\027\uff55\001\002\000\004\026\u012d\001\002\000\004" +
    "\016\u012e\001\002\000\004\005\u0130\001\002\000\004\025" +
    "\u013a\001\002\000\010\005\064\044\066\056\065\001\002" +
    "\000\004\041\u0132\001\002\000\010\005\064\044\066\056" +
    "\065\001\002\000\006\006\uff92\011\u0135\001\002\000\004" +
    "\006\u0139\001\002\000\010\005\064\044\066\056\065\001" +
    "\002\000\004\041\u0137\001\002\000\010\005\064\044\066" +
    "\056\065\001\002\000\004\006\uff93\001\002\000\004\025" +
    "\uff94\001\002\000\010\033\u013b\034\u013d\035\u013c\001\002" +
    "\000\004\007\uff90\001\002\000\004\007\uff8f\001\002\000" +
    "\004\007\uff91\001\002\000\004\007\u013f\001\002\000\042" +
    "\002\uff95\003\uff95\004\uff95\006\uff95\007\uff95\010\uff95\023" +
    "\uff95\026\uff95\027\uff95\031\uff95\032\uff95\036\uff95\037\uff95" +
    "\040\uff95\042\uff95\044\uff95\001\002\000\006\005\uff7b\024" +
    "\uff7b\001\002\000\006\005\u0142\024\uff74\001\002\000\004" +
    "\044\u0172\001\002\000\004\024\u0145\001\002\000\004\026" +
    "\u014a\001\002\000\010\033\u0146\034\u0149\035\u0148\001\002" +
    "\000\010\006\uff71\007\uff71\026\uff71\001\002\000\004\026" +
    "\uff68\001\002\000\010\006\uff6f\007\uff6f\026\uff6f\001\002" +
    "\000\010\006\uff70\007\uff70\026\uff70\001\002\000\012\023" +
    "\010\027\uff76\032\014\044\u014d\001\002\000\012\023\010" +
    "\027\uff76\032\014\044\u014d\001\002\000\012\023\010\027" +
    "\uff76\032\014\044\u014d\001\002\000\012\007\ufff3\011\ufff3" +
    "\014\ufff3\015\ufff3\001\002\000\004\027\u0151\001\002\000" +
    "\012\023\010\027\uff76\032\014\044\u014d\001\002\000\004" +
    "\027\uff78\001\002\000\024\004\174\010\163\024\u015a\030" +
    "\uff5b\036\172\037\161\040\166\042\175\044\u015b\001\002" +
    "\000\024\004\174\010\163\024\u015a\030\uff5b\036\172\037" +
    "\161\040\166\042\175\044\u015b\001\002\000\024\004\174" +
    "\010\163\024\u015a\030\uff5b\036\172\037\161\040\166\042" +
    "\175\044\u015b\001\002\000\024\004\174\010\163\024\u015a" +
    "\030\uff5b\036\172\037\161\040\166\042\175\044\u015b\001" +
    "\002\000\024\004\174\010\163\024\u015a\030\uff5b\036\172" +
    "\037\161\040\166\042\175\044\u015b\001\002\000\024\004" +
    "\174\010\163\024\u015a\030\uff5b\036\172\037\161\040\166" +
    "\042\175\044\u015b\001\002\000\024\004\174\010\163\024" +
    "\u015a\030\uff5b\036\172\037\161\040\166\042\175\044\u015b" +
    "\001\002\000\024\004\174\010\163\024\u015a\030\uff5b\036" +
    "\172\037\161\040\166\042\175\044\u015b\001\002\000\024" +
    "\004\174\010\163\024\u015a\030\uff5b\036\172\037\161\040" +
    "\166\042\175\044\u015b\001\002\000\012\005\064\012\u0165" +
    "\044\066\056\065\001\002\000\010\005\061\007\uff8c\014" +
    "\121\001\002\000\004\030\u015d\001\002\000\004\044\u015e" +
    "\001\002\000\004\007\u015f\001\002\000\020\002\uff7a\003" +
    "\uff7a\023\uff7a\027\uff7a\031\uff7a\032\uff7a\044\uff7a\001\002" +
    "\000\004\007\uff65\001\002\000\004\007\u0162\001\002\000" +
    "\024\004\174\010\163\024\u015a\030\uff5b\036\172\037\161" +
    "\040\166\042\175\044\u015b\001\002\000\004\030\uff64\001" +
    "\002\000\004\007\u0167\001\002\000\004\007\u0166\001\002" +
    "\000\024\004\uff67\010\uff67\024\uff67\030\uff67\036\uff67\037" +
    "\uff67\040\uff67\042\uff67\044\uff67\001\002\000\024\004\uff66" +
    "\010\uff66\024\uff66\030\uff66\036\uff66\037\uff66\040\uff66\042" +
    "\uff66\044\uff66\001\002\000\004\030\uff5c\001\002\000\004" +
    "\030\uff61\001\002\000\004\030\uff63\001\002\000\004\030" +
    "\uff60\001\002\000\004\030\uff5d\001\002\000\004\030\uff62" +
    "\001\002\000\004\030\uff5f\001\002\000\004\030\uff5e\001" +
    "\002\000\004\027\uff79\001\002\000\004\027\uff77\001\002" +
    "\000\006\011\u0173\015\uff6b\001\002\000\004\044\u0181\001" +
    "\002\000\004\015\u0175\001\002\000\012\020\u0176\033\uff6d" +
    "\034\uff6d\035\uff6d\001\002\000\010\033\uff6e\034\uff6e\035" +
    "\uff6e\001\002\000\010\033\u0146\034\u0149\035\u0148\001\002" +
    "\000\006\006\uff72\007\u0179\001\002\000\004\044\u017c\001" +
    "\002\000\004\006\u017b\001\002\000\004\024\uff75\001\002" +
    "\000\006\011\u0173\015\uff6b\001\002\000\004\015\u017e\001" +
    "\002\000\010\033\u0146\034\u0149\035\u0148\001\002\000\006" +
    "\006\uff72\007\u0179\001\002\000\004\006\uff73\001\002\000" +
    "\006\011\u0173\015\uff6b\001\002\000\004\015\uff6c\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufff5\001\002\000\004\002\ufffe\001\002\000\032" +
    "\002\ufffd\003\005\004\174\010\163\023\010\031\011\032" +
    "\014\036\172\037\161\040\166\042\175\044\057\001\002" +
    "\000\032\002\ufffd\003\005\004\174\010\163\023\010\031" +
    "\011\032\014\036\172\037\161\040\166\042\175\044\057" +
    "\001\002\000\032\002\ufffd\003\005\004\174\010\163\023" +
    "\010\031\011\032\014\036\172\037\161\040\166\042\175" +
    "\044\057\001\002\000\032\002\uffc2\003\uffc2\004\uffc2\010" +
    "\uffc2\023\uffc2\031\uffc2\032\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\042\uffc2\044\uffc2\001\002\000\032\002\ufffd\003\005\004" +
    "\174\010\163\023\010\031\011\032\014\036\172\037\161" +
    "\040\166\042\175\044\057\001\002\000\032\002\ufffd\003" +
    "\005\004\174\010\163\023\010\031\011\032\014\036\172" +
    "\037\161\040\166\042\175\044\057\001\002\000\032\002" +
    "\ufffd\003\005\004\174\010\163\023\010\031\011\032\014" +
    "\036\172\037\161\040\166\042\175\044\057\001\002\000" +
    "\032\002\ufffd\003\005\004\174\010\163\023\010\031\011" +
    "\032\014\036\172\037\161\040\166\042\175\044\057\001" +
    "\002\000\032\002\ufffd\003\005\004\174\010\163\023\010" +
    "\031\011\032\014\036\172\037\161\040\166\042\175\044" +
    "\057\001\002\000\004\002\ufff6\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff8\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\010\056\003\071\006\104\005\001\001\000" +
    "\010\056\003\071\006\104\u0197\001\001\000\040\002\u0186" +
    "\003\u018d\007\u0187\022\054\026\047\030\u0188\040\u0189\045" +
    "\u018e\050\u018a\053\u018b\056\003\071\006\104\u0184\106\u018c" +
    "\107\u0185\001\001\000\002\001\001\000\010\056\003\071" +
    "\006\104\u0182\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\012\001\001\000\012\022\021\072\014\073" +
    "\017\074\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\021\073\044\074\020\001\001\000\004\076" +
    "\027\001\001\000\002\001\001\000\004\103\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\021\074" +
    "\024\001\001\000\004\103\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\032\001" +
    "\001\000\002\001\001\000\004\077\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\055\022\054\026\047" +
    "\030\051\056\053\071\050\100\052\001\001\000\002\001" +
    "\001\000\020\007\055\022\054\026\047\030\051\056\053" +
    "\071\050\100\u012a\001\001\000\020\007\055\022\054\026" +
    "\047\030\051\056\053\071\050\100\u0129\001\001\000\002" +
    "\001\001\000\020\007\055\022\054\026\047\030\051\056" +
    "\053\071\050\100\154\001\001\000\002\001\001\000\020" +
    "\007\055\022\054\026\047\030\051\056\053\071\050\100" +
    "\153\001\001\000\004\113\057\001\001\000\004\010\133" +
    "\001\001\000\010\015\062\016\061\021\066\001\001\000" +
    "\004\017\126\001\001\000\004\031\115\001\001\000\010" +
    "\015\111\016\061\021\066\001\001\000\002\001\001\000" +
    "\004\115\073\001\001\000\004\020\067\001\001\000\002" +
    "\001\001\000\004\021\071\001\001\000\004\020\072\001" +
    "\001\000\002\001\001\000\004\110\074\001\001\000\002" +
    "\001\001\000\012\015\077\016\061\021\066\111\101\001" +
    "\001\000\004\112\106\001\001\000\004\112\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\077\016\061\021\066\111\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\125\016\061\021" +
    "\066\001\001\000\002\001\001\000\004\032\117\001\001" +
    "\000\002\001\001\000\012\015\121\016\061\021\066\027" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\130\021\066\001\001\000\004\017\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\135\001\001\000\004\013\144\001\001\000\004\012\136" +
    "\001\001\000\002\001\001\000\012\014\140\015\141\016" +
    "\061\021\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\151\001\001\000\004\010\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\166" +
    "\003\161\026\157\040\156\045\164\050\163\053\167\102" +
    "\170\001\001\000\022\002\166\003\161\026\157\040\156" +
    "\045\164\050\163\053\167\102\u0128\001\001\000\022\002" +
    "\166\003\161\026\157\040\156\045\164\050\163\053\167" +
    "\102\u0127\001\001\000\024\002\u010e\003\u010b\026\u0108\040" +
    "\u0109\045\u010d\046\u0111\047\u010a\050\u010c\053\u0110\001\001" +
    "\000\022\002\166\003\161\026\157\040\156\045\164\050" +
    "\163\053\167\102\u0107\001\001\000\002\001\001\000\022" +
    "\002\166\003\161\026\157\040\156\045\164\050\163\053" +
    "\167\102\u0102\001\001\000\022\002\166\003\161\026\157" +
    "\040\156\045\164\050\163\053\167\102\u0101\001\001\000" +
    "\002\001\001\000\022\002\166\003\161\026\157\040\156" +
    "\045\164\050\163\053\167\102\342\001\001\000\022\002" +
    "\166\003\161\026\157\040\156\045\164\050\163\053\167" +
    "\102\341\001\001\000\002\001\001\000\016\033\200\034" +
    "\203\035\204\036\206\037\305\051\304\001\001\000\004" +
    "\032\300\001\001\000\002\001\001\000\016\033\200\034" +
    "\203\035\204\036\206\037\210\044\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\255\034\203\035\204\036\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\254\034" +
    "\203\035\204\036\206\001\001\000\004\110\253\001\001" +
    "\000\006\034\252\035\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\220\003\214\026\213\040\212" +
    "\041\222\045\216\050\215\053\217\001\001\000\022\002" +
    "\220\003\214\026\213\040\212\041\251\045\216\050\215" +
    "\053\217\001\001\000\022\002\220\003\214\026\213\040" +
    "\212\041\250\045\216\050\215\053\217\001\001\000\022" +
    "\002\220\003\214\026\213\040\212\041\247\045\216\050" +
    "\215\053\217\001\001\000\022\002\220\003\214\026\213" +
    "\040\212\041\246\045\216\050\215\053\217\001\001\000" +
    "\022\002\220\003\214\026\213\040\212\041\245\045\216" +
    "\050\215\053\217\001\001\000\022\002\220\003\214\026" +
    "\213\040\212\041\244\045\216\050\215\053\217\001\001" +
    "\000\022\002\220\003\214\026\213\040\212\041\243\045" +
    "\216\050\215\053\217\001\001\000\004\032\237\001\001" +
    "\000\004\042\224\001\001\000\016\033\200\034\203\035" +
    "\204\036\206\037\210\044\233\001\001\000\004\043\226" +
    "\001\001\000\022\002\220\003\214\026\213\040\212\041" +
    "\232\045\216\050\215\053\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\220\003\214" +
    "\026\213\040\212\041\235\045\216\050\215\053\217\001" +
    "\001\000\004\042\236\001\001\000\002\001\001\000\004" +
    "\117\240\001\001\000\002\001\001\000\022\002\220\003" +
    "\214\026\213\040\212\041\242\045\216\050\215\053\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\257\035\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\263\005\270\015\266" +
    "\016\061\021\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\271\001\001\000\002\001\001\000\012\005" +
    "\273\015\266\016\061\021\066\001\001\000\004\006\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\301\001\001\000\002" +
    "\001\001\000\022\002\166\003\161\026\157\040\156\045" +
    "\164\050\163\053\167\102\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\315\003" +
    "\311\026\310\040\307\045\314\050\313\052\312\053\316" +
    "\001\001\000\022\002\315\003\311\026\310\040\307\045" +
    "\314\050\313\052\335\053\316\001\001\000\022\002\315" +
    "\003\311\026\310\040\307\045\314\050\313\052\334\053" +
    "\316\001\001\000\022\002\315\003\311\026\310\040\307" +
    "\045\314\050\313\052\333\053\316\001\001\000\002\001" +
    "\001\000\022\002\315\003\311\026\310\040\307\045\314" +
    "\050\313\052\327\053\316\001\001\000\022\002\315\003" +
    "\311\026\310\040\307\045\314\050\313\052\326\053\316" +
    "\001\001\000\022\002\315\003\311\026\310\040\307\045" +
    "\314\050\313\052\325\053\316\001\001\000\022\002\315" +
    "\003\311\026\310\040\307\045\314\050\313\052\324\053" +
    "\316\001\001\000\004\032\320\001\001\000\004\122\321" +
    "\001\001\000\002\001\001\000\022\002\315\003\311\026" +
    "\310\040\307\045\314\050\313\052\323\053\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\345\016\061\021\066\055\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\345\016\061\021\066\055\350\001\001\000\002\001\001" +
    "\000\022\002\357\003\354\026\353\040\352\045\356\050" +
    "\355\053\360\054\362\001\001\000\022\002\357\003\354" +
    "\026\353\040\352\045\356\050\355\053\360\054\u0100\001" +
    "\001\000\022\002\357\003\354\026\353\040\352\045\356" +
    "\050\355\053\360\054\377\001\001\000\022\002\357\003" +
    "\354\026\353\040\352\045\356\050\355\053\360\054\376" +
    "\001\001\000\022\002\357\003\354\026\353\040\352\045" +
    "\356\050\355\053\360\054\375\001\001\000\022\002\357" +
    "\003\354\026\353\040\352\045\356\050\355\053\360\054" +
    "\374\001\001\000\022\002\357\003\354\026\353\040\352" +
    "\045\356\050\355\053\360\054\373\001\001\000\022\002" +
    "\357\003\354\026\353\040\352\045\356\050\355\053\360" +
    "\054\372\001\001\000\004\032\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\120\367\001\001\000\002\001\001\000\022\002" +
    "\357\003\354\026\353\040\352\045\356\050\355\053\360" +
    "\054\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\u010e\003\u010b\026\u0108\040\u0109\045\u010d\046\u0126" +
    "\047\u010a\050\u010c\053\u0110\001\001\000\024\002\u010e\003" +
    "\u010b\026\u0108\040\u0109\045\u010d\046\u0125\047\u010a\050\u010c" +
    "\053\u0110\001\001\000\002\001\001\000\024\002\u010e\003" +
    "\u010b\026\u0108\040\u0109\045\u010d\046\u0122\047\u010a\050\u010c" +
    "\053\u0110\001\001\000\024\002\u010e\003\u010b\026\u0108\040" +
    "\u0109\045\u010d\046\u0121\047\u010a\050\u010c\053\u0110\001\001" +
    "\000\024\002\u010e\003\u010b\026\u0108\040\u0109\045\u010d\046" +
    "\u0120\047\u010a\050\u010c\053\u0110\001\001\000\024\002\u010e" +
    "\003\u010b\026\u0108\040\u0109\045\u010d\046\u011f\047\u010a\050" +
    "\u010c\053\u0110\001\001\000\002\001\001\000\024\002\u010e" +
    "\003\u010b\026\u0108\040\u0109\045\u010d\046\u011a\047\u010a\050" +
    "\u010c\053\u0110\001\001\000\002\001\001\000\004\032\u0113" +
    "\001\001\000\004\121\u0114\001\001\000\002\001\001\000" +
    "\024\002\u010e\003\u010b\026\u0108\040\u0109\045\u010d\046\u0116" +
    "\047\u010a\050\u010c\053\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\200\034\203\035\204\036\206\037" +
    "\u011e\001\001\000\014\033\200\034\203\035\204\036\206" +
    "\037\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\u010e\003\u010b\026\u0108\040\u0109\045" +
    "\u010d\046\u0124\047\u010a\050\u010c\053\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u012e\001" +
    "\001\000\002\001\001\000\010\015\u0130\016\061\021\066" +
    "\001\001\000\002\001\001\000\010\015\u0132\016\061\021" +
    "\066\001\001\000\004\024\u0133\001\001\000\002\001\001" +
    "\000\010\015\u0135\016\061\021\066\001\001\000\002\001" +
    "\001\000\010\015\u0137\016\061\021\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u0140\001\001\000" +
    "\004\060\u0142\001\001\000\002\001\001\000\004\064\u0143" +
    "\001\001\000\002\001\001\000\004\061\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u014b\022\u014e\056\u014a\057\u014d\001" +
    "\001\000\012\007\u014b\022\u014e\056\u014a\057\u0170\001\001" +
    "\000\012\007\u014b\022\u014e\056\u014a\057\u016f\001\001\000" +
    "\004\113\057\001\001\000\002\001\001\000\012\007\u014b" +
    "\022\u014e\056\u014a\057\u014f\001\001\000\002\001\001\000" +
    "\024\002\u0156\003\u0153\026\u0152\040\u0151\045\u0155\050\u0154" +
    "\053\u0157\065\u0158\066\u015b\001\001\000\024\002\u0156\003" +
    "\u0153\026\u0152\040\u0151\045\u0155\050\u0154\053\u0157\065\u0158" +
    "\066\u016e\001\001\000\024\002\u0156\003\u0153\026\u0152\040" +
    "\u0151\045\u0155\050\u0154\053\u0157\065\u0158\066\u016d\001\001" +
    "\000\024\002\u0156\003\u0153\026\u0152\040\u0151\045\u0155\050" +
    "\u0154\053\u0157\065\u0158\066\u016c\001\001\000\024\002\u0156" +
    "\003\u0153\026\u0152\040\u0151\045\u0155\050\u0154\053\u0157\065" +
    "\u0158\066\u016b\001\001\000\024\002\u0156\003\u0153\026\u0152" +
    "\040\u0151\045\u0155\050\u0154\053\u0157\065\u0158\066\u016a\001" +
    "\001\000\024\002\u0156\003\u0153\026\u0152\040\u0151\045\u0155" +
    "\050\u0154\053\u0157\065\u0158\066\u0169\001\001\000\024\002" +
    "\u0156\003\u0153\026\u0152\040\u0151\045\u0155\050\u0154\053\u0157" +
    "\065\u0158\066\u0168\001\001\000\024\002\u0156\003\u0153\026" +
    "\u0152\040\u0151\045\u0155\050\u0154\053\u0157\065\u0158\066\u0167" +
    "\001\001\000\010\015\u0163\016\061\021\066\001\001\000" +
    "\004\032\u015f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\124\u0160\001" +
    "\001\000\002\001\001\000\024\002\u0156\003\u0153\026\u0152" +
    "\040\u0151\045\u0155\050\u0154\053\u0157\065\u0158\066\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u0173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\u0176\001\001\000\002\001\001\000\004\061\u0177\001\001" +
    "\000\004\067\u0179\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u017c\001\001\000\002" +
    "\001\001\000\004\061\u017e\001\001\000\004\067\u017f\001" +
    "\001\000\002\001\001\000\004\062\u0181\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\u0186\003\u018d\007\u0187" +
    "\022\054\026\047\030\u0188\040\u0189\045\u018e\050\u018a\053" +
    "\u018b\056\003\071\006\104\u0184\106\u018c\107\u0196\001\001" +
    "\000\040\002\u0186\003\u018d\007\u0187\022\054\026\047\030" +
    "\u0188\040\u0189\045\u018e\050\u018a\053\u018b\056\003\071\006" +
    "\104\u0184\106\u018c\107\u0195\001\001\000\040\002\u0186\003" +
    "\u018d\007\u0187\022\054\026\047\030\u0188\040\u0189\045\u018e" +
    "\050\u018a\053\u018b\056\003\071\006\104\u0184\106\u018c\107" +
    "\u0194\001\001\000\002\001\001\000\040\002\u0186\003\u018d" +
    "\007\u0187\022\054\026\047\030\u0188\040\u0189\045\u018e\050" +
    "\u018a\053\u018b\056\003\071\006\104\u0184\106\u018c\107\u0193" +
    "\001\001\000\040\002\u0186\003\u018d\007\u0187\022\054\026" +
    "\047\030\u0188\040\u0189\045\u018e\050\u018a\053\u018b\056\003" +
    "\071\006\104\u0184\106\u018c\107\u0192\001\001\000\040\002" +
    "\u0186\003\u018d\007\u0187\022\054\026\047\030\u0188\040\u0189" +
    "\045\u018e\050\u018a\053\u018b\056\003\071\006\104\u0184\106" +
    "\u018c\107\u0191\001\001\000\040\002\u0186\003\u018d\007\u0187" +
    "\022\054\026\047\030\u0188\040\u0189\045\u018e\050\u018a\053" +
    "\u018b\056\003\071\006\104\u0184\106\u018c\107\u0190\001\001" +
    "\000\040\002\u0186\003\u018d\007\u0187\022\054\026\047\030" +
    "\u0188\040\u0189\045\u018e\050\u018a\053\u018b\056\003\071\006" +
    "\104\u0184\106\u018c\107\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSemantic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSemantic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSemantic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	action_obj.currentScope = this.scope;
	//scanner.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


	public SymbolTable scope;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSemantic$actions {

 
	public SymbolTable currentScope;
	ArrayList<VariableSymbol> multipleDeclaration = new ArrayList();
	public ArrayList<Quadruple> cuadruplos = new ArrayList(); //Cuadruplos de codigo intermedio
	int numeroTemporal;
	/*Metodos de generacion de cuadruplos con sus diferentes variantes*/
	public void gen(String action, String arg1, String arg2, String res){
		cuadruplos.add(new Quadruple(action, arg1, arg2, res));
	}
	
	public void gen(String action, String arg1, String res){
		cuadruplos.add(new Quadruple(action, arg1, res));
	}
	
	public void gen(String action, String arg1){
		cuadruplos.add(new Quadruple(action, arg1));
	}
	
	public String obtenerTemporal(){
		int temp = numeroTemporal;
		numeroTemporal++;
		return "t" + temp;	
	}

  private final AnalizadorSemantic parser;

  /** Constructor */
  CUP$AnalizadorSemantic$actions(AnalizadorSemantic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSemantic$do_action(
    int                        CUP$AnalizadorSemantic$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSemantic$parser,
    java.util.Stack            CUP$AnalizadorSemantic$stack,
    int                        CUP$AnalizadorSemantic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSemantic$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSemantic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // moreVariable ::= COMATOK variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreVariable",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // variables ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // variables ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // variables ::= arithmetical moreVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // variables ::= BOOLEANVALUE moreVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // llamadoMetodo ::= PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("llamadoMetodo",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // llamadoMetodo ::= PARIZQ variables PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("llamadoMetodo",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // typeProcedure ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // typeProcedure ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // typeProcedure ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // contentProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // contentProcedure ::= loop contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // contentProcedure ::= while contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // contentProcedure ::= if contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // contentProcedure ::= arrayAsign contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // contentProcedure ::= for contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // contentProcedure ::= get contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // contentProcedure ::= put contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // contentProcedure ::= IDENTIFIER asign NT$11 ENDLINE contentProcedure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$11",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // innerProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // innerProcedure ::= function innerProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // innerProcedure ::= procedure innerProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // moreProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreProcedure",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // moreProcedure ::= COMATOK IDENTIFIER moreProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreProcedure",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // wichParams ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // wichParams ::= INOUTTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // wichParams ::= OUTTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // wichParams ::= INTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // params ::= array 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("params",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // params ::= IDENTIFIER moreProcedure ANOTATION wichParams typeProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("params",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // moreParamsProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsProcedure",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // moreParamsProcedure ::= ENDLINE params moreParamsProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsProcedure",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // innerParams ::= params moreParamsProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerParams",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // paramsProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // paramsProcedure ::= innerParams 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // paramsProcedure ::= PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // paramsProcedure ::= PARIZQ innerParams PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaracionesProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaracionesProcedure ::= function declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaracionesProcedure ::= procedure declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaracionesProcedure ::= arrayStart declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracionesProcedure ::= declaracion declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // procedure ::= PROCEDURETOK IDENTIFIER NT$10 paramsProcedure ISTOK declaracionesProcedure BEGINTOK contentProcedure ENDTOK IDENTIFIER ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).value;
		
	if(currentScope.parent != null){
		currentScope = currentScope.parent;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("procedure",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	if(!currentScope.id.equals(((Token)i).getIdentificador())){
		currentScope = currentScope.findChild(((Token)i).getIdentificador());
	}else{
		System.out.println("Iniciando, se imprimira arbol (Semantic): ");
		currentScope.printTree(currentScope, 0);
	}	

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$10",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // procedureInit ::= procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("procedureInit",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contentFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contentFunction ::= returnVal contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contentFunction ::= while contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contentFunction ::= if contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contentFunction ::= arrayAsign contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contentFunction ::= loop contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // contentFunction ::= for contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // contentFunction ::= get contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // contentFunction ::= put contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // contentFunction ::= IDENTIFIER asign NT$9 ENDLINE contentFunction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$9",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // returnVal ::= RETURNTOK arithmetical ENDLINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnVal",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // returnVal ::= RETURNTOK BOOLEANVALUE ENDLINE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnVal",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // returnExpect ::= RETURNTOK typeFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnExpect",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // repeatFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("repeatFunction",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // repeatFunction ::= ENDLINE paramsFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("repeatFunction",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // moreFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreFunction",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // moreFunction ::= COMATOK IDENTIFIER moreFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreFunction",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // typeParamFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeParamFunction",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // typeParamFunction ::= INTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeParamFunction",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // typeFunction ::= FLOATTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new FloatType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // typeFunction ::= BOOLEANTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // typeFunction ::= INTEGERTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new IntegerType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // moreParamsFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsFunction",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // moreParamsFunction ::= ENDLINE IDENTIFIER moreFunction ANOTATION typeFunction moreParamsFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsFunction",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // paramsFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsFunction",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // paramsFunction ::= PARIZQ IDENTIFIER moreFunction ANOTATION typeParamFunction typeFunction moreParamsFunction PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsFunction",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // declaracionesFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declaracionesFunction ::= function declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declaracionesFunction ::= array declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declaracionesFunction ::= declaracion declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function ::= FUNCIONTOK IDENTIFIER NT$8 paramsFunction returnExpect ISTOK declaracionesFunction BEGINTOK contentFunction ENDTOK IDENTIFIER ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).value;
		
	currentScope = currentScope.parent;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("function",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	currentScope = currentScope.findChild(((Token)i).getIdentificador());

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$8",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // contentWhile ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // contentWhile ::= loop contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // contentWhile ::= while contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // contentWhile ::= if contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // contentWhile ::= arrayAsign contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // contentWhile ::= for contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // contentWhile ::= get contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // contentWhile ::= put contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // contentWhile ::= IDENTIFIER asign NT$7 ENDLINE contentWhile 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$7",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // conditionWhile ::= booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("conditionWhile",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while ::= WHILETOK conditionWhile LOOPTOK contentWhile ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignacion ::= arithmetical 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)ar;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignacion ::= BOOLEANVALUE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // moreArrayAsign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreArrayAsign",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // moreArrayAsign ::= COMATOK arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreArrayAsign",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asign",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asign ::= ASIGNATION asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)a;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asign",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arrayAsign ::= IDENTIFIER PARIZQ arithmetical moreArrayAsign PARDER asign ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayAsign",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // typeArray ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // typeArray ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // typeArray ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // twoD ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("twoD",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // twoD ::= COMATOK arithmetical RANGETOK arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("twoD",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // range ::= PARIZQ arithmetical RANGETOK arithmetical twoD PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("range",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array ::= TYPETOK IDENTIFIER ISTOK ARRAYTOK range OFTOK typeArray ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arrayStart ::= arrayAsign 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayStart",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arrayStart ::= array 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayStart",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exit ::= EXITTOK error booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("exit",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exit ::= EXITTOK WHENTOK booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("exit",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // contentLoop ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // contentLoop ::= loop contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // contentLoop ::= exit ENDLINE contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // contentLoop ::= while contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // contentLoop ::= if contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // contentLoop ::= arrayAsign contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // contentLoop ::= for contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // contentLoop ::= get contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // contentLoop ::= put contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // contentLoop ::= IDENTIFIER asign NT$6 ENDLINE contentLoop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$6",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // loop ::= LOOPTOK contentLoop ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("loop",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contentFor ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contentFor ::= loop contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // contentFor ::= while contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // contentFor ::= if contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contentFor ::= arrayAsign contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // contentFor ::= for contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // contentFor ::= get contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // contentFor ::= put contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // contentFor ::= IDENTIFIER asign NT$5 ENDLINE contentFor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$5",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rangeParams ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("rangeParams",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for ::= FORTOK IDENTIFIER INTOK rangeParams RANGETOK rangeParams LOOPTOK contentFor ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditionIf ::= booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("conditionIf",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("else",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else ::= ELSETOK contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("else",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elsif ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("elsif",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elsif ::= ELSIFTOK conditionIf THENTOK contentIf elsif 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("elsif",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // contentIf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contentIf ::= loop contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contentIf ::= while contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contentIf ::= if contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contentIf ::= arrayAsign contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contentIf ::= for contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contentIf ::= get contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contentIf ::= put contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contentIf ::= IDENTIFIER asign NT$4 ENDLINE contentIf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$4",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if ::= IFTOK conditionIf THENTOK contentIf elsif else ENDTOK IFTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifInit ::= if 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("ifInit",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operando ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operando ::= NUMBER POINTTOK NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operando ::= NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operando ::= IDENTIFIER llamadoMetodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operando ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion ::= OPRELACIONAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion ::= OPBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // moreBoolean ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreBoolean",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // moreBoolean ::= operacion expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreBoolean",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= operando moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= PARIZQ expresion PARDER moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // booleanInit ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("booleanInit",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // f ::= PARIZQ arithmetical NT$3 PARDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$3 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	RESULT = (ParserResult)ar;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$3",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // f ::= NUMBER POINTTOK NUMBER 
            {
              Object RESULT =null;
		 RESULT = new ParserResult(new FloatType()); 
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // f ::= NUMBER 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new IntegerType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // f ::= IDENTIFIER NT$2 llamadoMetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	RESULT = var.type;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$2",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // f ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // d ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("d",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // d ::= OPMULT f d 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("d",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // b ::= OPSUMA a b 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // a ::= f d 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("a",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetical ::= a b 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arithmetical",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // morePutGet ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("morePutGet",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // morePutGet ::= COMATOK valuePutGet morePutGet 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("morePutGet",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valuePutGet ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valuePutGet ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valuePutGet ::= LETTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contentPutGet ::= valuePutGet morePutGet 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentPutGet",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // get ::= GETTOK PARIZQ IDENTIFIER PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("get",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // put ::= PUTTOK PARIZQ PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("put",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // put ::= PUTTOK PARIZQ contentPutGet PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("put",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("assign",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign ::= ASIGNATION valueDeclaracion 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)vd;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("assign",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valueDeclaracion ::= arithmetical 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = ar;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valueDeclaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valueDeclaracion ::= BOOLEANVALUE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valueDeclaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typeDeclaracion ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typeDeclaracion ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typeDeclaracion ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declare",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declare ::= ANOTATION typeDeclaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declare",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // moreDeclaracion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreDeclaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // moreDeclaracion ::= COMATOK IDENTIFIER NT$1 moreDeclaracion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreDeclaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$1",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= IDENTIFIER NT$0 moreDeclaracion declare assign ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		
	ParserResult resultado = (ParserResult)a;
	for(VariableSymbol var : multipleDeclaration){
		if(var.type.equals(resultado.type)){
			System.out.println("La variable " + var.id + " se puede asignar, los tipos concuerdan");
		}else{
			System.out.println("La variable " + var.id + "no se puede asignar, los tipos NO concuerdan");
		}
	}
	multipleDeclaration = new ArrayList();

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	System.out.println("Current Scope: " + currentScope.id );
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$0",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programRecovery ::= arrayStart programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programRecovery ::= programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // programRecovery ::= loop programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // programRecovery ::= while programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programRecovery ::= for programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programRecovery ::= ifInit programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programRecovery ::= get programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programRecovery ::= put programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programRecovery ::= declaracion programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programInit ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programInit ::= error programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programInit ::= function programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programInit ::= procedure programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programInit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSemantic$parser.done_parsing();
          return CUP$AnalizadorSemantic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

