package su_compiler;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 11 04:04:16 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import Ada95_Semantic.*;
import Ada95_Intermediate.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 11 04:04:16 CST 2012
  */
public class AnalizadorSemantic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSemantic() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSemantic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSemantic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\002\004\000\002\104\004\000\002\104" +
    "\004\000\002\104\004\000\002\104\002\000\002\107\004" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\107\004\000\002\107\004\000\002\107\004\000\002" +
    "\107\003\000\002\107\004\000\002\113\002\000\002\007" +
    "\010\000\002\114\002\000\002\010\006\000\002\010\002" +
    "\000\002\011\004\000\002\011\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\012\004\000\002\012\002\000\002\002" +
    "\007\000\002\002\006\000\002\003\007\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\006\002\000\002\015\004\000\002" +
    "\016\004\000\002\017\005\000\002\017\002\000\002\020" +
    "\005\000\002\020\002\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\005\000\002\115\002\000" +
    "\002\021\006\000\002\037\003\000\002\033\006\000\002" +
    "\033\004\000\002\033\003\000\002\034\004\000\002\034" +
    "\002\000\002\035\003\000\002\035\003\000\002\036\003" +
    "\000\002\036\004\000\002\036\003\000\002\036\005\000" +
    "\002\036\003\000\002\106\003\000\002\040\013\000\002" +
    "\116\002\000\002\041\007\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\002\000" +
    "\002\042\007\000\002\042\002\000\002\043\004\000\002" +
    "\043\002\000\002\044\003\000\002\053\015\000\002\055" +
    "\003\000\002\117\002\000\002\054\007\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\054\002\000\002\045\007\000\002\120\002\000\002\046" +
    "\007\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\005\000\002\046\004\000\002\046\002\000\002" +
    "\047\005\000\002\030\003\000\002\030\003\000\002\022" +
    "\012\000\002\023\010\000\002\024\006\000\002\024\002" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\011\000\002\032\004\000\002\032\002\000\002" +
    "\031\004\000\002\031\002\000\002\027\003\000\002\027" +
    "\003\000\002\050\011\000\002\051\003\000\002\121\002" +
    "\000\002\052\007\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\002\000\002\122" +
    "\002\000\002\056\016\000\002\057\004\000\002\057\004" +
    "\000\002\057\004\000\002\057\002\000\002\060\012\000" +
    "\002\060\002\000\002\067\010\000\002\067\002\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\070" +
    "\003\000\002\070\002\000\002\062\005\000\002\062\002" +
    "\000\002\063\004\000\002\063\002\000\002\064\004\000" +
    "\002\065\005\000\002\065\005\000\002\123\002\000\002" +
    "\066\007\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\066\004" +
    "\000\002\066\004\000\002\066\004\000\002\066\002\000" +
    "\002\105\003\000\002\124\002\000\002\071\015\000\002" +
    "\100\004\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\002\000\002\072\005\000\002\072\004" +
    "\000\002\072\003\000\002\072\002\000\002\073\004\000" +
    "\002\103\005\000\002\103\002\000\002\074\007\000\002" +
    "\074\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\002\000\002\076\005\000\002\076\002" +
    "\000\002\101\004\000\002\101\004\000\002\101\002\000" +
    "\002\125\002\000\002\102\007\000\002\102\004\000\002" +
    "\102\004\000\002\102\004\000\002\102\004\000\002\102" +
    "\004\000\002\102\004\000\002\102\004\000\002\102\002" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\110\005\000\002\110\004\000\002\111\004\000\002" +
    "\111\004\000\002\111\003\000\002\111\003\000\002\112" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\012\002\ufffd\003\005\023\010\031\011\001" +
    "\002\000\012\002\ufffd\003\005\023\010\031\011\001\002" +
    "\000\032\002\ufffd\003\005\004\217\010\206\023\010\031" +
    "\011\032\015\036\215\037\204\040\211\042\220\044\140" +
    "\001\002\000\004\002\u0181\001\002\000\012\002\ufffd\003" +
    "\005\023\010\031\011\001\002\000\004\044\u013d\001\002" +
    "\000\004\044\012\001\002\000\012\005\uff5b\026\uff5b\032" +
    "\uff5b\044\uff5b\001\002\000\012\005\016\026\uff51\032\015" +
    "\044\017\001\002\000\004\026\130\001\002\000\004\044" +
    "\047\001\002\000\010\006\044\032\015\044\017\001\002" +
    "\000\006\011\027\015\uff46\001\002\000\004\026\uff52\001" +
    "\002\000\010\006\uff4e\007\024\026\uff4e\001\002\000\010" +
    "\006\uff4c\007\uff4c\026\uff4c\001\002\000\006\006\uff50\026" +
    "\uff50\001\002\000\006\032\015\044\017\001\002\000\010" +
    "\006\uff4e\007\024\026\uff4e\001\002\000\006\006\uff4f\026" +
    "\uff4f\001\002\000\004\044\042\001\002\000\004\015\031" +
    "\001\002\000\016\020\034\021\032\022\035\033\uff48\034" +
    "\uff48\035\uff48\001\002\000\010\033\uff4a\034\uff4a\035\uff4a" +
    "\001\002\000\010\033\037\034\041\035\040\001\002\000" +
    "\010\033\uff4b\034\uff4b\035\uff4b\001\002\000\010\033\uff49" +
    "\034\uff49\035\uff49\001\002\000\010\006\uff4d\007\uff4d\026" +
    "\uff4d\001\002\000\010\006\uff38\007\uff38\026\uff38\001\002" +
    "\000\010\006\uff36\007\uff36\026\uff36\001\002\000\010\006" +
    "\uff37\007\uff37\026\uff37\001\002\000\006\011\027\015\uff46" +
    "\001\002\000\004\015\uff47\001\002\000\004\026\uff53\001" +
    "\002\000\004\006\046\001\002\000\004\026\uff54\001\002" +
    "\000\004\026\050\001\002\000\004\016\051\001\002\000" +
    "\004\005\053\001\002\000\004\025\122\001\002\000\010" +
    "\005\056\044\060\056\057\001\002\000\016\006\uffd9\007" +
    "\uffd9\011\uffd9\037\uffd9\041\uffd9\047\117\001\002\000\004" +
    "\041\106\001\002\000\010\005\056\044\060\056\057\001" +
    "\002\000\022\006\uffd4\007\uffd4\011\uffd4\013\101\037\uffd4" +
    "\041\uffd4\047\uffd4\050\uffd4\001\002\000\022\005\067\006" +
    "\uffd6\007\uffd6\011\uffd6\037\uffd6\041\uffd6\047\uffd6\050\uffd6" +
    "\001\002\000\020\006\uffd7\007\uffd7\011\uffd7\037\uffd7\041" +
    "\uffd7\047\uffd7\050\063\001\002\000\016\006\uffdb\007\uffdb" +
    "\011\uffdb\037\uffdb\041\uffdb\047\uffdb\001\002\000\010\005" +
    "\056\044\060\056\057\001\002\000\020\006\uffd7\007\uffd7" +
    "\011\uffd7\037\uffd7\041\uffd7\047\uffd7\050\063\001\002\000" +
    "\016\006\uffd8\007\uffd8\011\uffd8\037\uffd8\041\uffd8\047\uffd8" +
    "\001\002\000\020\006\uffd5\007\uffd5\011\uffd5\037\uffd5\041" +
    "\uffd5\047\uffd5\050\uffd5\001\002\000\014\005\056\006\072" +
    "\012\070\044\060\056\057\001\002\000\006\006\uff30\011" +
    "\075\001\002\000\006\006\uff31\011\075\001\002\000\026" +
    "\006\uff34\007\uff34\011\uff34\037\uff34\041\uff34\043\uff34\047" +
    "\uff34\050\uff34\051\uff34\052\uff34\001\002\000\004\006\074" +
    "\001\002\000\026\006\uff35\007\uff35\011\uff35\037\uff35\041" +
    "\uff35\043\uff35\047\uff35\050\uff35\051\uff35\052\uff35\001\002" +
    "\000\012\005\056\012\070\044\060\056\057\001\002\000" +
    "\004\006\uff32\001\002\000\004\006\uff2f\001\002\000\004" +
    "\006\uff33\001\002\000\004\056\102\001\002\000\020\006" +
    "\uffd3\007\uffd3\011\uffd3\037\uffd3\041\uffd3\047\uffd3\050\uffd3" +
    "\001\002\000\004\006\uffd2\001\002\000\004\006\105\001" +
    "\002\000\020\006\uffd1\007\uffd1\011\uffd1\037\uffd1\041\uffd1" +
    "\047\uffd1\050\uffd1\001\002\000\010\005\056\044\060\056" +
    "\057\001\002\000\006\006\uff94\011\111\001\002\000\004" +
    "\006\115\001\002\000\010\005\056\044\060\056\057\001" +
    "\002\000\004\041\113\001\002\000\010\005\056\044\060" +
    "\056\057\001\002\000\004\006\uff95\001\002\000\004\025" +
    "\uff96\001\002\000\014\006\uffdc\007\uffdc\011\uffdc\037\uffdc" +
    "\041\uffdc\001\002\000\010\005\056\044\060\056\057\001" +
    "\002\000\016\006\uffd9\007\uffd9\011\uffd9\037\uffd9\041\uffd9" +
    "\047\117\001\002\000\014\006\uffda\007\uffda\011\uffda\037" +
    "\uffda\041\uffda\001\002\000\010\033\123\034\125\035\124" +
    "\001\002\000\004\007\uff92\001\002\000\004\007\uff91\001" +
    "\002\000\004\007\uff93\001\002\000\004\007\127\001\002" +
    "\000\042\002\uff97\003\uff97\004\uff97\006\uff97\007\uff97\010" +
    "\uff97\023\uff97\026\uff97\027\uff97\031\uff97\032\uff97\036\uff97" +
    "\037\uff97\040\uff97\042\uff97\044\uff97\001\002\000\014\023" +
    "\010\027\uff55\031\011\032\015\044\140\001\002\000\034" +
    "\002\uff98\003\uff98\004\uff98\010\uff98\023\uff98\027\uff98\031" +
    "\uff98\032\uff98\036\uff98\037\uff98\040\uff98\042\uff98\044\uff98" +
    "\001\002\000\014\023\010\027\uff55\031\011\032\015\044" +
    "\140\001\002\000\014\023\010\027\uff55\031\011\032\015" +
    "\044\140\001\002\000\004\027\201\001\002\000\014\023" +
    "\010\027\uff55\031\011\032\015\044\140\001\002\000\034" +
    "\002\uff99\003\uff99\004\uff99\010\uff99\023\uff99\027\uff99\031" +
    "\uff99\032\uff99\036\uff99\037\uff99\040\uff99\042\uff99\044\uff99" +
    "\001\002\000\014\023\010\027\uff55\031\011\032\015\044" +
    "\140\001\002\000\014\005\142\007\ufff3\011\ufff3\014\ufff3" +
    "\015\ufff3\001\002\000\012\007\uffef\011\156\014\uffef\015" +
    "\uffef\001\002\000\010\005\056\044\060\056\057\001\002" +
    "\000\006\006\uff8c\011\144\001\002\000\010\005\056\044" +
    "\060\056\057\001\002\000\004\006\146\001\002\000\006" +
    "\007\uff8e\014\150\001\002\000\004\007\154\001\002\000" +
    "\012\005\056\012\152\044\060\056\057\001\002\000\004" +
    "\007\uff8a\001\002\000\004\007\uff8b\001\002\000\004\007" +
    "\uff8f\001\002\000\046\002\uff90\003\uff90\004\uff90\010\uff90" +
    "\023\uff90\024\uff90\027\uff90\030\uff90\031\uff90\032\uff90\036" +
    "\uff90\037\uff90\040\uff90\042\uff90\044\uff90\045\uff90\046\uff90" +
    "\053\uff90\001\002\000\004\006\uff8d\001\002\000\004\044" +
    "\174\001\002\000\010\007\uffed\014\uffed\015\160\001\002" +
    "\000\010\033\171\034\173\035\172\001\002\000\006\007" +
    "\uffe6\014\163\001\002\000\004\007\167\001\002\000\012" +
    "\005\056\012\166\044\060\056\057\001\002\000\004\007" +
    "\uffe7\001\002\000\004\007\uffe8\001\002\000\004\007\uffe9" +
    "\001\002\000\034\002\ufff2\003\ufff2\004\ufff2\010\ufff2\023" +
    "\ufff2\027\ufff2\031\ufff2\032\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\042\ufff2\044\ufff2\001\002\000\006\007\uffee\014\uffee\001" +
    "\002\000\006\007\uffec\014\uffec\001\002\000\006\007\uffea" +
    "\014\uffea\001\002\000\006\007\uffeb\014\uffeb\001\002\000" +
    "\012\007\ufff1\011\ufff1\014\ufff1\015\ufff1\001\002\000\012" +
    "\007\uffef\011\156\014\uffef\015\uffef\001\002\000\010\007" +
    "\ufff0\014\ufff0\015\ufff0\001\002\000\004\027\uff59\001\002" +
    "\000\004\027\uff56\001\002\000\022\004\217\010\206\030" +
    "\uff39\036\215\037\204\040\211\042\220\044\216\001\002" +
    "\000\022\004\217\010\206\030\uff39\036\215\037\204\040" +
    "\211\042\220\044\216\001\002\000\022\004\217\010\206" +
    "\030\uff39\036\215\037\204\040\211\042\220\044\216\001" +
    "\002\000\024\004\217\010\206\030\uff9b\036\215\037\204" +
    "\040\211\042\220\044\u0126\053\u0124\001\002\000\022\004" +
    "\217\010\206\030\uff39\036\215\037\204\040\211\042\220" +
    "\044\216\001\002\000\004\005\u0117\001\002\000\022\004" +
    "\217\010\206\030\uff39\036\215\037\204\040\211\042\220" +
    "\044\216\001\002\000\022\004\217\010\206\030\uff39\036" +
    "\215\037\204\040\211\042\220\044\216\001\002\000\004" +
    "\044\367\001\002\000\022\004\217\010\206\030\uff39\036" +
    "\215\037\204\040\211\042\220\044\216\001\002\000\022" +
    "\004\217\010\206\030\uff39\036\215\037\204\040\211\042" +
    "\220\044\216\001\002\000\004\030\362\001\002\000\020" +
    "\005\225\012\222\037\uffcb\044\231\051\226\052\223\056" +
    "\221\001\002\000\010\005\142\007\uff8e\014\150\001\002" +
    "\000\004\005\306\001\002\000\020\005\225\012\222\043" +
    "\uffcb\044\231\051\226\052\223\056\221\001\002\000\020" +
    "\006\uffc6\007\uffc6\013\304\037\uffc6\043\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\016\006\uffc4\007\uffc4\037\uffc4\043\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\026\005\uffca\006\uffca\007" +
    "\uffca\012\uffca\037\uffca\043\uffca\044\uffca\051\uffca\052\uffca" +
    "\056\uffca\001\002\000\010\007\uffd0\037\uffd0\043\uffd0\001" +
    "\002\000\020\005\225\006\uffcb\012\222\044\231\051\226" +
    "\052\223\056\221\001\002\000\026\005\uffc9\006\uffc9\007" +
    "\uffc9\012\uffc9\037\uffc9\043\uffc9\044\uffc9\051\uffc9\052\uffc9" +
    "\056\uffc9\001\002\000\012\006\uffcd\007\uffcd\037\uffcd\043" +
    "\uffcd\001\002\000\026\005\225\006\uffcb\007\uffcb\012\222" +
    "\037\uffcb\043\uffcb\044\231\051\226\052\223\056\221\001" +
    "\002\000\020\005\067\006\uffc8\007\uffc8\037\uffc8\043\uffc8" +
    "\051\uffc8\052\uffc8\001\002\000\016\006\uffcb\007\uffcb\037" +
    "\uffcb\043\uffcb\051\226\052\223\001\002\000\004\043\235" +
    "\001\002\000\004\043\uffb3\001\002\000\026\004\217\010" +
    "\206\030\uffb8\036\215\037\204\040\211\042\220\044\245" +
    "\045\uffb8\046\uffb8\001\002\000\026\004\217\010\206\030" +
    "\uffb8\036\215\037\204\040\211\042\220\044\245\045\uffb8" +
    "\046\uffb8\001\002\000\026\004\217\010\206\030\uffb8\036" +
    "\215\037\204\040\211\042\220\044\245\045\uffb8\046\uffb8" +
    "\001\002\000\026\004\217\010\206\030\uffb8\036\215\037" +
    "\204\040\211\042\220\044\245\045\uffb8\046\uffb8\001\002" +
    "\000\026\004\217\010\206\030\uffb8\036\215\037\204\040" +
    "\211\042\220\044\245\045\uffb8\046\uffb8\001\002\000\026" +
    "\004\217\010\206\030\uffb8\036\215\037\204\040\211\042" +
    "\220\044\245\045\uffb8\046\uffb8\001\002\000\026\004\217" +
    "\010\206\030\uffb8\036\215\037\204\040\211\042\220\044" +
    "\245\045\uffb8\046\uffb8\001\002\000\026\004\217\010\206" +
    "\030\uffb8\036\215\037\204\040\211\042\220\044\245\045" +
    "\uffb8\046\uffb8\001\002\000\010\005\142\007\uff8e\014\150" +
    "\001\002\000\010\030\uffb6\045\247\046\uffb6\001\002\000" +
    "\020\005\225\012\222\043\uffcb\044\231\051\226\052\223" +
    "\056\221\001\002\000\006\030\uffb4\046\251\001\002\000" +
    "\022\004\217\010\206\030\uffb8\036\215\037\204\040\211" +
    "\042\220\044\245\001\002\000\004\030\253\001\002\000" +
    "\004\042\254\001\002\000\004\007\255\001\002\000\044" +
    "\002\uffc2\003\uffc2\004\uffc2\010\uffc2\023\uffc2\024\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\053\uffc2\001\002\000\004\030" +
    "\uffb5\001\002\000\004\043\260\001\002\000\026\004\217" +
    "\010\206\030\uffb8\036\215\037\204\040\211\042\220\044" +
    "\245\045\uffb8\046\uffb8\001\002\000\010\030\uffb6\045\247" +
    "\046\uffb6\001\002\000\006\030\uffb7\046\uffb7\001\002\000" +
    "\004\007\uffc1\001\002\000\004\007\265\001\002\000\026" +
    "\004\217\010\206\030\uffb8\036\215\037\204\040\211\042" +
    "\220\044\245\045\uffb8\046\uffb8\001\002\000\010\030\uffc0" +
    "\045\uffc0\046\uffc0\001\002\000\010\030\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\010\030\uffbf\045\uffbf\046\uffbf\001\002" +
    "\000\010\030\uffb9\045\uffb9\046\uffb9\001\002\000\010\030" +
    "\uffba\045\uffba\046\uffba\001\002\000\010\030\uffbe\045\uffbe" +
    "\046\uffbe\001\002\000\010\030\uffbb\045\uffbb\046\uffbb\001" +
    "\002\000\010\030\uffbc\045\uffbc\046\uffbc\001\002\000\012" +
    "\006\uffce\007\uffce\037\uffce\043\uffce\001\002\000\016\006" +
    "\uffc7\007\uffc7\037\uffc7\043\uffc7\051\uffc7\052\uffc7\001\002" +
    "\000\012\006\uffcc\007\uffcc\037\uffcc\043\uffcc\001\002\000" +
    "\004\006\302\001\002\000\016\006\uffcb\007\uffcb\037\uffcb" +
    "\043\uffcb\051\226\052\223\001\002\000\012\006\uffcf\007" +
    "\uffcf\037\uffcf\043\uffcf\001\002\000\004\056\305\001\002" +
    "\000\016\006\uffc5\007\uffc5\037\uffc5\043\uffc5\051\uffc5\052" +
    "\uffc5\001\002\000\016\005\056\006\313\012\311\017\310" +
    "\044\060\056\057\001\002\000\004\006\322\001\002\000" +
    "\006\006\uffe1\011\uffe1\001\002\000\006\006\uffe0\011\uffe0" +
    "\001\002\000\006\006\uffdf\011\uffdf\001\002\000\004\007" +
    "\321\001\002\000\006\006\uffdd\011\316\001\002\000\004" +
    "\006\uffe2\001\002\000\014\005\056\012\311\017\310\044" +
    "\060\056\057\001\002\000\006\006\uffdd\011\316\001\002" +
    "\000\004\006\uffde\001\002\000\044\002\uffe4\003\uffe4\004" +
    "\uffe4\010\uffe4\023\uffe4\024\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\053\uffe4\001\002\000\004\007\323\001\002\000\044" +
    "\002\uffe5\003\uffe5\004\uffe5\010\uffe5\023\uffe5\024\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\053\uffe5\001\002\000\004\007" +
    "\uff42\001\002\000\004\007\326\001\002\000\022\004\217" +
    "\010\206\030\uff39\036\215\037\204\040\211\042\220\044" +
    "\216\001\002\000\004\030\uff41\001\002\000\004\037\332" +
    "\001\002\000\004\037\uff88\001\002\000\022\004\217\010" +
    "\206\030\uff7e\036\215\037\204\040\211\042\220\044\343" +
    "\001\002\000\022\004\217\010\206\030\uff7e\036\215\037" +
    "\204\040\211\042\220\044\343\001\002\000\022\004\217" +
    "\010\206\030\uff7e\036\215\037\204\040\211\042\220\044" +
    "\343\001\002\000\022\004\217\010\206\030\uff7e\036\215" +
    "\037\204\040\211\042\220\044\343\001\002\000\004\030" +
    "\354\001\002\000\022\004\217\010\206\030\uff7e\036\215" +
    "\037\204\040\211\042\220\044\343\001\002\000\022\004" +
    "\217\010\206\030\uff7e\036\215\037\204\040\211\042\220" +
    "\044\343\001\002\000\022\004\217\010\206\030\uff7e\036" +
    "\215\037\204\040\211\042\220\044\343\001\002\000\022" +
    "\004\217\010\206\030\uff7e\036\215\037\204\040\211\042" +
    "\220\044\343\001\002\000\010\005\142\007\uff8e\014\150" +
    "\001\002\000\004\007\uff87\001\002\000\004\007\346\001" +
    "\002\000\022\004\217\010\206\030\uff7e\036\215\037\204" +
    "\040\211\042\220\044\343\001\002\000\004\030\uff86\001" +
    "\002\000\004\030\uff85\001\002\000\004\030\uff83\001\002" +
    "\000\004\030\uff7f\001\002\000\004\030\uff80\001\002\000" +
    "\004\037\355\001\002\000\004\007\356\001\002\000\044" +
    "\002\uff89\003\uff89\004\uff89\010\uff89\023\uff89\024\uff89\030" +
    "\uff89\031\uff89\032\uff89\036\uff89\037\uff89\040\uff89\042\uff89" +
    "\044\uff89\045\uff89\046\uff89\053\uff89\001\002\000\004\030" +
    "\uff84\001\002\000\004\030\uff82\001\002\000\004\030\uff81" +
    "\001\002\000\004\044\363\001\002\000\004\007\364\001" +
    "\002\000\020\002\uff5a\003\uff5a\023\uff5a\027\uff5a\031\uff5a" +
    "\032\uff5a\044\uff5a\001\002\000\004\030\uff40\001\002\000" +
    "\004\030\uff3e\001\002\000\004\020\370\001\002\000\010" +
    "\005\056\044\060\056\057\001\002\000\006\037\uffb1\041" +
    "\uffb1\001\002\000\004\041\373\001\002\000\010\005\056" +
    "\044\060\056\057\001\002\000\004\037\375\001\002\000" +
    "\022\004\217\010\206\030\uffa7\036\215\037\204\040\211" +
    "\042\220\044\u0106\001\002\000\022\004\217\010\206\030" +
    "\uffa7\036\215\037\204\040\211\042\220\044\u0106\001\002" +
    "\000\022\004\217\010\206\030\uffa7\036\215\037\204\040" +
    "\211\042\220\044\u0106\001\002\000\022\004\217\010\206" +
    "\030\uffa7\036\215\037\204\040\211\042\220\044\u0106\001" +
    "\002\000\022\004\217\010\206\030\uffa7\036\215\037\204" +
    "\040\211\042\220\044\u0106\001\002\000\022\004\217\010" +
    "\206\030\uffa7\036\215\037\204\040\211\042\220\044\u0106" +
    "\001\002\000\022\004\217\010\206\030\uffa7\036\215\037" +
    "\204\040\211\042\220\044\u0106\001\002\000\022\004\217" +
    "\010\206\030\uffa7\036\215\037\204\040\211\042\220\044" +
    "\u0106\001\002\000\004\030\u010b\001\002\000\010\005\142" +
    "\007\uff8e\014\150\001\002\000\004\007\uffb0\001\002\000" +
    "\004\007\u0109\001\002\000\022\004\217\010\206\030\uffa7" +
    "\036\215\037\204\040\211\042\220\044\u0106\001\002\000" +
    "\004\030\uffaf\001\002\000\004\037\u010c\001\002\000\004" +
    "\007\u010d\001\002\000\044\002\uffb2\003\uffb2\004\uffb2\010" +
    "\uffb2\023\uffb2\024\uffb2\030\uffb2\031\uffb2\032\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2\053" +
    "\uffb2\001\002\000\004\030\uffac\001\002\000\004\030\uffae" +
    "\001\002\000\004\030\uffa8\001\002\000\004\030\uffa9\001" +
    "\002\000\004\030\uffad\001\002\000\004\030\uffaa\001\002" +
    "\000\004\030\uffab\001\002\000\004\030\uff3a\001\002\000" +
    "\004\030\uff3b\001\002\000\004\044\u0118\001\002\000\004" +
    "\006\u0119\001\002\000\004\007\u011a\001\002\000\044\002" +
    "\uffe3\003\uffe3\004\uffe3\010\uffe3\023\uffe3\024\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\053\uffe3\001\002\000\004\030\uff3f" +
    "\001\002\000\024\004\217\010\206\030\uff9b\036\215\037" +
    "\204\040\211\042\220\044\u0126\053\u0124\001\002\000\024" +
    "\004\217\010\206\030\uff9b\036\215\037\204\040\211\042" +
    "\220\044\u0126\053\u0124\001\002\000\004\007\u0135\001\002" +
    "\000\024\004\217\010\206\030\uff9b\036\215\037\204\040" +
    "\211\042\220\044\u0126\053\u0124\001\002\000\024\004\217" +
    "\010\206\030\uff9b\036\215\037\204\040\211\042\220\044" +
    "\u0126\053\u0124\001\002\000\024\004\217\010\206\030\uff9b" +
    "\036\215\037\204\040\211\042\220\044\u0126\053\u0124\001" +
    "\002\000\024\004\217\010\206\030\uff9b\036\215\037\204" +
    "\040\211\042\220\044\u0126\053\u0124\001\002\000\024\004" +
    "\217\010\206\030\uff9b\036\215\037\204\040\211\042\220" +
    "\044\u0126\053\u0124\001\002\000\004\054\u012e\001\002\000" +
    "\004\030\u012b\001\002\000\010\005\142\007\uff8e\014\150" +
    "\001\002\000\004\007\uffa5\001\002\000\004\007\u0129\001" +
    "\002\000\024\004\217\010\206\030\uff9b\036\215\037\204" +
    "\040\211\042\220\044\u0126\053\u0124\001\002\000\004\030" +
    "\uffa4\001\002\000\004\037\u012c\001\002\000\004\007\u012d" +
    "\001\002\000\044\002\uffa6\003\uffa6\004\uffa6\010\uffa6\023" +
    "\uffa6\024\uffa6\030\uffa6\031\uffa6\032\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\053\uffa6\001" +
    "\002\000\020\005\225\007\uffcb\012\222\044\231\051\226" +
    "\052\223\056\221\001\002\000\004\007\uff9a\001\002\000" +
    "\004\030\uffa1\001\002\000\004\030\uffa3\001\002\000\004" +
    "\030\uff9c\001\002\000\004\030\uff9e\001\002\000\004\030" +
    "\uffa2\001\002\000\024\004\217\010\206\030\uff9b\036\215" +
    "\037\204\040\211\042\220\044\u0126\053\u0124\001\002\000" +
    "\004\030\uff9d\001\002\000\004\030\uffa0\001\002\000\004" +
    "\030\uff9f\001\002\000\004\030\uff3d\001\002\000\004\030" +
    "\uff3c\001\002\000\004\027\uff58\001\002\000\004\027\uff57" +
    "\001\002\000\006\005\uff7d\024\uff7d\001\002\000\006\005" +
    "\u013f\024\uff76\001\002\000\004\044\u016f\001\002\000\004" +
    "\024\u0142\001\002\000\004\026\u0147\001\002\000\010\033" +
    "\u0144\034\u0146\035\u0145\001\002\000\004\026\uff6a\001\002" +
    "\000\010\006\uff73\007\uff73\026\uff73\001\002\000\010\006" +
    "\uff71\007\uff71\026\uff71\001\002\000\010\006\uff72\007\uff72" +
    "\026\uff72\001\002\000\012\023\010\027\uff78\032\015\044" +
    "\u0149\001\002\000\012\023\010\027\uff78\032\015\044\u0149" +
    "\001\002\000\012\007\ufff3\011\ufff3\014\ufff3\015\ufff3\001" +
    "\002\000\012\023\010\027\uff78\032\015\044\u0149\001\002" +
    "\000\004\027\u014e\001\002\000\012\023\010\027\uff78\032" +
    "\015\044\u0149\001\002\000\004\027\uff7a\001\002\000\024" +
    "\004\217\010\206\024\u0157\030\uff5d\036\215\037\204\040" +
    "\211\042\220\044\u0158\001\002\000\024\004\217\010\206" +
    "\024\u0157\030\uff5d\036\215\037\204\040\211\042\220\044" +
    "\u0158\001\002\000\024\004\217\010\206\024\u0157\030\uff5d" +
    "\036\215\037\204\040\211\042\220\044\u0158\001\002\000" +
    "\024\004\217\010\206\024\u0157\030\uff5d\036\215\037\204" +
    "\040\211\042\220\044\u0158\001\002\000\024\004\217\010" +
    "\206\024\u0157\030\uff5d\036\215\037\204\040\211\042\220" +
    "\044\u0158\001\002\000\024\004\217\010\206\024\u0157\030" +
    "\uff5d\036\215\037\204\040\211\042\220\044\u0158\001\002" +
    "\000\024\004\217\010\206\024\u0157\030\uff5d\036\215\037" +
    "\204\040\211\042\220\044\u0158\001\002\000\024\004\217" +
    "\010\206\024\u0157\030\uff5d\036\215\037\204\040\211\042" +
    "\220\044\u0158\001\002\000\024\004\217\010\206\024\u0157" +
    "\030\uff5d\036\215\037\204\040\211\042\220\044\u0158\001" +
    "\002\000\012\005\056\012\u0162\044\060\056\057\001\002" +
    "\000\010\005\142\007\uff8e\014\150\001\002\000\004\030" +
    "\u015a\001\002\000\004\044\u015b\001\002\000\004\007\u015c" +
    "\001\002\000\020\002\uff7c\003\uff7c\023\uff7c\027\uff7c\031" +
    "\uff7c\032\uff7c\044\uff7c\001\002\000\004\007\uff67\001\002" +
    "\000\004\007\u015f\001\002\000\024\004\217\010\206\024" +
    "\u0157\030\uff5d\036\215\037\204\040\211\042\220\044\u0158" +
    "\001\002\000\004\030\uff66\001\002\000\004\007\u0164\001" +
    "\002\000\004\007\u0163\001\002\000\024\004\uff69\010\uff69" +
    "\024\uff69\030\uff69\036\uff69\037\uff69\040\uff69\042\uff69\044" +
    "\uff69\001\002\000\024\004\uff68\010\uff68\024\uff68\030\uff68" +
    "\036\uff68\037\uff68\040\uff68\042\uff68\044\uff68\001\002\000" +
    "\004\030\uff5e\001\002\000\004\030\uff65\001\002\000\004" +
    "\030\uff63\001\002\000\004\030\uff62\001\002\000\004\030" +
    "\uff5f\001\002\000\004\030\uff64\001\002\000\004\030\uff60" +
    "\001\002\000\004\030\uff61\001\002\000\004\027\uff7b\001" +
    "\002\000\004\027\uff79\001\002\000\006\011\u0170\015\uff6d" +
    "\001\002\000\004\044\u017e\001\002\000\004\015\u0172\001" +
    "\002\000\012\020\u0173\033\uff6f\034\uff6f\035\uff6f\001\002" +
    "\000\010\033\uff70\034\uff70\035\uff70\001\002\000\010\033" +
    "\u0144\034\u0146\035\u0145\001\002\000\006\006\uff74\007\u0176" +
    "\001\002\000\004\044\u0179\001\002\000\004\006\u0178\001" +
    "\002\000\004\024\uff77\001\002\000\006\011\u0170\015\uff6d" +
    "\001\002\000\004\015\u017b\001\002\000\010\033\u0144\034" +
    "\u0146\035\u0145\001\002\000\006\006\uff74\007\u0176\001\002" +
    "\000\004\006\uff75\001\002\000\006\011\u0170\015\uff6d\001" +
    "\002\000\004\015\uff6e\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufff5\001\002\000" +
    "\004\002\ufffe\001\002\000\032\002\ufffd\003\005\004\217" +
    "\010\206\023\010\031\011\032\015\036\215\037\204\040" +
    "\211\042\220\044\140\001\002\000\032\002\ufffd\003\005" +
    "\004\217\010\206\023\010\031\011\032\015\036\215\037" +
    "\204\040\211\042\220\044\140\001\002\000\032\002\ufffd" +
    "\003\005\004\217\010\206\023\010\031\011\032\015\036" +
    "\215\037\204\040\211\042\220\044\140\001\002\000\032" +
    "\002\uffc3\003\uffc3\004\uffc3\010\uffc3\023\uffc3\031\uffc3\032" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\044\uffc3\001\002" +
    "\000\032\002\ufffd\003\005\004\217\010\206\023\010\031" +
    "\011\032\015\036\215\037\204\040\211\042\220\044\140" +
    "\001\002\000\032\002\ufffd\003\005\004\217\010\206\023" +
    "\010\031\011\032\015\036\215\037\204\040\211\042\220" +
    "\044\140\001\002\000\032\002\ufffd\003\005\004\217\010" +
    "\206\023\010\031\011\032\015\036\215\037\204\040\211" +
    "\042\220\044\140\001\002\000\032\002\ufffd\003\005\004" +
    "\217\010\206\023\010\031\011\032\015\036\215\037\204" +
    "\040\211\042\220\044\140\001\002\000\032\002\ufffd\003" +
    "\005\004\217\010\206\023\010\031\011\032\015\036\215" +
    "\037\204\040\211\042\220\044\140\001\002\000\004\002" +
    "\ufff6\001\002\000\004\002\ufffa\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\ufff8\001\002\000\004\002\ufff7\001" +
    "\002\000\004\002\ufff4\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\010\056\003\071\006\104\005\001\001\000" +
    "\010\056\003\071\006\104\u0194\001\001\000\040\002\u0183" +
    "\003\u018a\007\u0184\022\135\026\130\030\u0185\040\u0186\045" +
    "\u018b\050\u0187\053\u0188\056\003\071\006\104\u0181\106\u0189" +
    "\107\u0182\001\001\000\002\001\001\000\010\056\003\071" +
    "\006\104\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\012\001\001\000\012\022\021\072\013\073" +
    "\017\074\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\021\073\044\074\020\001\001\000\004\076" +
    "\027\001\001\000\002\001\001\000\004\103\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\021\074" +
    "\024\001\001\000\004\103\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\032\001" +
    "\001\000\002\001\001\000\004\077\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\051\001\001\000\002\001\001\000\010\015" +
    "\054\016\053\021\060\001\001\000\004\017\115\001\001" +
    "\000\002\001\001\000\010\015\102\016\053\021\060\001" +
    "\001\000\002\001\001\000\004\110\065\001\001\000\004" +
    "\020\061\001\001\000\002\001\001\000\004\021\063\001" +
    "\001\000\004\020\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\070\016\053\021\060\111\072\001" +
    "\001\000\004\112\077\001\001\000\004\112\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\070\016\053\021\060\111\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\106\016\053\021" +
    "\060\001\001\000\004\024\107\001\001\000\002\001\001" +
    "\000\010\015\111\016\053\021\060\001\001\000\002\001" +
    "\001\000\010\015\113\016\053\021\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\117\021\060\001\001\000\004\017\120\001\001\000\002" +
    "\001\001\000\004\025\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\136\022\135\026\130\030\132\056" +
    "\134\071\131\100\133\001\001\000\002\001\001\000\020" +
    "\007\136\022\135\026\130\030\132\056\134\071\131\100" +
    "\u013b\001\001\000\020\007\136\022\135\026\130\030\132" +
    "\056\134\071\131\100\u013a\001\001\000\002\001\001\000" +
    "\020\007\136\022\135\026\130\030\132\056\134\071\131" +
    "\100\177\001\001\000\002\001\001\000\020\007\136\022" +
    "\135\026\130\030\132\056\134\071\131\100\176\001\001" +
    "\000\004\113\140\001\001\000\004\010\156\001\001\000" +
    "\010\015\142\016\053\021\060\001\001\000\004\031\144" +
    "\001\001\000\010\015\154\016\053\021\060\001\001\000" +
    "\002\001\001\000\004\032\146\001\001\000\002\001\001" +
    "\000\012\015\150\016\053\021\060\027\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\160\001\001\000\004\013\167\001\001\000\004\012\161" +
    "\001\001\000\002\001\001\000\012\014\163\015\164\016" +
    "\053\021\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\174\001\001\000\004\010\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\212" +
    "\003\204\026\202\040\201\045\207\050\206\053\211\102" +
    "\213\001\001\000\022\002\212\003\204\026\202\040\201" +
    "\045\207\050\206\053\211\102\u0139\001\001\000\022\002" +
    "\212\003\204\026\202\040\201\045\207\050\206\053\211" +
    "\102\u0138\001\001\000\024\002\u0121\003\u011e\026\u011c\040" +
    "\u011b\045\u0120\046\u0124\047\u011d\050\u011f\053\u0122\001\001" +
    "\000\022\002\212\003\204\026\202\040\201\045\207\050" +
    "\206\053\211\102\u011a\001\001\000\002\001\001\000\022" +
    "\002\212\003\204\026\202\040\201\045\207\050\206\053" +
    "\211\102\u0115\001\001\000\022\002\212\003\204\026\202" +
    "\040\201\045\207\050\206\053\211\102\u0114\001\001\000" +
    "\002\001\001\000\022\002\212\003\204\026\202\040\201" +
    "\045\207\050\206\053\211\102\365\001\001\000\022\002" +
    "\212\003\204\026\202\040\201\045\207\050\206\053\211" +
    "\102\364\001\001\000\002\001\001\000\016\033\223\034" +
    "\226\035\227\036\231\037\330\051\327\001\001\000\004" +
    "\032\323\001\001\000\002\001\001\000\016\033\223\034" +
    "\226\035\227\036\231\037\233\044\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\300\034\226\035\227\036\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\277\034" +
    "\226\035\227\036\231\001\001\000\004\110\276\001\001" +
    "\000\006\034\275\035\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\242\003\237\026\235\040\236" +
    "\041\245\045\241\050\240\053\243\001\001\000\022\002" +
    "\242\003\237\026\235\040\236\041\274\045\241\050\240" +
    "\053\243\001\001\000\022\002\242\003\237\026\235\040" +
    "\236\041\273\045\241\050\240\053\243\001\001\000\022" +
    "\002\242\003\237\026\235\040\236\041\272\045\241\050" +
    "\240\053\243\001\001\000\022\002\242\003\237\026\235" +
    "\040\236\041\271\045\241\050\240\053\243\001\001\000" +
    "\022\002\242\003\237\026\235\040\236\041\270\045\241" +
    "\050\240\053\243\001\001\000\022\002\242\003\237\026" +
    "\235\040\236\041\267\045\241\050\240\053\243\001\001" +
    "\000\022\002\242\003\237\026\235\040\236\041\266\045" +
    "\241\050\240\053\243\001\001\000\004\032\262\001\001" +
    "\000\004\042\247\001\001\000\016\033\223\034\226\035" +
    "\227\036\231\037\233\044\256\001\001\000\004\043\251" +
    "\001\001\000\022\002\242\003\237\026\235\040\236\041" +
    "\255\045\241\050\240\053\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\242\003\237" +
    "\026\235\040\236\041\260\045\241\050\240\053\243\001" +
    "\001\000\004\042\261\001\001\000\002\001\001\000\004" +
    "\116\263\001\001\000\002\001\001\000\022\002\242\003" +
    "\237\026\235\040\236\041\265\045\241\050\240\053\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\302\035\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\306\005\313\015\311" +
    "\016\053\021\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\314\001\001\000\002\001\001\000\012\005" +
    "\316\015\311\016\053\021\060\001\001\000\004\006\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\324\001\001\000\002" +
    "\001\001\000\022\002\212\003\204\026\202\040\201\045" +
    "\207\050\206\053\211\102\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\341\003" +
    "\334\026\333\040\332\045\337\050\336\052\335\053\340" +
    "\001\001\000\022\002\341\003\334\026\333\040\332\045" +
    "\337\050\336\052\360\053\340\001\001\000\022\002\341" +
    "\003\334\026\333\040\332\045\337\050\336\052\357\053" +
    "\340\001\001\000\022\002\341\003\334\026\333\040\332" +
    "\045\337\050\336\052\356\053\340\001\001\000\002\001" +
    "\001\000\022\002\341\003\334\026\333\040\332\045\337" +
    "\050\336\052\352\053\340\001\001\000\022\002\341\003" +
    "\334\026\333\040\332\045\337\050\336\052\351\053\340" +
    "\001\001\000\022\002\341\003\334\026\333\040\332\045" +
    "\337\050\336\052\350\053\340\001\001\000\022\002\341" +
    "\003\334\026\333\040\332\045\337\050\336\052\347\053" +
    "\340\001\001\000\004\032\343\001\001\000\004\121\344" +
    "\001\001\000\002\001\001\000\022\002\341\003\334\026" +
    "\333\040\332\045\337\050\336\052\346\053\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\370\016\053\021\060\055\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\370\016\053\021\060\055\373\001\001\000\002\001\001" +
    "\000\022\002\u0102\003\377\026\375\040\376\045\u0101\050" +
    "\u0100\053\u0103\054\u0104\001\001\000\022\002\u0102\003\377" +
    "\026\375\040\376\045\u0101\050\u0100\053\u0103\054\u0113\001" +
    "\001\000\022\002\u0102\003\377\026\375\040\376\045\u0101" +
    "\050\u0100\053\u0103\054\u0112\001\001\000\022\002\u0102\003" +
    "\377\026\375\040\376\045\u0101\050\u0100\053\u0103\054\u0111" +
    "\001\001\000\022\002\u0102\003\377\026\375\040\376\045" +
    "\u0101\050\u0100\053\u0103\054\u0110\001\001\000\022\002\u0102" +
    "\003\377\026\375\040\376\045\u0101\050\u0100\053\u0103\054" +
    "\u010f\001\001\000\022\002\u0102\003\377\026\375\040\376" +
    "\045\u0101\050\u0100\053\u0103\054\u010e\001\001\000\022\002" +
    "\u0102\003\377\026\375\040\376\045\u0101\050\u0100\053\u0103" +
    "\054\u010d\001\001\000\002\001\001\000\004\032\u0106\001" +
    "\001\000\004\117\u0107\001\001\000\002\001\001\000\022" +
    "\002\u0102\003\377\026\375\040\376\045\u0101\050\u0100\053" +
    "\u0103\054\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\u0121\003\u011e\026\u011c\040\u011b\045\u0120\046\u0137" +
    "\047\u011d\050\u011f\053\u0122\001\001\000\024\002\u0121\003" +
    "\u011e\026\u011c\040\u011b\045\u0120\046\u0136\047\u011d\050\u011f" +
    "\053\u0122\001\001\000\002\001\001\000\024\002\u0121\003" +
    "\u011e\026\u011c\040\u011b\045\u0120\046\u0133\047\u011d\050\u011f" +
    "\053\u0122\001\001\000\024\002\u0121\003\u011e\026\u011c\040" +
    "\u011b\045\u0120\046\u0132\047\u011d\050\u011f\053\u0122\001\001" +
    "\000\024\002\u0121\003\u011e\026\u011c\040\u011b\045\u0120\046" +
    "\u0131\047\u011d\050\u011f\053\u0122\001\001\000\024\002\u0121" +
    "\003\u011e\026\u011c\040\u011b\045\u0120\046\u0130\047\u011d\050" +
    "\u011f\053\u0122\001\001\000\024\002\u0121\003\u011e\026\u011c" +
    "\040\u011b\045\u0120\046\u012f\047\u011d\050\u011f\053\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0126" +
    "\001\001\000\004\120\u0127\001\001\000\002\001\001\000" +
    "\024\002\u0121\003\u011e\026\u011c\040\u011b\045\u0120\046\u0129" +
    "\047\u011d\050\u011f\053\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\223\034\226\035\227\036\231\037\u012e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\u0121\003\u011e\026\u011c\040\u011b\045\u0120\046\u0135\047\u011d" +
    "\050\u011f\053\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\u013d\001" +
    "\001\000\004\060\u013f\001\001\000\002\001\001\000\004" +
    "\064\u0140\001\001\000\002\001\001\000\004\061\u0142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u0149\022\u014b\056\u0147\057" +
    "\u014a\001\001\000\012\007\u0149\022\u014b\056\u0147\057\u016d" +
    "\001\001\000\004\113\140\001\001\000\012\007\u0149\022" +
    "\u014b\056\u0147\057\u016c\001\001\000\002\001\001\000\012" +
    "\007\u0149\022\u014b\056\u0147\057\u014c\001\001\000\002\001" +
    "\001\000\024\002\u0154\003\u0150\026\u014e\040\u014f\045\u0152" +
    "\050\u0151\053\u0153\065\u0155\066\u0158\001\001\000\024\002" +
    "\u0154\003\u0150\026\u014e\040\u014f\045\u0152\050\u0151\053\u0153" +
    "\065\u0155\066\u016b\001\001\000\024\002\u0154\003\u0150\026" +
    "\u014e\040\u014f\045\u0152\050\u0151\053\u0153\065\u0155\066\u016a" +
    "\001\001\000\024\002\u0154\003\u0150\026\u014e\040\u014f\045" +
    "\u0152\050\u0151\053\u0153\065\u0155\066\u0169\001\001\000\024" +
    "\002\u0154\003\u0150\026\u014e\040\u014f\045\u0152\050\u0151\053" +
    "\u0153\065\u0155\066\u0168\001\001\000\024\002\u0154\003\u0150" +
    "\026\u014e\040\u014f\045\u0152\050\u0151\053\u0153\065\u0155\066" +
    "\u0167\001\001\000\024\002\u0154\003\u0150\026\u014e\040\u014f" +
    "\045\u0152\050\u0151\053\u0153\065\u0155\066\u0166\001\001\000" +
    "\024\002\u0154\003\u0150\026\u014e\040\u014f\045\u0152\050\u0151" +
    "\053\u0153\065\u0155\066\u0165\001\001\000\024\002\u0154\003" +
    "\u0150\026\u014e\040\u014f\045\u0152\050\u0151\053\u0153\065\u0155" +
    "\066\u0164\001\001\000\010\015\u0160\016\053\021\060\001" +
    "\001\000\004\032\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\123" +
    "\u015d\001\001\000\002\001\001\000\024\002\u0154\003\u0150" +
    "\026\u014e\040\u014f\045\u0152\050\u0151\053\u0153\065\u0155\066" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0170\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\u0173\001\001\000\002\001\001\000\004\061\u0174" +
    "\001\001\000\004\067\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u0179\001\001" +
    "\000\002\001\001\000\004\061\u017b\001\001\000\004\067" +
    "\u017c\001\001\000\002\001\001\000\004\062\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\u0183\003\u018a" +
    "\007\u0184\022\135\026\130\030\u0185\040\u0186\045\u018b\050" +
    "\u0187\053\u0188\056\003\071\006\104\u0181\106\u0189\107\u0193" +
    "\001\001\000\040\002\u0183\003\u018a\007\u0184\022\135\026" +
    "\130\030\u0185\040\u0186\045\u018b\050\u0187\053\u0188\056\003" +
    "\071\006\104\u0181\106\u0189\107\u0192\001\001\000\040\002" +
    "\u0183\003\u018a\007\u0184\022\135\026\130\030\u0185\040\u0186" +
    "\045\u018b\050\u0187\053\u0188\056\003\071\006\104\u0181\106" +
    "\u0189\107\u0191\001\001\000\002\001\001\000\040\002\u0183" +
    "\003\u018a\007\u0184\022\135\026\130\030\u0185\040\u0186\045" +
    "\u018b\050\u0187\053\u0188\056\003\071\006\104\u0181\106\u0189" +
    "\107\u0190\001\001\000\040\002\u0183\003\u018a\007\u0184\022" +
    "\135\026\130\030\u0185\040\u0186\045\u018b\050\u0187\053\u0188" +
    "\056\003\071\006\104\u0181\106\u0189\107\u018f\001\001\000" +
    "\040\002\u0183\003\u018a\007\u0184\022\135\026\130\030\u0185" +
    "\040\u0186\045\u018b\050\u0187\053\u0188\056\003\071\006\104" +
    "\u0181\106\u0189\107\u018e\001\001\000\040\002\u0183\003\u018a" +
    "\007\u0184\022\135\026\130\030\u0185\040\u0186\045\u018b\050" +
    "\u0187\053\u0188\056\003\071\006\104\u0181\106\u0189\107\u018d" +
    "\001\001\000\040\002\u0183\003\u018a\007\u0184\022\135\026" +
    "\130\030\u0185\040\u0186\045\u018b\050\u0187\053\u0188\056\003" +
    "\071\006\104\u0181\106\u0189\107\u018c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSemantic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSemantic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSemantic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	action_obj.currentScope = this.scope;
	//scanner.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


	public SymbolTable scope;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSemantic$actions {

 
	public SymbolTable currentScope;
	ArrayList<VariableSymbol> multipleDeclaration = new ArrayList();
	public ArrayList<Quadruple> cuadruplos = new ArrayList(); //Cuadruplos de codigo intermedio
	int numeroTemporal;
	/*Metodos de generacion de cuadruplos con sus diferentes variantes*/
	public void gen(String action, String arg1, String arg2, String res){
		cuadruplos.add(new Quadruple(action, arg1, arg2, res));
	}
	
	public void gen(String action, String arg1, String res){
		cuadruplos.add(new Quadruple(action, arg1, res));
	}
	
	public void gen(String action, String arg1){
		cuadruplos.add(new Quadruple(action, arg1));
	}
	
	public void gen(String action){
		cuadruplos.add(new Quadruple(action));
	}
	
	public String obtenerTemporal(){
		int temp = numeroTemporal;
		numeroTemporal++;
		return "t" + temp;	
	}

  private final AnalizadorSemantic parser;

  /** Constructor */
  CUP$AnalizadorSemantic$actions(AnalizadorSemantic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSemantic$do_action(
    int                        CUP$AnalizadorSemantic$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSemantic$parser,
    java.util.Stack            CUP$AnalizadorSemantic$stack,
    int                        CUP$AnalizadorSemantic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSemantic$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSemantic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // moreVariable ::= COMATOK variables 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreVariable",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // variables ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // variables ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // variables ::= arithmetical moreVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // variables ::= BOOLEANVALUE moreVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("variables",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // llamadoMetodo ::= PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("llamadoMetodo",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // llamadoMetodo ::= PARIZQ variables PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("llamadoMetodo",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // typeProcedure ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // typeProcedure ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // typeProcedure ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeProcedure",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // contentProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // contentProcedure ::= loop contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // contentProcedure ::= while contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // contentProcedure ::= if contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // contentProcedure ::= arrayAsign contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // contentProcedure ::= for contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // contentProcedure ::= get contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // contentProcedure ::= put contentProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // contentProcedure ::= IDENTIFIER asign NT$10 ENDLINE contentProcedure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentProcedure",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(assignment != null){
		if(var != null){
			if(!var.accessType.equals("in")){
				if(var.type.equals(assignment.type)){
					System.out.println("La variable "+ var.id + " se puede asignar");
				}else{
					System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
				}
			}else{
				System.out.println("La variable " + var.id + " no se puede modificar por ser de tipo in");
			}
		}else{
			System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
		}
	}else{
		System.out.println("No se pueden asignar variables de tipo out");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$10",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // innerProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // innerProcedure ::= function innerProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // innerProcedure ::= procedure innerProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerProcedure",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // moreProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreProcedure",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // moreProcedure ::= COMATOK IDENTIFIER moreProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreProcedure",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // wichParams ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // wichParams ::= INOUTTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // wichParams ::= OUTTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // wichParams ::= INTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("wichParams",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // params ::= array 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("params",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // params ::= IDENTIFIER moreProcedure ANOTATION wichParams typeProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("params",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // moreParamsProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsProcedure",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // moreParamsProcedure ::= ENDLINE params moreParamsProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsProcedure",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // innerParams ::= params moreParamsProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("innerParams",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // paramsProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // paramsProcedure ::= innerParams 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // paramsProcedure ::= PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // paramsProcedure ::= PARIZQ innerParams PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsProcedure",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaracionesProcedure ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaracionesProcedure ::= function declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracionesProcedure ::= procedure declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaracionesProcedure ::= arrayStart declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // declaracionesProcedure ::= declaracion declaracionesProcedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesProcedure",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // procedure ::= PROCEDURETOK IDENTIFIER NT$9 paramsProcedure ISTOK declaracionesProcedure BEGINTOK contentProcedure ENDTOK IDENTIFIER ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).value;
		
	if(currentScope.parent != null){
		currentScope = currentScope.parent;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("procedure",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	if(!currentScope.id.equals(((Token)i).getIdentificador())){
		currentScope = currentScope.findChild(((Token)i).getIdentificador());
	}else{
		System.out.println("Iniciando, se imprimira arbol (Semantic): ");
		currentScope.printTree(currentScope, 0);
	}	

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$9",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // procedureInit ::= procedure 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("procedureInit",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contentFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contentFunction ::= returnVal contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // contentFunction ::= while contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // contentFunction ::= if contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // contentFunction ::= arrayAsign contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // contentFunction ::= loop contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // contentFunction ::= for contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // contentFunction ::= get contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // contentFunction ::= put contentFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // contentFunction ::= IDENTIFIER asign NT$8 ENDLINE contentFunction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFunction",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(!var.accessType.equals("in")){
			if(var.type.equals(assignment.type)){
				System.out.println("La variable "+ var.id + " se puede asignar");
			}else{
				System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
			}
		}else{
			System.out.println("La variable " + var.id + " no se puede cambiar por ser de tipo in");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$8",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // returnVal ::= RETURNTOK arithmetical ENDLINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		RESULT = a;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnVal",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // returnVal ::= RETURNTOK BOOLEANVALUE ENDLINE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnVal",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // returnExpect ::= RETURNTOK typeFunction 
            {
              Object RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = tf;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("returnExpect",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // repeatFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("repeatFunction",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // repeatFunction ::= ENDLINE paramsFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("repeatFunction",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // moreFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreFunction",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // moreFunction ::= COMATOK IDENTIFIER moreFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreFunction",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // typeParamFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeParamFunction",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // typeParamFunction ::= INTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeParamFunction",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // typeFunction ::= FLOATTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new FloatType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // typeFunction ::= BOOLEANTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // typeFunction ::= INTEGERTOK 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new IntegerType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeFunction",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // moreParamsFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsFunction",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // moreParamsFunction ::= ENDLINE IDENTIFIER moreFunction ANOTATION typeFunction moreParamsFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreParamsFunction",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // paramsFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsFunction",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // paramsFunction ::= PARIZQ IDENTIFIER moreFunction ANOTATION typeParamFunction typeFunction moreParamsFunction PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("paramsFunction",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declaracionesFunction ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declaracionesFunction ::= function declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracionesFunction ::= array declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracionesFunction ::= declaracion declaracionesFunction 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function ::= FUNCIONTOK IDENTIFIER NT$7 paramsFunction returnExpect ISTOK declaracionesFunction BEGINTOK contentFunction ENDTOK IDENTIFIER ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)).value;
		
	currentScope = currentScope.parent;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("function",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	currentScope = currentScope.findChild(((Token)i).getIdentificador());

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$7",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // contentWhile ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // contentWhile ::= loop contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // contentWhile ::= while contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // contentWhile ::= if contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // contentWhile ::= arrayAsign contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // contentWhile ::= for contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // contentWhile ::= get contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // contentWhile ::= put contentWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // contentWhile ::= IDENTIFIER asign NT$6 ENDLINE contentWhile 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentWhile",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$6",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // conditionWhile ::= booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("conditionWhile",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while ::= WHILETOK conditionWhile LOOPTOK contentWhile ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion ::= arithmetical 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)ar;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion ::= BOOLEANVALUE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // moreArrayAsign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreArrayAsign",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // moreArrayAsign ::= COMATOK arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreArrayAsign",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asign",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asign ::= ASIGNATION asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)a;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("asign",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arrayAsign ::= IDENTIFIER PARIZQ arithmetical moreArrayAsign PARDER asign ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayAsign",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // typeArray ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // typeArray ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // typeArray ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeArray",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // twoD ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("twoD",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // twoD ::= COMATOK arithmetical RANGETOK arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("twoD",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // range ::= PARIZQ arithmetical RANGETOK arithmetical twoD PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("range",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array ::= TYPETOK IDENTIFIER ISTOK ARRAYTOK range OFTOK typeArray ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arrayStart ::= arrayAsign 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayStart",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arrayStart ::= array 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arrayStart",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exit ::= EXITTOK WHENTOK booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("exit",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // contentLoop ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // contentLoop ::= loop contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // contentLoop ::= exit ENDLINE contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // contentLoop ::= while contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // contentLoop ::= if contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // contentLoop ::= arrayAsign contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // contentLoop ::= for contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // contentLoop ::= get contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // contentLoop ::= put contentLoop 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contentLoop ::= IDENTIFIER asign NT$5 ENDLINE contentLoop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentLoop",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$5",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // loop ::= LOOPTOK contentLoop ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("loop",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contentFor ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // contentFor ::= loop contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // contentFor ::= while contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contentFor ::= if contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // contentFor ::= arrayAsign contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // contentFor ::= for contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // contentFor ::= get contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // contentFor ::= put contentFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // contentFor ::= IDENTIFIER asign NT$4 ENDLINE contentFor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentFor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$4",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rangeParams ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("rangeParams",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for ::= FORTOK IDENTIFIER INTOK rangeParams RANGETOK rangeParams LOOPTOK contentFor ENDTOK LOOPTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditionIf ::= booleanInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("conditionIf",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("else",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else ::= ELSETOK contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("else",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elsif ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("elsif",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elsif ::= ELSIFTOK conditionIf THENTOK contentIf elsif 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("elsif",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contentIf ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contentIf ::= loop contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contentIf ::= while contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contentIf ::= if contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contentIf ::= arrayAsign contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contentIf ::= for contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contentIf ::= get contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contentIf ::= put contentIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contentIf ::= IDENTIFIER asign NT$3 ENDLINE contentIf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentIf",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$3",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= IFTOK conditionIf THENTOK contentIf elsif else ENDTOK IFTOK ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifInit ::= if 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("ifInit",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operando ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operando ::= NUMBER POINTTOK NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operando ::= NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operando ::= IDENTIFIER llamadoMetodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operando ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion ::= OPRELACIONAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion ::= OPBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // moreBoolean ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreBoolean",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // moreBoolean ::= operacion expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreBoolean",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= operando moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= PARIZQ expresion PARDER moreBoolean 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // booleanInit ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("booleanInit",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // f ::= PARIZQ arithmetical NT$2 PARDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	RESULT = (ParserResult)ar;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$2",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // f ::= NUMBER POINTTOK NUMBER 
            {
              Object RESULT =null;
		 RESULT = new ParserResult(new FloatType()); 
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // f ::= NUMBER 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new IntegerType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // f ::= IDENTIFIER llamadoMetodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // f ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	if(var != null){
		if(!var.accessType.equals("out")){
			RESULT = new ParserResult(var.type);
		}else{
                    System.out.println("Variable de tipo out no puede ser asignada");
                    RESULT = null;
		}
	}else{
		RESULT = new ParserResult(new ErrorType());
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // d ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("d",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // d ::= OPMULT f d 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("d",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // b ::= OPSUMA a b 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // a ::= f d 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("a",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetical ::= a b 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("arithmetical",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // morePutGet ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("morePutGet",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // morePutGet ::= COMATOK valuePutGet morePutGet 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("morePutGet",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valuePutGet ::= arithmetical 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valuePutGet ::= BOOLEANVALUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valuePutGet ::= LETTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valuePutGet",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contentPutGet ::= valuePutGet morePutGet 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("contentPutGet",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // get ::= GETTOK PARIZQ IDENTIFIER PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("get",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // put ::= PUTTOK PARIZQ PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("put",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // put ::= PUTTOK PARIZQ contentPutGet PARDER ENDLINE 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("put",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("assign",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign ::= ASIGNATION valueDeclaracion 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = (ParserResult)vd;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("assign",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valueDeclaracion ::= arithmetical 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;
		RESULT = ar;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valueDeclaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valueDeclaracion ::= BOOLEANVALUE 
            {
              Object RESULT =null;
		RESULT = new ParserResult(new BooleanType());
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("valueDeclaracion",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typeDeclaracion ::= FLOATTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typeDeclaracion ::= BOOLEANTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typeDeclaracion ::= INTEGERTOK 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("typeDeclaracion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declare",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declare ::= ANOTATION typeDeclaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declare",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // moreDeclaracion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreDeclaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // moreDeclaracion ::= COMATOK IDENTIFIER NT$1 moreDeclaracion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-2)).value;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("moreDeclaracion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$1",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= IDENTIFIER NT$0 moreDeclaracion declare assign ENDLINE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		
	ParserResult resultado = (ParserResult)a;
	for(VariableSymbol var : multipleDeclaration){
		if(resultado != null){
			if(var.type.equals(resultado.type)){
				System.out.println("La variable " + var.id + " se puede asignar, los tipos concuerdan");
			}else{
				System.out.println("La variable " + var.id + "no se puede asignar, los tipos NO concuerdan");
			}
		}
	}
	multipleDeclaration = new ArrayList();

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.peek()).value;

	System.out.println("Current Scope: " + currentScope.id );
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("NT$0",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programRecovery ::= arrayStart programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programRecovery ::= programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // programRecovery ::= loop programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // programRecovery ::= while programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programRecovery ::= for programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programRecovery ::= ifInit programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programRecovery ::= get programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programRecovery ::= put programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programRecovery ::= declaracion programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programRecovery",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programInit ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programInit ::= error programRecovery 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programInit ::= function programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programInit ::= procedure programInit 
            {
              Object RESULT =null;

              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("programInit",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programInit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSemantic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.elementAt(CUP$AnalizadorSemantic$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSemantic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSemantic$parser.done_parsing();
          return CUP$AnalizadorSemantic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

