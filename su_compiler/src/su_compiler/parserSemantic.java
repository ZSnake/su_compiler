
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Dec 15 16:08:50 CST 2012
//----------------------------------------------------

package su_compiler;

import Ada95_Codegen.SequentialSymbolTable;
import Ada95_Intermediate.*;
import Ada95_Semantic.*;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.10k generated parser.
  * @version Sat Dec 15 16:08:50 CST 2012
  */
public class parserSemantic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserSemantic() {super();}

  /** Constructor which sets the default scanner. */
  public parserSemantic(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\007\002\000\002\007" +
    "\003\000\002\003\003\000\002\004\002\000\002\005\002" +
    "\000\002\006\002\000\002\011\003\000\002\011\003\000" +
    "\002\010\003\000\002\010\003\000\002\012\003\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\010\000\002\017\010\000" +
    "\002\020\002\000\002\020\004\000\002\021\010\000\002" +
    "\021\010\000\002\013\005\000\002\013\005\000\002\022" +
    "\007\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\025\004\000\002\026\005\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\031" +
    "\002\000\002\031\003\000\002\032\005\000\002\033\004" +
    "\000\002\033\004\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\004\000\002\034\003\000\002" +
    "\035\003\000\002\035\005\000\002\036\003\000\002\037" +
    "\002\000\002\037\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\005\000\002\044\007\000\002\045\005\000" +
    "\002\045\005\000\002\046\003\000\002\046\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\050\006" +
    "\000\002\050\006\000\002\051\006\000\002\051\006\000" +
    "\002\052\005\000\002\052\005\000\002\053\006\000\002" +
    "\053\006\000\002\054\006\000\002\054\006\000\002\055" +
    "\003\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\056\003\000\002\056\004\000\002\057\003\000" +
    "\002\057\004\000\002\060\003\000\002\060\005\000\002" +
    "\061\003\000\002\061\005\000\002\062\003\000\002\062" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\005\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\070\007\000\002\070\005\000\002\071" +
    "\004\000\002\072\003\000\002\072\005\000\002\073\004" +
    "\000\002\073\004\000\002\073\003\000\002\074\002\000" +
    "\002\074\004\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\005\000\002\100\004\000" +
    "\002\101\006\000\002\144\002\000\002\106\010\000\002" +
    "\102\007\000\002\102\012\000\002\103\007\000\002\103" +
    "\012\000\002\104\002\000\002\104\006\000\002\105\003" +
    "\000\002\145\002\000\002\107\010\000\002\107\011\000" +
    "\002\146\002\000\002\110\007\000\002\111\002\000\002" +
    "\111\007\000\002\111\010\000\002\111\005\000\002\147" +
    "\002\000\002\112\010\000\002\150\002\000\002\112\013" +
    "\000\002\113\002\000\002\113\004\000\002\114\006\000" +
    "\002\115\002\000\002\115\003\000\002\116\002\000\002" +
    "\116\005\000\002\117\004\000\002\117\005\000\002\120" +
    "\005\000\002\121\004\000\002\122\005\000\002\122\007" +
    "\000\002\123\005\000\002\123\006\000\002\123\010\000" +
    "\002\124\003\000\002\124\003\000\002\125\003\000\002" +
    "\151\002\000\002\126\006\000\002\127\002\000\002\127" +
    "\003\000\002\130\003\000\002\130\005\000\002\131\007" +
    "\000\002\131\007\000\002\132\002\000\002\132\003\000" +
    "\002\132\003\000\002\132\004\000\002\152\002\000\002" +
    "\153\002\000\002\133\014\000\002\134\002\000\002\134" +
    "\003\000\002\135\004\000\002\135\005\000\002\135\007" +
    "\000\002\135\007\000\002\136\005\000\002\136\004\000" +
    "\002\137\005\000\002\140\003\000\002\141\003\000\002" +
    "\141\004\000\002\141\003\000\002\142\003\000\002\142" +
    "\003\000\002\143\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\010\003\010\036\014\061\005\001\002\000" +
    "\010\002\uff22\036\uff22\061\uff22\001\002\000\004\152\022" +
    "\001\002\000\016\003\uffcb\016\uffcb\036\uffcb\061\uffcb\075" +
    "\uffcb\152\uffcb\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\uff24\036\uff24\061\uff24\001\002\000\010\002\uff27\036" +
    "\014\061\005\001\002\000\010\002\uff23\036\uff23\061\uff23" +
    "\001\002\000\004\002\326\001\002\000\006\152\022\156" +
    "\024\001\002\000\004\124\017\001\002\000\010\002\uff26" +
    "\036\uff26\061\uff26\001\002\000\020\002\uff48\003\uff48\016" +
    "\uff48\036\uff48\061\uff48\075\uff48\152\uff48\001\002\000\006" +
    "\071\uff3d\113\027\001\002\000\010\071\uff42\113\uff42\124" +
    "\uff42\001\002\000\124\013\ufff6\024\ufff6\025\ufff6\042\ufff6" +
    "\043\ufff6\045\ufff6\046\ufff6\050\ufff6\053\ufff6\064\ufff6\066" +
    "\ufff6\071\ufff6\101\ufff6\105\ufff6\110\ufff6\111\ufff6\112\ufff6" +
    "\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121" +
    "\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6" +
    "\130\ufff6\131\ufff6\132\ufff6\133\ufff6\134\ufff6\135\ufff6\136" +
    "\ufff6\137\ufff6\141\ufff6\150\ufff6\151\ufff6\001\002\000\010" +
    "\071\uff41\113\uff41\124\uff41\001\002\000\120\013\uff40\024" +
    "\uff40\025\uff40\042\uff40\043\uff40\045\uff40\046\uff40\050\uff40" +
    "\053\uff40\064\uff40\066\uff40\071\uff40\101\uff40\105\uff40\110" +
    "\uff40\111\uff40\112\uff40\113\uff40\114\uff40\115\uff40\116\uff40" +
    "\117\uff40\120\uff40\121\uff40\122\uff40\124\uff40\125\uff40\126" +
    "\uff40\127\uff40\130\uff40\131\uff40\132\uff40\133\uff40\134\uff40" +
    "\135\uff40\136\uff40\137\uff40\150\uff40\151\uff40\001\002\000" +
    "\004\071\uff3c\001\002\000\004\071\323\001\002\000\004" +
    "\152\022\001\002\000\006\114\uff3f\124\317\001\002\000" +
    "\006\121\311\123\312\001\002\000\006\114\uff3b\124\uff3b" +
    "\001\002\000\006\121\034\123\035\001\002\000\004\152" +
    "\022\001\002\000\020\042\037\055\036\145\uff37\146\uff37" +
    "\147\uff37\152\uff37\156\uff37\001\002\000\014\145\uff35\146" +
    "\uff35\147\uff35\152\uff35\156\uff35\001\002\000\016\055\307" +
    "\145\uff36\146\uff36\147\uff36\152\uff36\156\uff36\001\002\000" +
    "\014\145\044\146\043\147\054\152\022\156\024\001\002" +
    "\000\032\013\uffe3\043\uffe3\045\uffe3\053\uffe3\101\uffe3\110" +
    "\uffe3\114\uffe3\121\uffe3\124\uffe3\137\uffe3\150\uffe3\151\uffe3" +
    "\001\002\000\024\024\061\025\056\043\uffe4\064\152\113" +
    "\113\114\uffe4\122\110\124\uffe4\137\uffe4\001\002\000\034" +
    "\013\ufffa\043\ufffa\045\ufffa\053\ufffa\064\ufffa\101\ufffa\110" +
    "\ufffa\114\ufffa\121\ufffa\124\ufffa\137\ufffa\150\ufffa\151\ufffa" +
    "\001\002\000\032\013\ufff8\043\ufff8\045\ufff8\053\ufff8\101" +
    "\ufff8\110\ufff8\114\ufff8\121\ufff8\124\ufff8\137\ufff8\150\ufff8" +
    "\151\ufff8\001\002\000\010\114\uffeb\124\uffeb\137\304\001" +
    "\002\000\116\013\uffc5\024\uffc5\025\uffc5\042\uffc5\043\uffc5" +
    "\045\uffc5\046\uffc5\050\uffc5\053\uffc5\064\uffc5\066\uffc5\101" +
    "\uffc5\105\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5" +
    "\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122\uffc5\124" +
    "\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5\132\uffc5" +
    "\133\uffc5\134\uffc5\135\uffc5\136\uffc5\137\uffc5\150\uffc5\151" +
    "\uffc5\001\002\000\116\013\uffc4\024\uffc4\025\uffc4\042\uffc4" +
    "\043\uffc4\045\uffc4\046\uffc4\050\uffc4\053\uffc4\064\uffc4\066" +
    "\uffc4\101\uffc4\105\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4" +
    "\114\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122" +
    "\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4" +
    "\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136\uffc4\137\uffc4\150" +
    "\uffc4\151\uffc4\001\002\000\116\013\uffc6\024\uffc6\025\uffc6" +
    "\042\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6\053\uffc6\064" +
    "\uffc6\066\uffc6\101\uffc6\105\uffc6\110\uffc6\111\uffc6\112\uffc6" +
    "\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121" +
    "\uffc6\122\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6" +
    "\131\uffc6\132\uffc6\133\uffc6\134\uffc6\135\uffc6\136\uffc6\137" +
    "\uffc6\150\uffc6\151\uffc6\001\002\000\032\013\uffe2\043\uffe2" +
    "\045\uffe2\053\uffe2\101\uffe2\110\uffe2\114\uffe2\121\uffe2\124" +
    "\uffe2\137\uffe2\150\uffe2\151\uffe2\001\002\000\116\013\uffc3" +
    "\024\uffc3\025\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050" +
    "\uffc3\053\uffc3\064\uffc3\066\uffc3\101\uffc3\105\uffc3\110\uffc3" +
    "\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117" +
    "\uffc3\120\uffc3\121\uffc3\122\uffc3\124\uffc3\125\uffc3\126\uffc3" +
    "\127\uffc3\130\uffc3\131\uffc3\132\uffc3\133\uffc3\134\uffc3\135" +
    "\uffc3\136\uffc3\137\uffc3\150\uffc3\151\uffc3\001\002\000\034" +
    "\013\ufff7\043\ufff7\045\ufff7\053\ufff7\064\152\101\ufff7\110" +
    "\ufff7\114\ufff7\121\ufff7\124\ufff7\137\ufff7\150\ufff7\151\ufff7" +
    "\001\002\000\040\013\ufff9\024\061\025\056\043\ufff9\045" +
    "\ufff9\053\ufff9\064\ufff9\101\ufff9\110\ufff9\114\ufff9\121\ufff9" +
    "\124\ufff9\137\ufff9\150\ufff9\151\ufff9\001\002\000\032\013" +
    "\uffde\043\uffde\045\uffde\053\uffde\101\uffde\110\uffde\114\uffde" +
    "\121\uffde\124\uffde\137\uffde\150\uffde\151\uffde\001\002\000" +
    "\034\005\072\047\102\050\064\051\106\113\063\117\062" +
    "\120\075\152\022\153\101\154\077\155\103\156\024\157" +
    "\065\001\002\000\032\013\uffda\043\uffda\045\uffda\053\uffda" +
    "\101\uffda\110\uffda\114\uffda\121\uffda\124\uffda\137\uffda\150" +
    "\uffda\151\uffda\001\002\000\032\013\uffdb\043\uffdb\045\uffdb" +
    "\053\uffdb\101\uffdb\110\uffdb\114\uffdb\121\uffdb\124\uffdb\137" +
    "\uffdb\150\uffdb\151\uffdb\001\002\000\034\005\072\047\102" +
    "\050\064\051\106\113\063\117\062\120\075\152\022\153" +
    "\101\154\077\155\103\156\024\157\065\001\002\000\024" +
    "\047\uff87\051\uff87\113\uff87\152\uff87\153\uff87\154\uff87\155" +
    "\uff87\156\uff87\157\uff87\001\002\000\036\005\072\047\102" +
    "\050\064\051\106\054\230\113\063\117\062\120\075\152" +
    "\022\153\101\154\077\155\103\156\024\157\065\001\002" +
    "\000\024\047\uff85\051\uff85\113\uff85\152\uff85\153\uff85\154" +
    "\uff85\155\uff85\156\uff85\157\uff85\001\002\000\102\013\uffbc" +
    "\042\uffbc\043\uffbc\045\uffbc\046\uffbc\050\uffbc\053\uffbc\064" +
    "\uffbc\066\uffbc\101\uffbc\110\uffbc\111\uffbc\114\uffbc\115\uffbc" +
    "\116\uffbc\117\uffbc\120\uffbc\121\uffbc\124\uffbc\125\uffbc\126" +
    "\uffbc\127\uffbc\130\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc" +
    "\135\uffbc\136\uffbc\137\uffbc\150\uffbc\151\uffbc\001\002\000" +
    "\102\013\uff93\042\uff93\043\uff93\045\uff93\046\uff93\050\uff93" +
    "\053\uff93\064\uff93\066\uff93\101\uff93\110\uff93\111\uff93\114" +
    "\uff93\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\124\uff93" +
    "\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93\132\uff93\133" +
    "\uff93\134\uff93\135\uff93\136\uff93\137\uff93\150\uff93\151\uff93" +
    "\001\002\000\102\013\uff95\042\uff95\043\uff95\045\uff95\046" +
    "\uff95\050\uff95\053\uff95\064\uff95\066\uff95\101\uff95\110\uff95" +
    "\111\uff95\114\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121" +
    "\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95\131\uff95" +
    "\132\uff95\133\uff95\134\uff95\135\uff95\136\uff95\137\uff95\150" +
    "\uff95\151\uff95\001\002\000\100\013\uff9a\042\uff9a\043\uff9a" +
    "\045\uff9a\046\uff9a\050\uff9a\053\uff9a\064\uff9a\066\uff9a\101" +
    "\uff9a\110\uff9a\111\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\120\uff9a\121\uff9a\124\uff9a\125\uff9a\126\uff9a\127\uff9a\130" +
    "\uff9a\131\uff9a\132\uff9a\133\uff9a\134\uff9a\135\uff9a\137\uff9a" +
    "\150\uff9a\151\uff9a\001\002\000\100\013\uff9c\042\uff9c\043" +
    "\uff9c\045\uff9c\046\264\050\uff9c\053\uff9c\064\uff9c\066\267" +
    "\101\uff9c\110\uff9c\111\uff9c\114\uff9c\115\270\116\266\117" +
    "\uff9c\120\uff9c\121\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c" +
    "\130\uff9c\131\uff9c\132\uff9c\133\uff9c\134\uff9c\135\uff9c\137" +
    "\uff9c\150\uff9c\151\uff9c\001\002\000\024\047\uff84\051\uff84" +
    "\113\uff84\152\uff84\153\uff84\154\uff84\155\uff84\156\uff84\157" +
    "\uff84\001\002\000\034\013\uffd8\043\uffd8\045\uffd8\053\uffd8" +
    "\064\152\101\uffd8\110\uffd8\114\uffd8\121\uffd8\124\uffd8\137" +
    "\uffd8\150\uffd8\151\uffd8\001\002\000\102\013\uff98\042\uff98" +
    "\043\uff98\045\uff98\046\uff98\050\uff98\053\uff98\064\uff98\066" +
    "\uff98\101\uff98\110\uff98\111\uff98\114\uff98\115\uff98\116\uff98" +
    "\117\uff98\120\uff98\121\uff98\124\uff98\125\uff98\126\uff98\127" +
    "\uff98\130\uff98\131\uff98\132\uff98\133\uff98\134\uff98\135\uff98" +
    "\136\273\137\uff98\150\uff98\151\uff98\001\002\000\024\047" +
    "\uff86\051\uff86\113\uff86\152\uff86\153\uff86\154\uff86\155\uff86" +
    "\156\uff86\157\uff86\001\002\000\070\013\uff9e\042\uff9e\043" +
    "\uff9e\045\uff9e\050\uff9e\053\uff9e\064\uff9e\101\uff9e\110\uff9e" +
    "\111\262\114\uff9e\117\257\120\260\121\uff9e\124\uff9e\125" +
    "\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132\uff9e\133\uff9e" +
    "\134\uff9e\135\uff9e\137\uff9e\150\uff9e\151\uff9e\001\002\000" +
    "\102\013\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\050\uffbe" +
    "\053\uffbe\064\uffbe\066\uffbe\101\uffbe\110\uffbe\111\uffbe\114" +
    "\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\124\uffbe" +
    "\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe\133" +
    "\uffbe\134\uffbe\135\uffbe\136\uffbe\137\uffbe\150\uffbe\151\uffbe" +
    "\001\002\000\102\013\uff96\042\uff96\043\uff96\045\uff96\046" +
    "\uff96\050\uff96\053\uff96\064\uff96\066\uff96\101\uff96\110\uff96" +
    "\111\uff96\114\uff96\115\uff96\116\uff96\117\uff96\120\uff96\121" +
    "\uff96\124\uff96\125\uff96\126\uff96\127\uff96\130\uff96\131\uff96" +
    "\132\uff96\133\uff96\134\uff96\135\uff96\136\uff96\137\uff96\150" +
    "\uff96\151\uff96\001\002\000\102\013\uffbf\042\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\050\uffbf\053\uffbf\064\uffbf\066\uffbf\101" +
    "\uffbf\110\uffbf\111\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf" +
    "\120\uffbf\121\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf\130" +
    "\uffbf\131\uffbf\132\uffbf\133\uffbf\134\uffbf\135\uffbf\136\uffbf" +
    "\137\uffbf\150\uffbf\151\uffbf\001\002\000\006\152\022\156" +
    "\024\001\002\000\102\013\uffbd\042\uffbd\043\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\053\uffbd\064\uffbd\066\uffbd\101\uffbd\110" +
    "\uffbd\111\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\121\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd\130\uffbd\131" +
    "\uffbd\132\uffbd\133\uffbd\134\uffbd\135\uffbd\136\uffbd\137\uffbd" +
    "\150\uffbd\151\uffbd\001\002\000\102\013\uff92\042\uff92\043" +
    "\uff92\045\uff92\046\uff92\050\uff92\053\uff92\064\uff92\066\uff92" +
    "\101\uff92\110\uff92\111\uff92\114\uff92\115\uff92\116\uff92\117" +
    "\uff92\120\uff92\121\uff92\124\uff92\125\uff92\126\uff92\127\uff92" +
    "\130\uff92\131\uff92\132\uff92\133\uff92\134\uff92\135\uff92\136" +
    "\uff92\137\uff92\150\uff92\151\uff92\001\002\000\024\047\102" +
    "\051\106\113\063\152\022\153\101\154\077\155\103\156" +
    "\024\157\065\001\002\000\102\013\uffbb\042\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\050\uffbb\053\uffbb\064\uffbb\066\uffbb\101" +
    "\uffbb\110\uffbb\111\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb" +
    "\120\uffbb\121\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130" +
    "\uffbb\131\uffbb\132\uffbb\133\uffbb\134\uffbb\135\uffbb\136\uffbb" +
    "\137\uffbb\150\uffbb\151\uffbb\001\002\000\110\013\uff94\042" +
    "\uff94\043\uff94\045\uff94\046\uff94\050\uff94\053\uff94\064\uff94" +
    "\066\uff94\101\uff94\110\uff94\111\uff94\112\112\113\113\114" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\110" +
    "\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132" +
    "\uff94\133\uff94\134\uff94\135\uff94\136\uff94\137\uff94\150\uff94" +
    "\151\uff94\001\002\000\010\012\253\152\022\156\024\001" +
    "\002\000\116\013\uff29\024\uff29\025\uff29\042\uff29\043\uff29" +
    "\045\uff29\046\uff29\050\uff29\053\uff29\064\uff29\066\uff29\101" +
    "\uff29\105\uff29\110\uff29\111\uff29\112\uff29\113\uff29\114\uff29" +
    "\115\uff29\116\uff29\117\uff29\120\uff29\121\uff29\122\uff29\124" +
    "\uff29\125\uff29\126\uff29\127\uff29\130\uff29\131\uff29\132\uff29" +
    "\133\uff29\134\uff29\135\uff29\136\uff29\137\uff29\150\uff29\151" +
    "\uff29\001\002\000\004\113\220\001\002\000\036\005\072" +
    "\047\102\050\064\051\106\113\063\114\123\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\016\045\uffb0\101\uffb0\114\uffb0\121\uffb0\124" +
    "\uffb0\150\214\001\002\000\016\045\uffb2\053\211\101\uffb2" +
    "\114\uffb2\121\uffb2\124\uffb2\001\002\000\070\013\uffc6\042" +
    "\uffc6\046\uffc6\050\uffc6\053\uffc6\066\uffc6\110\uffc6\111\uffc6" +
    "\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\120" +
    "\uffc6\121\uffc6\122\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6" +
    "\131\uffc6\132\uffc6\134\207\136\uffc6\150\uffc6\151\uffc6\001" +
    "\002\000\026\013\172\045\uffb4\053\174\101\uffb4\110\175" +
    "\114\uffb4\121\uffb4\124\uffb4\150\173\151\171\001\002\000" +
    "\006\114\ufff3\121\ufff3\001\002\000\006\114\167\121\166" +
    "\001\002\000\016\045\uffaf\101\uffaf\114\uffaf\121\uffaf\124" +
    "\uffaf\151\163\001\002\000\116\013\uff2a\024\uff2a\025\uff2a" +
    "\042\uff2a\043\uff2a\045\uff2a\046\uff2a\050\uff2a\053\uff2a\064" +
    "\uff2a\066\uff2a\101\uff2a\105\uff2a\110\uff2a\111\uff2a\112\uff2a" +
    "\113\uff2a\114\uff2a\115\uff2a\116\uff2a\117\uff2a\120\uff2a\121" +
    "\uff2a\122\uff2a\124\uff2a\125\uff2a\126\uff2a\127\uff2a\130\uff2a" +
    "\131\uff2a\132\uff2a\133\uff2a\134\uff2a\135\uff2a\136\uff2a\137" +
    "\uff2a\150\uff2a\151\uff2a\001\002\000\016\013\160\045\uffb3" +
    "\101\uffb3\114\uffb3\121\uffb3\124\uffb3\001\002\000\016\045" +
    "\uffb1\101\uffb1\110\156\114\uffb1\121\uffb1\124\uffb1\001\002" +
    "\000\006\114\ufff5\121\ufff5\001\002\000\046\013\uffa4\042" +
    "\131\045\uffa4\050\137\053\uffa4\101\uffa4\110\uffa4\114\uffa4" +
    "\121\uffa4\124\uffa4\125\135\126\140\127\133\130\136\131" +
    "\130\132\141\150\uffa4\151\uffa4\001\002\000\034\005\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\113\uff8c\117\uff8c\120\uff8c\152" +
    "\uff8c\153\uff8c\154\uff8c\155\uff8c\156\uff8c\157\uff8c\001\002" +
    "\000\042\005\uffa0\047\uffa0\050\uffa0\051\uffa0\113\uffa0\117" +
    "\uffa0\120\uffa0\145\uffa0\146\uffa0\147\uffa0\152\uffa0\153\uffa0" +
    "\154\uffa0\155\uffa0\156\uffa0\157\uffa0\001\002\000\034\005" +
    "\072\047\102\050\064\051\106\113\063\117\062\120\075" +
    "\152\022\153\101\154\077\155\103\156\024\157\065\001" +
    "\002\000\034\005\uff90\047\uff90\050\uff90\051\uff90\113\uff90" +
    "\117\uff90\120\uff90\152\uff90\153\uff90\154\uff90\155\uff90\156" +
    "\uff90\157\uff90\001\002\000\042\005\072\047\102\050\064" +
    "\051\106\113\063\117\062\120\075\145\044\146\043\147" +
    "\054\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\034\005\uff8d\047\uff8d\050\uff8d\051\uff8d\113" +
    "\uff8d\117\uff8d\120\uff8d\152\uff8d\153\uff8d\154\uff8d\155\uff8d" +
    "\156\uff8d\157\uff8d\001\002\000\034\005\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\113\uff8f\117\uff8f\120\uff8f\152\uff8f\153\uff8f" +
    "\154\uff8f\155\uff8f\156\uff8f\157\uff8f\001\002\000\004\042" +
    "\142\001\002\000\034\005\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\113\uff8e\117\uff8e\120\uff8e\152\uff8e\153\uff8e\154\uff8e\155" +
    "\uff8e\156\uff8e\157\uff8e\001\002\000\034\005\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\113\uff8b\117\uff8b\120\uff8b\152\uff8b\153" +
    "\uff8b\154\uff8b\155\uff8b\156\uff8b\157\uff8b\001\002\000\042" +
    "\005\uff9f\047\uff9f\050\uff9f\051\uff9f\113\uff9f\117\uff9f\120" +
    "\uff9f\145\uff9f\146\uff9f\147\uff9f\152\uff9f\153\uff9f\154\uff9f" +
    "\155\uff9f\156\uff9f\157\uff9f\001\002\000\026\013\uffa2\045" +
    "\uffa2\053\uffa2\101\uffa2\110\uffa2\114\uffa2\121\uffa2\124\uffa2" +
    "\150\uffa2\151\uffa2\001\002\000\064\013\uffe4\024\061\025" +
    "\056\045\uffe4\046\uff94\053\uffe4\064\152\066\uff94\101\uffe4" +
    "\110\uffe4\111\uff94\112\112\113\113\114\uffe4\115\uff94\116" +
    "\uff94\117\uff94\120\uff94\121\uffe4\122\110\124\uffe4\135\uff94" +
    "\136\uff94\150\uffe4\151\uffe4\001\002\000\026\013\uffa1\045" +
    "\uffa1\053\uffa1\101\uffa1\110\uffa1\114\uffa1\121\uffa1\124\uffa1" +
    "\150\uffa1\151\uffa1\001\002\000\004\135\147\001\002\000" +
    "\034\005\072\047\102\050\064\051\106\113\063\117\062" +
    "\120\075\152\022\153\101\154\077\155\103\156\024\157" +
    "\065\001\002\000\036\013\uffdc\043\uffdc\045\uffdc\053\uffdc" +
    "\101\uffdc\110\uffdc\114\uffdc\121\uffdc\124\uffdc\133\uffdc\134" +
    "\uffdc\137\uffdc\150\uffdc\151\uffdc\001\002\000\032\013\uffe1" +
    "\043\uffe1\045\uffe1\053\uffe1\101\uffe1\110\uffe1\114\uffe1\121" +
    "\uffe1\124\uffe1\137\uffe1\150\uffe1\151\uffe1\001\002\000\034" +
    "\005\072\047\102\050\064\051\106\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\032\013\uffe0\043\uffe0\045\uffe0\053\uffe0\101" +
    "\uffe0\110\uffe0\114\uffe0\121\uffe0\124\uffe0\137\uffe0\150\uffe0" +
    "\151\uffe0\001\002\000\036\013\uffdd\043\uffdd\045\uffdd\053" +
    "\uffdd\101\uffdd\110\uffdd\114\uffdd\121\uffdd\124\uffdd\133\uffdd" +
    "\134\uffdd\137\uffdd\150\uffdd\151\uffdd\001\002\000\026\013" +
    "\uffa3\045\uffa3\053\uffa3\101\uffa3\110\uffa3\114\uffa3\121\uffa3" +
    "\124\uffa3\150\uffa3\151\uffa3\001\002\000\034\005\072\047" +
    "\102\050\064\051\106\113\063\117\062\120\075\152\022" +
    "\153\101\154\077\155\103\156\024\157\065\001\002\000" +
    "\016\045\uffa9\101\uffa9\110\uffa9\114\uffa9\121\uffa9\124\uffa9" +
    "\001\002\000\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113" +
    "\ufffc\117\ufffc\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc" +
    "\156\ufffc\157\ufffc\001\002\000\034\005\072\047\102\050" +
    "\064\051\106\113\063\117\062\120\075\152\022\153\101" +
    "\154\077\155\103\156\024\157\065\001\002\000\016\013" +
    "\uffad\045\uffad\101\uffad\114\uffad\121\uffad\124\uffad\001\002" +
    "\000\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113\ufffc\117" +
    "\ufffc\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc" +
    "\157\ufffc\001\002\000\034\005\072\047\102\050\064\051" +
    "\106\113\063\117\062\120\075\152\022\153\101\154\077" +
    "\155\103\156\024\157\065\001\002\000\016\045\uffa5\101" +
    "\uffa5\114\uffa5\121\uffa5\124\uffa5\151\uffa5\001\002\000\034" +
    "\005\072\047\102\050\064\051\106\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\116\013\uff28\024\uff28\025\uff28\042\uff28\043" +
    "\uff28\045\uff28\046\uff28\050\uff28\053\uff28\064\uff28\066\uff28" +
    "\101\uff28\105\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\122\uff28" +
    "\124\uff28\125\uff28\126\uff28\127\uff28\130\uff28\131\uff28\132" +
    "\uff28\133\uff28\134\uff28\135\uff28\136\uff28\137\uff28\150\uff28" +
    "\151\uff28\001\002\000\006\114\ufff4\121\ufff4\001\002\000" +
    "\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113\ufffc\117\ufffc" +
    "\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc\157" +
    "\ufffc\001\002\000\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\113\ufffc\117\ufffc\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155" +
    "\ufffc\156\ufffc\157\ufffc\001\002\000\034\005\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\113\ufffc\117\ufffc\120\ufffc\152\ufffc\153" +
    "\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\001\002\000\034" +
    "\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113\ufffc\117\ufffc\120" +
    "\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc" +
    "\001\002\000\034\005\072\047\102\050\064\051\106\113" +
    "\063\117\062\120\075\152\022\153\101\154\077\155\103" +
    "\156\024\157\065\001\002\000\016\045\uffaa\101\uffaa\110" +
    "\uffaa\114\uffaa\121\uffaa\124\uffaa\001\002\000\034\005\072" +
    "\047\102\050\064\051\106\113\063\117\062\120\075\152" +
    "\022\153\101\154\077\155\103\156\024\157\065\001\002" +
    "\000\016\045\uffac\053\uffac\101\uffac\114\uffac\121\uffac\124" +
    "\uffac\001\002\000\034\005\072\047\102\050\064\051\106" +
    "\113\063\117\062\120\075\152\022\153\101\154\077\155" +
    "\103\156\024\157\065\001\002\000\016\045\uffa8\101\uffa8" +
    "\114\uffa8\121\uffa8\124\uffa8\150\uffa8\001\002\000\034\005" +
    "\072\047\102\050\064\051\106\113\063\117\062\120\075" +
    "\152\022\153\101\154\077\155\103\156\024\157\065\001" +
    "\002\000\016\013\uffae\045\uffae\101\uffae\114\uffae\121\uffae" +
    "\124\uffae\001\002\000\034\005\072\047\102\050\064\051" +
    "\106\113\063\117\062\120\075\152\022\153\101\154\077" +
    "\155\103\156\024\157\065\001\002\000\016\045\uffa6\101" +
    "\uffa6\114\uffa6\121\uffa6\124\uffa6\151\uffa6\001\002\000\034" +
    "\005\072\047\102\050\064\051\106\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\006\114\ufff2\121\ufff2\001\002\000\034\005" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\113\ufffc\117\ufffc\120\ufffc" +
    "\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\001" +
    "\002\000\034\005\072\047\102\050\064\051\106\113\063" +
    "\117\062\120\075\152\022\153\101\154\077\155\103\156" +
    "\024\157\065\001\002\000\016\045\uffab\053\uffab\101\uffab" +
    "\114\uffab\121\uffab\124\uffab\001\002\000\034\005\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\113\ufffc\117\ufffc\120\ufffc\152\ufffc" +
    "\153\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\001\002\000" +
    "\034\005\072\047\102\050\064\051\106\113\063\117\062" +
    "\120\075\152\022\153\101\154\077\155\103\156\024\157" +
    "\065\001\002\000\016\045\uffa7\101\uffa7\114\uffa7\121\uffa7" +
    "\124\uffa7\150\uffa7\001\002\000\102\013\uff7e\042\uff7e\043" +
    "\uff7e\045\uff7e\046\uff7e\050\uff7e\053\uff7e\064\uff7e\066\uff7e" +
    "\101\uff7e\110\uff7e\111\uff7e\114\uff7e\115\uff7e\116\uff7e\117" +
    "\uff7e\120\uff7e\121\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e" +
    "\130\uff7e\131\uff7e\132\uff7e\133\uff7e\134\uff7e\135\uff7e\136" +
    "\uff7e\137\uff7e\150\uff7e\151\uff7e\001\002\000\036\005\072" +
    "\047\102\050\064\051\106\054\230\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\006\114\251\121\250\001\002\000\006\133" +
    "\237\134\245\001\002\000\006\133\uffcf\134\uffcf\001\002" +
    "\000\076\013\uff94\042\uff94\046\uff94\050\uff94\053\uff94\064" +
    "\152\066\uff94\110\uff94\111\uff94\112\112\113\113\114\uff94" +
    "\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\110\125" +
    "\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132\uff94\133\uff94" +
    "\134\uff94\135\uff94\136\uff94\150\uff94\151\uff94\001\002\000" +
    "\006\114\243\121\uffb6\001\002\000\006\133\uffce\134\uffce" +
    "\001\002\000\004\121\232\001\002\000\006\133\uffd1\134" +
    "\uffd1\001\002\000\046\013\uffa4\042\131\050\137\053\uffa4" +
    "\110\uffa4\114\uffa4\121\uffa4\125\135\126\140\127\133\130" +
    "\136\131\130\132\141\133\uffd2\134\uffd2\135\147\150\uffa4" +
    "\151\uffa4\001\002\000\036\005\072\047\102\050\064\051" +
    "\106\054\230\113\063\117\062\120\075\152\022\153\101" +
    "\154\077\155\103\156\024\157\065\001\002\000\006\133" +
    "\237\134\236\001\002\000\006\114\uffb6\121\uffb6\001\002" +
    "\000\006\114\uffb8\121\uffb8\001\002\000\034\005\072\047" +
    "\102\050\064\051\106\113\063\117\062\120\075\152\022" +
    "\153\101\154\077\155\103\156\024\157\065\001\002\000" +
    "\036\005\072\047\102\050\064\051\106\054\230\113\063" +
    "\117\062\120\075\152\022\153\101\154\077\155\103\156" +
    "\024\157\065\001\002\000\006\133\uffcd\134\uffcd\001\002" +
    "\000\010\133\uffd2\134\uffd2\135\147\001\002\000\006\114" +
    "\uffb5\121\uffb5\001\002\000\102\013\uff7f\042\uff7f\043\uff7f" +
    "\045\uff7f\046\uff7f\050\uff7f\053\uff7f\064\uff7f\066\uff7f\101" +
    "\uff7f\110\uff7f\111\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f" +
    "\120\uff7f\121\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130" +
    "\uff7f\131\uff7f\132\uff7f\133\uff7f\134\uff7f\135\uff7f\136\uff7f" +
    "\137\uff7f\150\uff7f\151\uff7f\001\002\000\006\133\uffd0\134" +
    "\uffd0\001\002\000\034\005\072\047\102\050\064\051\106" +
    "\113\063\117\062\120\075\152\022\153\101\154\077\155" +
    "\103\156\024\157\065\001\002\000\006\114\247\121\uffb5" +
    "\001\002\000\102\013\uffb9\042\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\050\uffb9\053\uffb9\064\uffb9\066\uffb9\101\uffb9\110\uffb9" +
    "\111\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121" +
    "\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9" +
    "\132\uffb9\133\uffb9\134\uffb9\135\uffb9\136\uffb9\137\uffb9\150" +
    "\uffb9\151\uffb9\001\002\000\036\005\072\047\102\050\064" +
    "\051\106\054\230\113\063\117\062\120\075\152\022\153" +
    "\101\154\077\155\103\156\024\157\065\001\002\000\102" +
    "\013\uffba\042\uffba\043\uffba\045\uffba\046\uffba\050\uffba\053" +
    "\uffba\064\uffba\066\uffba\101\uffba\110\uffba\111\uffba\114\uffba" +
    "\115\uffba\116\uffba\117\uffba\120\uffba\121\uffba\124\uffba\125" +
    "\uffba\126\uffba\127\uffba\130\uffba\131\uffba\132\uffba\133\uffba" +
    "\134\uffba\135\uffba\136\uffba\137\uffba\150\uffba\151\uffba\001" +
    "\002\000\006\114\uffb7\121\uffb7\001\002\000\116\013\uffc1" +
    "\024\uffc1\025\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\050" +
    "\uffc1\053\uffc1\064\uffc1\066\uffc1\101\uffc1\105\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1\117" +
    "\uffc1\120\uffc1\121\uffc1\122\uffc1\124\uffc1\125\uffc1\126\uffc1" +
    "\127\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1\134\uffc1\135" +
    "\uffc1\136\uffc1\137\uffc1\150\uffc1\151\uffc1\001\002\000\116" +
    "\013\uffc2\024\uffc2\025\uffc2\042\uffc2\043\uffc2\045\uffc2\046" +
    "\uffc2\050\uffc2\053\uffc2\064\uffc2\066\uffc2\101\uffc2\105\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2\116" +
    "\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\124\uffc2\125\uffc2" +
    "\126\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133\uffc2\134" +
    "\uffc2\135\uffc2\136\uffc2\137\uffc2\150\uffc2\151\uffc2\001\002" +
    "\000\116\013\uffc0\024\uffc0\025\uffc0\042\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\050\uffc0\053\uffc0\064\uffc0\066\uffc0\101\uffc0" +
    "\105\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\115" +
    "\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\122\uffc0\124\uffc0" +
    "\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\132\uffc0\133" +
    "\uffc0\134\uffc0\135\uffc0\136\uffc0\137\uffc0\150\uffc0\151\uffc0" +
    "\001\002\000\070\013\uff9d\042\uff9d\043\uff9d\045\uff9d\050" +
    "\uff9d\053\uff9d\064\uff9d\101\uff9d\110\uff9d\111\262\114\uff9d" +
    "\117\257\120\260\121\uff9d\124\uff9d\125\uff9d\126\uff9d\127" +
    "\uff9d\130\uff9d\131\uff9d\132\uff9d\133\uff9d\134\uff9d\135\uff9d" +
    "\137\uff9d\150\uff9d\151\uff9d\001\002\000\024\047\uff8a\051" +
    "\uff8a\113\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a\156\uff8a" +
    "\157\uff8a\001\002\000\024\047\uff89\051\uff89\113\uff89\152" +
    "\uff89\153\uff89\154\uff89\155\uff89\156\uff89\157\uff89\001\002" +
    "\000\024\047\102\051\106\113\063\152\022\153\101\154" +
    "\077\155\103\156\024\157\065\001\002\000\024\047\uff88" +
    "\051\uff88\113\uff88\152\uff88\153\uff88\154\uff88\155\uff88\156" +
    "\uff88\157\uff88\001\002\000\100\013\uff9b\042\uff9b\043\uff9b" +
    "\045\uff9b\046\264\050\uff9b\053\uff9b\064\uff9b\066\267\101" +
    "\uff9b\110\uff9b\111\uff9b\114\uff9b\115\270\116\266\117\uff9b" +
    "\120\uff9b\121\uff9b\124\uff9b\125\uff9b\126\uff9b\127\uff9b\130" +
    "\uff9b\131\uff9b\132\uff9b\133\uff9b\134\uff9b\135\uff9b\137\uff9b" +
    "\150\uff9b\151\uff9b\001\002\000\024\047\uff81\051\uff81\113" +
    "\uff81\152\uff81\153\uff81\154\uff81\155\uff81\156\uff81\157\uff81" +
    "\001\002\000\024\047\102\051\106\113\063\152\022\153" +
    "\101\154\077\155\103\156\024\157\065\001\002\000\024" +
    "\047\uff82\051\uff82\113\uff82\152\uff82\153\uff82\154\uff82\155" +
    "\uff82\156\uff82\157\uff82\001\002\000\024\047\uff80\051\uff80" +
    "\113\uff80\152\uff80\153\uff80\154\uff80\155\uff80\156\uff80\157" +
    "\uff80\001\002\000\024\047\uff83\051\uff83\113\uff83\152\uff83" +
    "\153\uff83\154\uff83\155\uff83\156\uff83\157\uff83\001\002\000" +
    "\100\013\uff99\042\uff99\043\uff99\045\uff99\046\uff99\050\uff99" +
    "\053\uff99\064\uff99\066\uff99\101\uff99\110\uff99\111\uff99\114" +
    "\uff99\115\uff99\116\uff99\117\uff99\120\uff99\121\uff99\124\uff99" +
    "\125\uff99\126\uff99\127\uff99\130\uff99\131\uff99\132\uff99\133" +
    "\uff99\134\uff99\135\uff99\137\uff99\150\uff99\151\uff99\001\002" +
    "\000\106\013\uff7d\042\uff7d\043\uff7d\045\uff7d\046\uff7d\050" +
    "\uff7d\053\uff7d\064\uff7d\066\uff7d\101\uff7d\110\uff7d\111\uff7d" +
    "\113\113\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121" +
    "\uff7d\122\110\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d" +
    "\131\uff7d\132\uff7d\133\uff7d\134\uff7d\135\uff7d\136\uff7d\137" +
    "\uff7d\150\uff7d\151\uff7d\001\002\000\024\047\102\051\106" +
    "\113\063\152\022\153\101\154\077\155\103\156\024\157" +
    "\065\001\002\000\100\013\uff97\042\uff97\043\uff97\045\uff97" +
    "\046\uff97\050\uff97\053\uff97\064\uff97\066\uff97\101\uff97\110" +
    "\uff97\111\uff97\114\uff97\115\uff97\116\uff97\117\uff97\120\uff97" +
    "\121\uff97\124\uff97\125\uff97\126\uff97\127\uff97\130\uff97\131" +
    "\uff97\132\uff97\133\uff97\134\uff97\135\uff97\137\uff97\150\uff97" +
    "\151\uff97\001\002\000\032\013\uffd6\043\uffd6\045\uffd6\053" +
    "\uffd6\101\uffd6\110\uffd6\114\uffd6\121\uffd6\124\uffd6\137\uffd6" +
    "\150\uffd6\151\uffd6\001\002\000\032\013\uffd7\043\uffd7\045" +
    "\uffd7\053\uffd7\101\uffd7\110\uffd7\114\uffd7\121\uffd7\124\uffd7" +
    "\137\uffd7\150\uffd7\151\uffd7\001\002\000\006\114\300\121" +
    "\uffb6\001\002\000\102\013\uff91\042\uff91\043\uff91\045\uff91" +
    "\046\uff91\050\uff91\053\uff91\064\uff91\066\uff91\101\uff91\110" +
    "\uff91\111\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91" +
    "\121\uff91\124\uff91\125\uff91\126\uff91\127\uff91\130\uff91\131" +
    "\uff91\132\uff91\133\uff91\134\uff91\135\uff91\136\uff91\137\uff91" +
    "\150\uff91\151\uff91\001\002\000\034\013\uffd8\043\uffd8\045" +
    "\uffd8\053\uffd8\064\152\101\uffd8\110\uffd8\114\uffd8\121\uffd8" +
    "\124\uffd8\137\uffd8\150\uffd8\151\uffd8\001\002\000\032\013" +
    "\uffd9\043\uffd9\045\uffd9\053\uffd9\101\uffd9\110\uffd9\114\uffd9" +
    "\121\uffd9\124\uffd9\137\uffd9\150\uffd9\151\uffd9\001\002\000" +
    "\032\013\uffdf\043\uffdf\045\uffdf\053\uffdf\101\uffdf\110\uffdf" +
    "\114\uffdf\121\uffdf\124\uffdf\137\uffdf\150\uffdf\151\uffdf\001" +
    "\002\000\034\005\072\047\102\050\064\051\106\113\063" +
    "\117\062\120\075\152\022\153\101\154\077\155\103\156" +
    "\024\157\065\001\002\000\006\114\uff38\124\uff38\001\002" +
    "\000\006\114\uffea\124\uffea\001\002\000\014\145\uff34\146" +
    "\uff34\147\uff34\152\uff34\156\uff34\001\002\000\006\121\uffe6" +
    "\123\uffe6\001\002\000\004\152\022\001\002\000\020\042" +
    "\037\055\036\145\uff37\146\uff37\147\uff37\152\uff37\156\uff37" +
    "\001\002\000\014\145\044\146\043\147\054\152\022\156" +
    "\024\001\002\000\010\114\uffeb\124\uffeb\137\304\001\002" +
    "\000\006\114\uff39\124\uff39\001\002\000\006\121\uffe7\123" +
    "\uffe7\001\002\000\004\152\022\001\002\000\004\114\321" +
    "\001\002\000\010\043\uff3e\071\uff3e\124\uff3e\001\002\000" +
    "\006\114\uff3a\124\uff3a\001\002\000\014\145\044\146\043" +
    "\147\054\152\022\156\024\001\002\000\006\043\325\124" +
    "\uff46\001\002\000\016\003\uff43\016\uff43\036\uff43\061\uff43" +
    "\075\uff43\152\uff43\001\002\000\004\002\001\001\002\000" +
    "\010\002\uff25\036\uff25\061\uff25\001\002\000\004\016\374" +
    "\001\002\000\016\003\341\016\uffcc\036\014\061\005\075" +
    "\344\152\022\001\002\000\016\003\uffca\016\uffca\036\uffca" +
    "\061\uffca\075\uffca\152\uffca\001\002\000\016\003\ufff1\016" +
    "\ufff1\036\ufff1\061\ufff1\075\ufff1\152\ufff1\001\002\000\016" +
    "\003\uffc8\016\uffc8\036\uffc8\061\uffc8\075\uffc8\152\uffc8\001" +
    "\002\000\016\003\uffc9\016\uffc9\036\uffc9\061\uffc9\075\uffc9" +
    "\152\uffc9\001\002\000\016\003\uffee\016\uffee\036\uffee\061" +
    "\uffee\075\uffee\152\uffee\001\002\000\016\003\uffef\016\uffef" +
    "\036\uffef\061\uffef\075\uffef\152\uffef\001\002\000\006\121" +
    "\311\123\363\001\002\000\004\124\362\001\002\000\006" +
    "\121\034\123\351\001\002\000\016\003\ufff0\016\ufff0\036" +
    "\ufff0\061\ufff0\075\ufff0\152\ufff0\001\002\000\004\152\022" +
    "\001\002\000\004\043\346\001\002\000\014\145\044\146" +
    "\043\147\054\152\022\156\024\001\002\000\004\124\350" +
    "\001\002\000\016\003\uffe5\016\uffe5\036\uffe5\061\uffe5\075" +
    "\uffe5\152\uffe5\001\002\000\016\021\352\145\000\146\000" +
    "\147\000\152\000\156\000\001\002\000\016\137\357\145" +
    "\uffff\146\uffff\147\uffff\152\uffff\156\uffff\001\002\000\014" +
    "\145\044\146\043\147\054\152\022\156\024\001\002\000" +
    "\006\124\uffeb\137\304\001\002\000\004\124\356\001\002" +
    "\000\016\003\uffec\016\uffec\036\uffec\061\uffec\075\uffec\152" +
    "\uffec\001\002\000\034\005\072\047\102\050\064\051\106" +
    "\113\063\117\062\120\075\152\022\153\101\154\077\155" +
    "\103\156\024\157\065\001\002\000\004\124\361\001\002" +
    "\000\016\003\uffe8\016\uffe8\036\uffe8\061\uffe8\075\uffe8\152" +
    "\uffe8\001\002\000\016\003\uffc7\016\uffc7\036\uffc7\061\uffc7" +
    "\075\uffc7\152\uffc7\001\002\000\016\021\364\145\000\146" +
    "\000\147\000\152\000\156\000\001\002\000\016\137\371" +
    "\145\uffff\146\uffff\147\uffff\152\uffff\156\uffff\001\002\000" +
    "\014\145\044\146\043\147\054\152\022\156\024\001\002" +
    "\000\006\124\uffeb\137\304\001\002\000\004\124\370\001" +
    "\002\000\016\003\uffed\016\uffed\036\uffed\061\uffed\075\uffed" +
    "\152\uffed\001\002\000\034\005\072\047\102\050\064\051" +
    "\106\113\063\117\062\120\075\152\022\153\101\154\077" +
    "\155\103\156\024\157\065\001\002\000\004\124\373\001" +
    "\002\000\016\003\uffe9\016\uffe9\036\uffe9\061\uffe9\075\uffe9" +
    "\152\uffe9\001\002\000\042\003\uff33\016\uff33\022\uff33\034" +
    "\uff33\035\uff33\040\uff33\041\uff33\045\uff33\051\uff33\071\uff33" +
    "\106\uff33\140\uff33\143\uff33\144\uff33\152\uff33\156\uff33\001" +
    "\002\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140" +
    "\uff77\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\044" +
    "\003\ufffc\016\ufffc\022\ufffc\031\u018d\034\ufffc\035\ufffc\040" +
    "\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc\140\ufffc" +
    "\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002\000\050\003" +
    "\uff78\016\uff78\022\uff78\027\uff78\030\uff78\031\uff78\034\uff78" +
    "\035\uff78\040\uff78\041\uff78\045\uff78\051\uff78\071\uff78\106" +
    "\uff78\140\uff78\143\uff78\144\uff78\152\uff78\156\uff78\001\002" +
    "\000\040\016\uff52\022\u011b\034\u0102\035\u0119\040\u0106\041" +
    "\u010b\045\uff5a\051\u011a\071\u0109\106\u0107\140\u0116\143\u010f" +
    "\144\u011e\152\022\156\024\001\002\000\050\003\uff7c\016" +
    "\uff7c\022\uff7c\027\uff7c\030\uff7c\031\uff7c\034\uff7c\035\uff7c" +
    "\040\uff7c\041\uff7c\045\uff7c\051\uff7c\071\uff7c\106\uff7c\140" +
    "\uff7c\143\uff7c\144\uff7c\152\uff7c\156\uff7c\001\002\000\012" +
    "\105\uff4f\124\uff4f\152\022\156\024\001\002\000\050\003" +
    "\uff6f\016\uff6f\022\uff6f\027\uff6f\030\uff6f\031\uff6f\034\uff6f" +
    "\035\uff6f\040\uff6f\041\uff6f\045\uff6f\051\uff6f\071\uff6f\106" +
    "\uff6f\140\uff6f\143\uff6f\144\uff6f\152\uff6f\156\uff6f\001\002" +
    "\000\016\112\uffc6\113\uffc6\122\uffc6\123\u0179\124\uffc6\137" +
    "\uffc6\001\002\000\050\003\uff6e\016\uff6e\022\uff6e\027\uff6e" +
    "\030\uff6e\031\uff6e\034\uff6e\035\uff6e\040\uff6e\041\uff6e\045" +
    "\uff6e\051\uff6e\071\uff6e\106\uff6e\140\uff6e\143\uff6e\144\uff6e" +
    "\152\uff6e\156\uff6e\001\002\000\006\152\022\156\024\001" +
    "\002\000\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113\ufffc" +
    "\117\ufffc\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156" +
    "\ufffc\157\ufffc\001\002\000\050\003\uff75\016\uff75\022\uff75" +
    "\027\uff75\030\uff75\031\uff75\034\uff75\035\uff75\040\uff75\041" +
    "\uff75\045\uff75\051\uff75\071\uff75\106\uff75\140\uff75\143\uff75" +
    "\144\uff75\152\uff75\156\uff75\001\002\000\036\005\072\047" +
    "\102\050\064\051\106\113\063\117\062\120\075\124\u0172" +
    "\152\022\153\101\154\077\155\103\156\024\157\065\001" +
    "\002\000\050\003\uff74\016\uff74\022\uff74\027\uff74\030\uff74" +
    "\031\uff74\034\uff74\035\uff74\040\uff74\041\uff74\045\uff74\051" +
    "\uff74\071\uff74\106\uff74\140\uff74\143\uff74\144\uff74\152\uff74" +
    "\156\uff74\001\002\000\034\005\072\047\102\050\064\051" +
    "\106\113\063\117\062\120\075\152\022\153\101\154\077" +
    "\155\103\156\024\157\065\001\002\000\050\003\uff6c\016" +
    "\uff6c\022\uff6c\027\uff6c\030\uff6c\031\uff6c\034\uff6c\035\uff6c" +
    "\040\uff6c\041\uff6c\045\uff6c\051\uff6c\071\uff6c\106\uff6c\140" +
    "\uff6c\143\uff6c\144\uff6c\152\uff6c\156\uff6c\001\002\000\040" +
    "\016\uff76\022\uff76\034\uff76\035\uff76\040\uff76\041\uff76\045" +
    "\uff76\051\uff76\071\uff76\106\uff76\140\uff76\143\uff76\144\uff76" +
    "\152\uff76\156\uff76\001\002\000\050\003\uff79\016\uff79\022" +
    "\uff79\027\uff79\030\uff79\031\uff79\034\uff79\035\uff79\040\uff79" +
    "\041\uff79\045\uff79\051\uff79\071\uff79\106\uff79\140\uff79\143" +
    "\uff79\144\uff79\152\uff79\156\uff79\001\002\000\004\113\u016b" +
    "\001\002\000\050\003\uff6d\016\uff6d\022\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\034\uff6d\035\uff6d\040\uff6d\041\uff6d\045\uff6d" +
    "\051\uff6d\071\uff6d\106\uff6d\140\uff6d\143\uff6d\144\uff6d\152" +
    "\uff6d\156\uff6d\001\002\000\050\003\uff70\016\uff70\022\uff70" +
    "\027\uff70\030\uff70\031\uff70\034\uff70\035\uff70\040\uff70\041" +
    "\uff70\045\uff70\051\uff70\071\uff70\106\uff70\140\uff70\143\uff70" +
    "\144\uff70\152\uff70\156\uff70\001\002\000\004\016\u0165\001" +
    "\002\000\004\045\ufffc\001\002\000\050\003\uff71\016\uff71" +
    "\022\uff71\027\uff71\030\uff71\031\uff71\034\uff71\035\uff71\040" +
    "\uff71\041\uff71\045\uff71\051\uff71\071\uff71\106\uff71\140\uff71" +
    "\143\uff71\144\uff71\152\uff71\156\uff71\001\002\000\010\027" +
    "\ufffb\030\ufffb\031\uff62\001\002\000\004\152\022\001\002" +
    "\000\050\003\uff73\016\uff73\022\uff73\027\uff73\030\uff73\031" +
    "\uff73\034\uff73\035\uff73\040\uff73\041\uff73\045\uff73\051\uff73" +
    "\071\uff73\106\uff73\140\uff73\143\uff73\144\uff73\152\uff73\156" +
    "\uff73\001\002\000\004\124\u013b\001\002\000\004\152\022" +
    "\001\002\000\004\124\u012d\001\002\000\016\003\uffcb\016" +
    "\uffcb\036\uffcb\061\uffcb\075\uffcb\152\uffcb\001\002\000\050" +
    "\003\uff7a\016\uff7a\022\uff7a\027\uff7a\030\uff7a\031\uff7a\034" +
    "\uff7a\035\uff7a\040\uff7a\041\uff7a\045\uff7a\051\uff7a\071\uff7a" +
    "\106\uff7a\140\uff7a\143\uff7a\144\uff7a\152\uff7a\156\uff7a\001" +
    "\002\000\050\003\uff72\016\uff72\022\uff72\027\uff72\030\uff72" +
    "\031\uff72\034\uff72\035\uff72\040\uff72\041\uff72\045\uff72\051" +
    "\uff72\071\uff72\106\uff72\140\uff72\143\uff72\144\uff72\152\uff72" +
    "\156\uff72\001\002\000\004\113\u0124\001\002\000\014\112" +
    "\112\113\113\122\110\124\u0121\137\u0120\001\002\000\034" +
    "\005\072\047\102\050\064\051\106\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\050\003\uff2e\016\uff2e\022\uff2e\027\uff2e\030" +
    "\uff2e\031\uff2e\034\uff2e\035\uff2e\040\uff2e\041\uff2e\045\uff2e" +
    "\051\uff2e\071\uff2e\106\uff2e\140\uff2e\143\uff2e\144\uff2e\152" +
    "\uff2e\156\uff2e\001\002\000\004\124\u0123\001\002\000\050" +
    "\003\uff69\016\uff69\022\uff69\027\uff69\030\uff69\031\uff69\034" +
    "\uff69\035\uff69\040\uff69\041\uff69\045\uff69\051\uff69\071\uff69" +
    "\106\uff69\140\uff69\143\uff69\144\uff69\152\uff69\156\uff69\001" +
    "\002\000\006\152\022\156\024\001\002\000\010\113\uffc6" +
    "\114\u012a\122\uffc6\001\002\000\006\113\113\122\110\001" +
    "\002\000\010\113\uffc5\114\u0128\122\uffc5\001\002\000\004" +
    "\124\u0129\001\002\000\050\003\uff2b\016\uff2b\022\uff2b\027" +
    "\uff2b\030\uff2b\031\uff2b\034\uff2b\035\uff2b\040\uff2b\041\uff2b" +
    "\045\uff2b\051\uff2b\071\uff2b\106\uff2b\140\uff2b\143\uff2b\144" +
    "\uff2b\152\uff2b\156\uff2b\001\002\000\004\124\u012b\001\002" +
    "\000\050\003\uff2c\016\uff2c\022\uff2c\027\uff2c\030\uff2c\031" +
    "\uff2c\034\uff2c\035\uff2c\040\uff2c\041\uff2c\045\uff2c\051\uff2c" +
    "\071\uff2c\106\uff2c\140\uff2c\143\uff2c\144\uff2c\152\uff2c\156" +
    "\uff2c\001\002\000\004\016\uff51\001\002\000\050\003\uff6a" +
    "\016\uff6a\022\uff6a\027\uff6a\030\uff6a\031\uff6a\034\uff6a\035" +
    "\uff6a\040\uff6a\041\uff6a\045\uff6a\051\uff6a\071\uff6a\106\uff6a" +
    "\140\uff6a\143\uff6a\144\uff6a\152\uff6a\156\uff6a\001\002\000" +
    "\004\042\u012f\001\002\000\042\005\072\047\102\050\064" +
    "\051\106\072\u0134\113\063\117\062\120\075\146\043\147" +
    "\u0130\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\006\045\ufff9\064\ufff9\001\002\000\004\045" +
    "\uffd3\001\002\000\004\045\ufffc\001\002\000\006\045\uffd8" +
    "\064\152\001\002\000\040\005\072\047\102\050\064\051" +
    "\106\113\063\117\062\120\075\146\043\147\u0130\152\022" +
    "\153\101\154\077\155\103\156\024\157\065\001\002\000" +
    "\036\045\uffd8\046\uff94\064\152\066\uff94\111\uff94\112\112" +
    "\113\113\115\uff94\116\uff94\117\uff94\120\uff94\122\110\135" +
    "\uff94\136\uff94\001\002\000\004\045\uffd5\001\002\000\004" +
    "\045\ufffc\001\002\000\004\045\uff58\001\002\000\004\045" +
    "\uffd4\001\002\000\004\045\uff59\001\002\000\050\003\uff21" +
    "\016\uff21\022\uff21\027\uff21\030\uff21\031\uff21\034\uff21\035" +
    "\uff21\040\uff21\041\uff21\045\uff21\051\uff21\071\uff21\106\uff21" +
    "\140\uff21\143\uff21\144\uff21\152\uff21\156\uff21\001\002\000" +
    "\004\141\u013d\001\002\000\040\016\uff6b\022\uff6b\034\uff6b" +
    "\035\uff6b\040\uff6b\041\uff6b\045\uff6b\051\uff6b\071\uff6b\106" +
    "\uff6b\140\uff6b\143\uff6b\144\uff6b\152\uff6b\156\uff6b\001\002" +
    "\000\004\031\u0158\001\002\000\006\027\u0141\030\ufffc\001" +
    "\002\000\004\030\u0147\001\002\000\042\003\ufffc\016\ufffc" +
    "\022\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051" +
    "\ufffc\071\ufffc\106\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc" +
    "\156\ufffc\001\002\000\042\003\377\016\uff77\022\uff77\034" +
    "\uff77\035\uff77\040\uff77\041\uff77\045\uff77\051\uff77\071\uff77" +
    "\106\uff77\140\uff77\143\uff77\144\uff77\152\uff77\156\uff77\001" +
    "\002\000\044\003\ufffc\016\ufffc\022\ufffc\031\uff61\034\ufffc" +
    "\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106" +
    "\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002" +
    "\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77\040" +
    "\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140\uff77" +
    "\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\050\003" +
    "\uff7b\016\uff7b\022\uff7b\027\uff7b\030\uff7b\031\uff7b\034\uff7b" +
    "\035\uff7b\040\uff7b\041\uff7b\045\uff7b\051\uff7b\071\uff7b\106" +
    "\uff7b\140\uff7b\143\uff7b\144\uff7b\152\uff7b\156\uff7b\001\002" +
    "\000\010\027\ufffb\030\ufffb\031\uff62\001\002\000\034\005" +
    "\072\047\102\050\064\051\106\113\063\117\062\120\075" +
    "\152\022\153\101\154\077\155\103\156\024\157\065\001" +
    "\002\000\004\101\u014a\001\002\000\010\045\uff60\101\uff60" +
    "\124\uff60\001\002\000\042\003\ufffc\016\ufffc\022\ufffc\034" +
    "\ufffc\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc" +
    "\106\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001" +
    "\002\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140" +
    "\uff77\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\050" +
    "\003\ufffc\016\ufffc\022\ufffc\027\uff64\030\uff64\031\uff64\034" +
    "\ufffc\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc" +
    "\106\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001" +
    "\002\000\004\031\u0155\001\002\000\006\027\u0141\030\u014f" +
    "\001\002\000\034\005\ufffc\047\ufffc\050\ufffc\051\ufffc\113" +
    "\ufffc\117\ufffc\120\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc" +
    "\156\ufffc\157\ufffc\001\002\000\034\005\072\047\102\050" +
    "\064\051\106\113\063\117\062\120\075\152\022\153\101" +
    "\154\077\155\103\156\024\157\065\001\002\000\004\101" +
    "\u0152\001\002\000\042\003\ufffc\016\ufffc\022\ufffc\034\ufffc" +
    "\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106" +
    "\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002" +
    "\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77\040" +
    "\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140\uff77" +
    "\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\050\003" +
    "\ufffc\016\ufffc\022\ufffc\027\uff63\030\uff63\031\uff63\034\ufffc" +
    "\035\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106" +
    "\ufffc\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002" +
    "\000\004\041\u0156\001\002\000\004\124\u0157\001\002\000" +
    "\050\003\uff65\016\uff65\022\uff65\027\uff65\030\uff65\031\uff65" +
    "\034\uff65\035\uff65\040\uff65\041\uff65\045\uff65\051\uff65\071" +
    "\uff65\106\uff65\140\uff65\143\uff65\144\uff65\152\uff65\156\uff65" +
    "\001\002\000\004\041\u0159\001\002\000\004\124\u015a\001" +
    "\002\000\050\003\uff66\016\uff66\022\uff66\027\uff66\030\uff66" +
    "\031\uff66\034\uff66\035\uff66\040\uff66\041\uff66\045\uff66\051" +
    "\uff66\071\uff66\106\uff66\140\uff66\143\uff66\144\uff66\152\uff66" +
    "\156\uff66\001\002\000\004\045\u015d\001\002\000\004\124" +
    "\u0162\001\002\000\042\003\uff5c\016\uff5c\022\uff5c\034\uff5c" +
    "\035\uff5c\040\uff5c\041\uff5c\045\uff5c\051\uff5c\071\uff5c\106" +
    "\uff5c\140\uff5c\143\uff5c\144\uff5c\152\uff5c\156\uff5c\001\002" +
    "\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77\040" +
    "\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140\uff77" +
    "\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\044\003" +
    "\ufffc\016\ufffc\022\ufffc\031\u0160\034\ufffc\035\ufffc\040\ufffc" +
    "\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc\140\ufffc\143" +
    "\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002\000\004\045\u0161" +
    "\001\002\000\006\124\uff5b\152\uff5b\001\002\000\050\003" +
    "\uff5f\016\uff5f\022\uff5f\027\uff5f\030\uff5f\031\uff5f\034\uff5f" +
    "\035\uff5f\040\uff5f\041\uff5f\045\uff5f\051\uff5f\071\uff5f\106" +
    "\uff5f\140\uff5f\143\uff5f\144\uff5f\152\uff5f\156\uff5f\001\002" +
    "\000\050\003\ufffd\016\ufffd\022\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\034\ufffd\035\ufffd\040\ufffd\041\ufffd\045\ufffd\051\ufffd" +
    "\071\ufffd\106\ufffd\140\ufffd\143\ufffd\144\ufffd\152\ufffd\156" +
    "\ufffd\001\002\000\050\003\uff5e\016\uff5e\022\uff5e\027\uff5e" +
    "\030\uff5e\031\uff5e\034\uff5e\035\uff5e\040\uff5e\041\uff5e\045" +
    "\uff5e\051\uff5e\071\uff5e\106\uff5e\140\uff5e\143\uff5e\144\uff5e" +
    "\152\uff5e\156\uff5e\001\002\000\042\003\uff56\016\uff56\022" +
    "\uff56\034\uff56\035\uff56\040\uff56\041\uff56\045\uff56\051\uff56" +
    "\071\uff56\106\uff56\140\uff56\143\uff56\144\uff56\152\uff56\156" +
    "\uff56\001\002\000\042\003\377\016\uff77\022\uff77\034\uff77" +
    "\035\uff77\040\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106" +
    "\uff77\140\uff77\143\uff77\144\uff77\152\uff77\156\uff77\001\002" +
    "\000\044\003\ufffc\016\ufffc\022\ufffc\031\u0168\034\ufffc\035" +
    "\ufffc\040\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc" +
    "\140\ufffc\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002\000" +
    "\004\124\u0169\001\002\000\050\003\uff55\016\uff55\022\uff55" +
    "\027\uff55\030\uff55\031\uff55\034\uff55\035\uff55\040\uff55\041" +
    "\uff55\045\uff55\051\uff55\071\uff55\106\uff55\140\uff55\143\uff55" +
    "\144\uff55\152\uff55\156\uff55\001\002\000\004\124\u016c\001" +
    "\002\000\034\005\072\047\102\050\064\051\106\113\063" +
    "\117\062\120\075\152\022\153\101\154\077\155\103\156" +
    "\024\157\065\001\002\000\050\003\uff2d\016\uff2d\022\uff2d" +
    "\027\uff2d\030\uff2d\031\uff2d\034\uff2d\035\uff2d\040\uff2d\041" +
    "\uff2d\045\uff2d\051\uff2d\071\uff2d\106\uff2d\140\uff2d\143\uff2d" +
    "\144\uff2d\152\uff2d\156\uff2d\001\002\000\004\101\u016e\001" +
    "\002\000\042\003\uff68\016\uff68\022\uff68\034\uff68\035\uff68" +
    "\040\uff68\041\uff68\045\uff68\051\uff68\071\uff68\106\uff68\140" +
    "\uff68\143\uff68\144\uff68\152\uff68\156\uff68\001\002\000\042" +
    "\003\ufffc\016\ufffc\022\ufffc\034\ufffc\035\ufffc\040\ufffc\041" +
    "\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc\140\ufffc\143\ufffc" +
    "\144\ufffc\152\ufffc\156\ufffc\001\002\000\042\003\377\016" +
    "\uff77\022\uff77\034\uff77\035\uff77\040\uff77\041\uff77\045\uff77" +
    "\051\uff77\071\uff77\106\uff77\140\uff77\143\uff77\144\uff77\152" +
    "\uff77\156\uff77\001\002\000\050\003\ufffc\016\ufffc\022\ufffc" +
    "\027\uff67\030\uff67\031\uff67\034\ufffc\035\ufffc\040\ufffc\041" +
    "\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc\140\ufffc\143\ufffc" +
    "\144\ufffc\152\ufffc\156\ufffc\001\002\000\050\003\uff4b\016" +
    "\uff4b\022\uff4b\027\uff4b\030\uff4b\031\uff4b\034\uff4b\035\uff4b" +
    "\040\uff4b\041\uff4b\045\uff4b\051\uff4b\071\uff4b\106\uff4b\140" +
    "\uff4b\143\uff4b\144\uff4b\152\uff4b\156\uff4b\001\002\000\004" +
    "\124\u0174\001\002\000\050\003\uff4a\016\uff4a\022\uff4a\027" +
    "\uff4a\030\uff4a\031\uff4a\034\uff4a\035\uff4a\040\uff4a\041\uff4a" +
    "\045\uff4a\051\uff4a\071\uff4a\106\uff4a\140\uff4a\143\uff4a\144" +
    "\uff4a\152\uff4a\156\uff4a\001\002\000\034\005\072\047\102" +
    "\050\064\051\106\113\063\117\062\120\075\152\022\153" +
    "\101\154\077\155\103\156\024\157\065\001\002\000\004" +
    "\045\uff57\001\002\000\010\113\113\122\110\124\u0178\001" +
    "\002\000\050\003\uff49\016\uff49\022\uff49\027\uff49\030\uff49" +
    "\031\uff49\034\uff49\035\uff49\040\uff49\041\uff49\045\uff49\051" +
    "\uff49\071\uff49\106\uff49\140\uff49\143\uff49\144\uff49\152\uff49" +
    "\156\uff49\001\002\000\014\016\uff52\022\u011b\035\u0119\045" +
    "\uff5a\106\u0107\001\002\000\004\045\ufffc\001\002\000\004" +
    "\016\u017c\001\002\000\042\003\uff54\016\uff54\022\uff54\034" +
    "\uff54\035\uff54\040\uff54\041\uff54\045\uff54\051\uff54\071\uff54" +
    "\106\uff54\140\uff54\143\uff54\144\uff54\152\uff54\156\uff54\001" +
    "\002\000\042\003\377\016\uff77\022\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\045\uff77\051\uff77\071\uff77\106\uff77\140" +
    "\uff77\143\uff77\144\uff77\152\uff77\156\uff77\001\002\000\044" +
    "\003\ufffc\016\ufffc\022\ufffc\031\u017f\034\ufffc\035\ufffc\040" +
    "\ufffc\041\ufffc\045\ufffc\051\ufffc\071\ufffc\106\ufffc\140\ufffc" +
    "\143\ufffc\144\ufffc\152\ufffc\156\ufffc\001\002\000\004\152" +
    "\022\001\002\000\004\124\u0181\001\002\000\050\003\uff53" +
    "\016\uff53\022\uff53\027\uff53\030\uff53\031\uff53\034\uff53\035" +
    "\uff53\040\uff53\041\uff53\045\uff53\051\uff53\071\uff53\106\uff53" +
    "\140\uff53\143\uff53\144\uff53\152\uff53\156\uff53\001\002\000" +
    "\004\045\u015d\001\002\000\004\152\022\001\002\000\004" +
    "\124\u0185\001\002\000\050\003\uff5d\016\uff5d\022\uff5d\027" +
    "\uff5d\030\uff5d\031\uff5d\034\uff5d\035\uff5d\040\uff5d\041\uff5d" +
    "\045\uff5d\051\uff5d\071\uff5d\106\uff5d\140\uff5d\143\uff5d\144" +
    "\uff5d\152\uff5d\156\uff5d\001\002\000\006\105\u0189\124\uff4d" +
    "\001\002\000\012\105\uff4e\113\113\122\110\124\uff4e\001" +
    "\002\000\004\124\u018c\001\002\000\034\005\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\113\ufffc\117\ufffc\120\ufffc\152\ufffc\153" +
    "\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\001\002\000\034" +
    "\005\072\047\102\050\064\051\106\113\063\117\062\120" +
    "\075\152\022\153\101\154\077\155\103\156\024\157\065" +
    "\001\002\000\004\124\uff4c\001\002\000\050\003\uff50\016" +
    "\uff50\022\uff50\027\uff50\030\uff50\031\uff50\034\uff50\035\uff50" +
    "\040\uff50\041\uff50\045\uff50\051\uff50\071\uff50\106\uff50\140" +
    "\uff50\143\uff50\144\uff50\152\uff50\156\uff50\001\002\000\010" +
    "\124\uff30\152\022\156\024\001\002\000\004\124\uff2f\001" +
    "\002\000\004\124\u0190\001\002\000\020\002\uff32\003\uff32" +
    "\016\uff32\036\uff32\061\uff32\075\uff32\152\uff32\001\002\000" +
    "\020\002\ufffd\003\ufffd\016\ufffd\036\ufffd\061\ufffd\075\ufffd" +
    "\152\ufffd\001\002\000\020\002\uff31\003\uff31\016\uff31\036" +
    "\uff31\061\uff31\075\uff31\152\uff31\001\002\000\010\043\u0194" +
    "\113\027\124\uff3d\001\002\000\016\003\uff45\016\uff45\036" +
    "\uff45\061\uff45\075\uff45\152\uff45\001\002\000\006\043\u0197" +
    "\124\uff3c\001\002\000\004\124\uff47\001\002\000\016\003" +
    "\uff44\016\uff44\036\uff44\061\uff44\075\uff44\152\uff44\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\022\003\012\121\011\122\014\123\005\133" +
    "\003\140\006\141\010\142\015\001\001\000\002\001\001" +
    "\000\004\012\u0192\001\001\000\006\036\327\037\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\121\011" +
    "\122\014\123\005\133\003\142\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\020\124\017\125\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\126\024\127\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\030\013\032" +
    "\130\027\131\031\001\001\000\004\151\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\307\001\001\000\004\132\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\050\011\052\012\047" +
    "\023\044\024\040\041\041\042\045\125\051\136\046\001" +
    "\001\000\002\001\001\000\014\025\150\027\152\030\057" +
    "\032\056\137\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\302\001\001\000\010\027\054\030\057" +
    "\032\056\001\001\000\002\001\001\000\040\012\047\041" +
    "\106\042\045\043\077\044\066\057\300\060\075\061\070" +
    "\062\067\063\073\066\104\070\103\071\065\125\051\136" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\012\047\041\106\042\045\043\077\044\066\057\072\060" +
    "\075\061\070\062\067\063\073\066\104\070\103\071\065" +
    "\125\051\136\046\001\001\000\002\001\001\000\070\012" +
    "\047\026\222\034\225\035\221\041\223\042\045\043\077" +
    "\044\066\045\220\046\226\047\276\050\123\051\114\052" +
    "\124\053\113\054\121\055\116\057\230\060\075\061\070" +
    "\062\067\063\073\066\104\070\103\071\065\125\051\136" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\264\001\001\000\002\001\001\000\006\025\275\031\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\047\041\271\042\045\125\051\136" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\047\041\106\042\045\043\077\044\066\060\255\061" +
    "\070\062\067\063\073\070\103\071\065\125\051\136\046" +
    "\001\001\000\002\001\001\000\004\137\110\001\001\000" +
    "\006\012\253\125\254\001\001\000\002\001\001\000\004" +
    "\044\216\001\001\000\062\012\115\014\120\015\125\041" +
    "\106\042\045\043\077\044\066\047\117\050\123\051\114" +
    "\052\124\053\113\054\121\055\116\057\126\060\075\061" +
    "\070\062\067\063\073\066\104\070\103\071\065\125\051" +
    "\136\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\056\133" +
    "\064\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\012\047\041\106\042\045\043\077\044\066\057\154" +
    "\060\075\061\070\062\067\063\073\066\104\070\103\071" +
    "\065\125\051\136\046\001\001\000\002\001\001\000\052" +
    "\010\050\011\052\012\047\023\144\024\040\026\142\041" +
    "\143\042\045\043\077\044\066\057\145\060\075\061\070" +
    "\062\067\063\073\066\104\070\103\071\065\125\051\136" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\150\027\152\030\057" +
    "\032\056\137\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\012\047\041\106\042\045\043\077\044\066" +
    "\057\147\060\075\061\070\062\067\063\073\066\104\070" +
    "\103\071\065\125\051\136\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\012\047\026\153\041\106\042" +
    "\045\043\077\044\066\057\145\060\075\061\070\062\067" +
    "\063\073\066\104\070\103\071\065\125\051\136\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\047\041\106\042\045\043\077\044\066\055" +
    "\156\057\126\060\075\061\070\062\067\063\073\066\104" +
    "\070\103\071\065\125\051\136\046\001\001\000\002\001" +
    "\001\000\004\005\160\001\001\000\042\012\047\041\106" +
    "\042\045\043\077\044\066\055\161\057\126\060\075\061" +
    "\070\062\067\063\073\066\104\070\103\071\065\125\051" +
    "\136\046\001\001\000\002\001\001\000\004\005\163\001" +
    "\001\000\042\012\047\041\106\042\045\043\077\044\066" +
    "\055\164\057\126\060\075\061\070\062\067\063\073\066" +
    "\104\070\103\071\065\125\051\136\046\001\001\000\002" +
    "\001\001\000\060\012\115\015\167\041\106\042\045\043" +
    "\077\044\066\047\117\050\123\051\114\052\124\053\113" +
    "\054\121\055\116\057\126\060\075\061\070\062\067\063" +
    "\073\066\104\070\103\071\065\125\051\136\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\204\001" +
    "\001\000\004\005\202\001\001\000\004\005\200\001\001" +
    "\000\004\005\176\001\001\000\042\012\047\041\106\042" +
    "\045\043\077\044\066\055\175\057\126\060\075\061\070" +
    "\062\067\063\073\066\104\070\103\071\065\125\051\136" +
    "\046\001\001\000\002\001\001\000\042\012\047\041\106" +
    "\042\045\043\077\044\066\055\177\057\126\060\075\061" +
    "\070\062\067\063\073\066\104\070\103\071\065\125\051" +
    "\136\046\001\001\000\002\001\001\000\042\012\047\041" +
    "\106\042\045\043\077\044\066\055\201\057\126\060\075" +
    "\061\070\062\067\063\073\066\104\070\103\071\065\125" +
    "\051\136\046\001\001\000\002\001\001\000\042\012\047" +
    "\041\106\042\045\043\077\044\066\055\203\057\126\060" +
    "\075\061\070\062\067\063\073\066\104\070\103\071\065" +
    "\125\051\136\046\001\001\000\002\001\001\000\042\012" +
    "\047\041\106\042\045\043\077\044\066\055\205\057\126" +
    "\060\075\061\070\062\067\063\073\066\104\070\103\071" +
    "\065\125\051\136\046\001\001\000\002\001\001\000\056" +
    "\012\047\041\106\042\045\043\077\044\066\047\207\050" +
    "\123\051\114\052\124\053\113\054\121\055\116\057\126" +
    "\060\075\061\070\062\067\063\073\066\104\070\103\071" +
    "\065\125\051\136\046\001\001\000\002\001\001\000\004" +
    "\005\211\001\001\000\042\012\047\041\106\042\045\043" +
    "\077\044\066\055\212\057\126\060\075\061\070\062\067" +
    "\063\073\066\104\070\103\071\065\125\051\136\046\001" +
    "\001\000\002\001\001\000\004\005\214\001\001\000\042" +
    "\012\047\041\106\042\045\043\077\044\066\055\215\057" +
    "\126\060\075\061\070\062\067\063\073\066\104\070\103" +
    "\071\065\125\051\136\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\012\047\026\222\034\225\035\221" +
    "\041\223\042\045\043\077\044\066\045\220\046\226\047" +
    "\224\050\123\051\114\052\124\053\113\054\121\055\116" +
    "\057\230\060\075\061\070\062\067\063\073\066\104\070" +
    "\103\071\065\125\051\136\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\243\137" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\133\064\131\001" +
    "\001\000\066\012\047\026\222\034\225\035\232\041\223" +
    "\042\045\043\077\044\066\046\234\047\233\050\123\051" +
    "\114\052\124\053\113\054\121\055\116\057\230\060\075" +
    "\061\070\062\067\063\073\066\104\070\103\071\065\125" +
    "\051\136\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\012\047\041\106\042\045\043" +
    "\077\044\066\047\241\050\123\051\114\052\124\053\113" +
    "\054\121\055\116\057\126\060\075\061\070\062\067\063" +
    "\073\066\104\070\103\071\065\125\051\136\046\001\001" +
    "\000\044\012\047\026\222\034\237\041\223\042\045\043" +
    "\077\044\066\057\240\060\075\061\070\062\067\063\073" +
    "\066\104\070\103\071\065\125\051\136\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\012\047\041\106\042" +
    "\045\043\077\044\066\047\245\050\123\051\114\052\124" +
    "\053\113\054\121\055\116\057\126\060\075\061\070\062" +
    "\067\063\073\066\104\070\103\071\065\125\051\136\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\012" +
    "\047\026\222\034\225\035\232\041\223\042\045\043\077" +
    "\044\066\046\251\047\233\050\123\051\114\052\124\053" +
    "\113\054\121\055\116\057\230\060\075\061\070\062\067" +
    "\063\073\066\104\070\103\071\065\125\051\136\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\012\047" +
    "\041\106\042\045\043\077\044\066\061\262\062\067\063" +
    "\073\070\103\071\065\125\051\136\046\001\001\000\002" +
    "\001\001\000\004\067\264\001\001\000\002\001\001\000" +
    "\030\012\047\041\106\042\045\043\077\044\066\062\270" +
    "\063\073\070\103\071\065\125\051\136\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\110\001\001\000\026\012\047\041" +
    "\106\042\045\043\077\044\066\063\273\070\103\071\065" +
    "\125\051\136\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\275\031\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\012\047\041\106\042\045\043\077" +
    "\044\066\047\305\050\123\051\114\052\124\053\113\054" +
    "\121\055\116\057\126\060\075\061\070\062\067\063\073" +
    "\066\104\070\103\071\065\125\051\136\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\315\001\001\000\004\132\312\001" +
    "\001\000\024\010\050\011\052\012\047\023\313\024\040" +
    "\041\041\042\045\125\051\136\046\001\001\000\004\020" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\030\013\032\131\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\050\011\052" +
    "\012\047\023\323\024\040\041\041\042\045\125\051\136" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\337\013\341\016\334\017\332\021\335\022\336\040\331" +
    "\121\342\122\014\123\005\133\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\344\001\001\000\002\001\001\000\024\010\050\011" +
    "\052\012\047\023\346\024\040\041\041\042\045\125\051" +
    "\136\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\352\001\001\000\002\001\001\000\024\010\050" +
    "\011\052\012\047\023\353\024\040\041\041\042\045\125" +
    "\051\136\046\001\001\000\004\020\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\012\047\041\106\042" +
    "\045\043\077\044\066\047\357\050\123\051\114\052\124" +
    "\053\113\054\121\055\116\057\126\060\075\061\070\062" +
    "\067\063\073\066\104\070\103\071\065\125\051\136\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\364\001\001\000\002\001\001\000\024" +
    "\010\050\011\052\012\047\023\365\024\040\041\041\042" +
    "\045\125\051\136\046\001\001\000\004\020\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\012\047\041" +
    "\106\042\045\043\077\044\066\047\371\050\123\051\114" +
    "\052\124\053\113\054\121\055\116\057\126\060\075\061" +
    "\070\062\067\063\073\066\104\070\103\071\065\125\051" +
    "\136\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\374\001\001\000\010\072\375\073\u0100\074\377" +
    "\001\001\000\004\005\u0143\001\001\000\002\001\001\000" +
    "\056\012\u0103\041\u011e\042\045\070\u0117\075\u011b\076\u010d" +
    "\077\u010c\100\u0107\101\u0109\102\u0104\106\u0114\107\u010f\111" +
    "\u0112\112\u010b\113\u0111\114\u0116\117\u011c\120\u0113\125\051" +
    "\135\u0110\136\046\143\u0102\001\001\000\002\001\001\000" +
    "\016\012\047\041\u0186\042\045\115\u0185\125\051\136\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\047\041\u0176\042\045\125\051\136\046" +
    "\001\001\000\004\005\u0174\001\001\000\002\001\001\000" +
    "\056\012\047\041\106\042\045\043\077\044\066\047\u0172" +
    "\050\123\051\114\052\124\053\113\054\121\055\116\057" +
    "\126\060\075\061\070\062\067\063\073\066\104\070\103" +
    "\071\065\125\051\136\046\001\001\000\002\001\001\000" +
    "\060\012\047\041\106\042\045\043\077\044\066\047\u0148" +
    "\050\123\051\114\052\124\053\113\054\121\055\116\057" +
    "\126\060\075\061\070\062\067\063\073\066\104\070\103" +
    "\071\065\105\u016c\125\051\136\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\137\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u015a\001\001\000\002\001\001\000\006" +
    "\006\u013e\104\u013d\001\001\000\004\012\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u012d\001\001" +
    "\000\002\001\001\000\006\036\u012b\037\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\137\110\001\001\000\056\012\047\041\106\042\045\043" +
    "\077\044\066\047\u0121\050\123\051\114\052\124\053\113" +
    "\054\121\055\116\057\126\060\075\061\070\062\067\063" +
    "\073\066\104\070\103\071\065\125\051\136\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\u0124\041\u0125\042\u0126\125\051\136\046\001\001" +
    "\000\002\001\001\000\004\137\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\u0132\012\047\026\u0130\033\u0131" +
    "\041\u0134\042\045\043\077\044\066\057\145\060\075\061" +
    "\070\062\067\063\073\066\104\070\103\071\065\125\051" +
    "\136\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0139\001\001\000\006\025\275\031\u0138\001\001" +
    "\000\046\011\u0132\012\047\026\u0130\033\u0136\041\u0134\042" +
    "\045\043\077\044\066\057\145\060\075\061\070\062\067" +
    "\063\073\066\104\070\103\071\065\125\051\136\046\001" +
    "\001\000\010\025\275\031\u0135\137\110\001\001\000\002" +
    "\001\001\000\004\005\u0137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u013f\001\001\000\004\103\u0145\001\001\000\004\005\u0141" +
    "\001\001\000\010\072\u0142\073\u0100\074\377\001\001\000" +
    "\004\005\u0143\001\001\000\006\073\u0144\074\377\001\001" +
    "\000\002\001\001\000\006\006\u014d\104\u014c\001\001\000" +
    "\060\012\047\041\106\042\045\043\077\044\066\047\u0148" +
    "\050\123\051\114\052\124\053\113\054\121\055\116\057" +
    "\126\060\075\061\070\062\067\063\073\066\104\070\103" +
    "\071\065\105\u0147\125\051\136\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u014a\001\001\000\010" +
    "\072\u014b\073\u0100\074\377\001\001\000\004\005\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u014f" +
    "\001\001\000\060\012\047\041\106\042\045\043\077\044" +
    "\066\047\u0148\050\123\051\114\052\124\053\113\054\121" +
    "\055\116\057\126\060\075\061\070\062\067\063\073\066" +
    "\104\070\103\071\065\105\u0150\125\051\136\046\001\001" +
    "\000\002\001\001\000\004\005\u0152\001\001\000\010\072" +
    "\u0153\073\u0100\074\377\001\001\000\004\005\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u015b\001\001\000\002\001\001\000\004\146\u015d\001" +
    "\001\000\010\072\u015e\073\u0100\074\377\001\001\000\004" +
    "\005\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\145\u0162\001\001\000\004\004\u0163\001\001\000\002" +
    "\001\001\000\004\147\u0165\001\001\000\010\072\u0166\073" +
    "\u0100\074\377\001\001\000\004\005\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\012" +
    "\115\014\120\015\125\041\106\042\045\043\077\044\066" +
    "\047\117\050\123\051\114\052\124\053\113\054\121\055" +
    "\116\057\126\060\075\061\070\062\067\063\073\066\104" +
    "\070\103\071\065\125\051\136\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\144\u016e\001\001\000\004" +
    "\005\u016f\001\001\000\010\072\u0170\073\u0100\074\377\001" +
    "\001\000\004\005\u0143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\012\047\041\106\042" +
    "\045\043\077\044\066\047\u0148\050\123\051\114\052\124" +
    "\053\113\054\121\055\116\057\126\060\075\061\070\062" +
    "\067\063\073\066\104\070\103\071\065\105\u0175\125\051" +
    "\136\046\001\001\000\002\001\001\000\004\137\110\001" +
    "\001\000\002\001\001\000\006\111\u0179\113\u017a\001\001" +
    "\000\004\005\u0181\001\001\000\002\001\001\000\004\150" +
    "\u017c\001\001\000\010\072\u017d\073\u0100\074\377\001\001" +
    "\000\004\005\u0143\001\001\000\004\012\u017f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u0182\001\001" +
    "\000\004\012\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\u0187\001\001\000\004\137\110\001\001" +
    "\000\002\001\001\000\004\005\u0189\001\001\000\060\012" +
    "\047\041\106\042\045\043\077\044\066\047\u0148\050\123" +
    "\051\114\052\124\053\113\054\121\055\116\057\126\060" +
    "\075\061\070\062\067\063\073\066\104\070\103\071\065" +
    "\105\u018a\125\051\136\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\020\124\u018d\125\022\134\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\u0190\001\001\000\004\004\u0191\001\001\000\002\001\001" +
    "\000\006\126\u0194\127\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserSemantic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserSemantic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserSemantic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> errores=new ArrayList<String>();
    public ArrayList<String> getErrores(){
		if(getScanner() instanceof LexerSemantic){
			errores.addAll(((LexerSemantic)getScanner()).lexical_errors);	
		}
		return errores;

	}

    public ArrayList<String> getAdvertencias(){
	ArrayList<String> warnings=new ArrayList<String>();
	if(getScanner() instanceof LexerSemantic){
		warnings.addAll(((LexerSemantic)getScanner()).lexical_warnings);		
	}
	return warnings;
		
    }
    boolean EOFReported=false;
    Stack<String> unClosed=new Stack<String>();
    public String getUnclosed(){return unClosed.pop();}
    public void setUnclosed(String faltante,String abierto, int line, int col){
	String addToUnClosed="'"+faltante+"'"+" faltante para el '"+abierto+"' abierto en linea "+(line+1)+", columna "+(col+1);
	unClosed.push(addToUnClosed);

    }
    public void emptyLastUnclosed(){String tempUnClosed=unClosed.pop();tempUnClosed=null;}
    	
    public void report_error(String message, Object info) {
		if(EOFReported)
			return;
			StringBuffer m = new StringBuffer();
		if(message.equalsIgnoreCase("Syntax error")){
			message="Error Sintactico  ";
		}else if(message.equalsIgnoreCase("Couldn't repair and continue parse")){
			message="Error ";
		}	
			m.append(message);
	   
			if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0) {
					m.append(": en linea "+(s.left+1));
					if (s.right >= 0) {
						m.append(", columna "+(s.right+1));
						if(getScanner() instanceof LexerSemantic){
							m.append("; no se esperaba '"+((LexerSemantic)getScanner()).getCurrentText()+"'");
						}
					}
				} else if(s.toString().equals("#0")){
					if(unClosed.empty()){				
						m.append(": final de archivo inesperado");
					}else{
						m.append(": "+getUnclosed());
						EOFReported=true;
					}
				}
			}
		errores.add(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);

    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserSemantic$actions {



SymbolTable currentScope = null;
ArrayList<Type> returns=new ArrayList<Type>();
int branches=0;
ArrayList<Quadruple> cuadruplos=new ArrayList<Quadruple>();
public static final int MIPS_TEMPS=9;
boolean[] temps=new boolean[MIPS_TEMPS];
int temp_provisorio=0;
public String temp_nuevo(){
	return "%t"+String.valueOf(++temp_provisorio);
}
JumpTable currentExit=null;
public boolean DEBUG=false;
public void gen(Object op, Object arg1, Object arg2, Object res){
	if(!DEBUG && parser.errores.size()>0)
		return;
	String o=op.toString();
	String a1=arg1.toString();
	String a2=arg2.toString();
	String r=res.toString();
	a1=a1.toLowerCase();
	a2=a2.toLowerCase();
	Quadruple quad=new Quadruple(o, a1, a2, r);
	cuadruplos.add(quad);	
	if(DEBUG){
		System.out.println((cuadruplos.size()-1)+"    "+quad.toString());
	}	
}

public String getIf(Object operador){
	String o=operador.toString();
	return "if_"+o;
}

public Integer getNumeric(Boolean val){
	int rv= (val.booleanValue()) ? 1 : 0;
        return new Integer(rv);
}

public BackPatchResult getBackPatch(Boolean b){
	BackPatchResult rval=new BackPatchResult();
	if(b.booleanValue()){
		rval.trueJump=new JumpTable(cuadruplos.size());
		return rval;
	}else{
		rval.falseJump=new JumpTable(cuadruplos.size());
		return rval;
	}
}

public void completa(JumpTable completar, Object con){
	if(completar.table.isEmpty())
		return;
	int value=0;
	String salto=con.toString();
	for(Integer index : completar.table){
		value=index.intValue();
		if(value < cuadruplos.size() && value >=0){
			cuadruplos.get(value).res=salto;
		}else if(DEBUG){
			System.err.println("Se trato de asignar un salto a un cuadruplo invalido; "+
			index+ ". Hay "+cuadruplos.size()+"  cuadruplos");
		}
	}
}

public void generar_asignacion(ParserResult expression, Object result){	
		if(expression.backpatch == null){
			gen(":=", expression.value, "", result);
			return;
		}
		if(expression.type instanceof BooleanType){
			completa(expression.backpatch.trueJump, cuadruplos.size());
			gen(":=", "1", "", result);
			gen("goto", "", "",cuadruplos.size()+1);
			completa(expression.backpatch.falseJump, cuadruplos.size());
			gen(":=", "0", "", result);
		}else{
			gen(":=", expression.value, "", result);
		}
}

public void check_coherence(Object start, int sline, int scolumn, Object end, int eline, int ecolumn){
	 String s=(String)start;
	 String sInfo="inicio: "+s+" ["+String.valueOf(sline+1)+" , "+String.valueOf((scolumn-s.length()))+"]";
	 if(end==null){return;}
	 String e=(String)end;
	 String eInfo=" y fin: "+e+" ["+String.valueOf(eline+1)+" , "+String.valueOf(ecolumn+1)+"]";
	 if(!s.equals(e)){
		parser.errores.add("Error sintactico  : el nombre del subprograma debe coincidir entre "+sInfo+eInfo);
	}
	

}
 
public boolean compare_types(Object expected, Object found, int foundLine, int foundColumn){
	Type etipo=(Type)expected;
	Type ftipo=(Type)found;
	Type e=(etipo instanceof FunctionType)? (((FunctionType)etipo).getRange()) : etipo;
	Type f=(ftipo instanceof FunctionType)? (((FunctionType)ftipo).getRange()) : ftipo;
	if(! e.equals(f)){
		StringBuffer errorMessage=new StringBuffer();
		errorMessage.append("Se esperaba el tipo "+e.toString());
		errorMessage.append(" Y se encontro "+f.toString());
		errorMessage.append(" En linea "+String.valueOf(foundLine+1)+", columna "+String.valueOf(foundColumn+1));
		parser.errores.add(errorMessage.toString());
		return false;		
	}
	return true;
}

public VariableSymbol findSymbol(Object id, int line, int column){
	VariableSymbol found;
	found=currentScope.get(id);
	if(found == null){
		parser.errores.add(" No se encuentra el simbolo '"+(String)id+"'. En linea "+(String.valueOf(line+1))+", columna "+String.valueOf(column+1));
		return null;
	}
	return found;
	
}

public void agregarError(String mensaje, int linea, int columna){
	parser.errores.add(mensaje+". En linea "+String.valueOf(linea+1)+", columna "+String.valueOf(columna+1));
}

public boolean validateBuiltIn(String method, Object val, int line, int col){
	if(method.equalsIgnoreCase("put") || method.equalsIgnoreCase("get")){
		if(!(val instanceof ArrayList))
			return false;
		ArrayList<ParserResult> l=(ArrayList<ParserResult>)val;
		if(l.size()!=1){
			agregarError("La funcion '"+method+"' solamente admite 1 parametro, "+String.valueOf(l.size())+" suministrados", line, col);
			return false;
		}
		return l.get(0).type.isPrimitive();
		
	}	

	
	return false;
}


  private final parserSemantic parser;

  /** Constructor */
  CUP$parserSemantic$actions(parserSemantic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserSemantic$do_action(
    int                        CUP$parserSemantic$act_num,
    java_cup.runtime.lr_parser CUP$parserSemantic$parser,
    java.util.Stack            CUP$parserSemantic$stack,
    int                        CUP$parserSemantic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserSemantic$result;

      /* select the action based on the action number */
      switch (CUP$parserSemantic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // code_statement ::= qualified_expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(97/*code_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // compilation_unit ::= subprogram_body 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(96/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // compilation_unit ::= subprogram_declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(96/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // compilation_list ::= error 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(95/*compilation_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // compilation_list ::= compilation_list compilation_unit 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(95/*compilation_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // compilation_list ::= compilation_unit 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(95/*compilation_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // compilation ::= compilation_list 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(94/*compilation*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // actual_parameter_part ::= LEFTPAR argument_list RIGHTPAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		RESULT=a;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(93/*actual_parameter_part*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // function_call ::= name actual_parameter_part 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					ParserResult pn=(ParserResult)n;
					VariableSymbol f=findSymbol(pn.value, nleft, nright);
					if(f==null)
						RESULT=new ParserResult(pn.value);
					else{
						if(!(f.type instanceof FunctionType)){
							agregarError("'"+((String)pn.value)+"' no es una funcion", nleft, nright);
							RESULT=new ParserResult(pn.value);
						}else{
							if(!(f.type.getProduct().size()==((ArrayList<ParserResult>)p).size())){
								agregarError("La funcion '"+((String)pn.value)+
								"' recibe "+(f.type.getProduct().size())+" parametros. "+
								String.valueOf(((ArrayList<ParserResult>)p).size())
								+" suministrados", nleft, nright);
								RESULT=new ParserResult(pn.value);	
							}else{
								int i=0;
								ArrayList<ParserResult> pr=(ArrayList<ParserResult>)p;
								Type found;Type expected;			
								for(;i<f.type.getProduct().size();i++){
									found=pr.get(i).type;
									expected=f.type.getProduct().get(i);		
									if(!expected.equals(found)){
										agregarError("Argumento incorrecto para la funcion '"+((String)pn.value)+"'"+
										" encontrado '"+found.toString()+"', se esperaba '"+expected.toString()+"'",
										nleft, nright);
										break;			
									}
								}
								if(i==f.type.getProduct().size()){
									for(ParserResult res: pr){
										gen("param", res.value, "", "");
									}	
									String lugar=temp_nuevo();
									gen("call", pn.value, pr.size(), lugar);					
									RESULT=new ParserResult(pn.value, f.type, lugar);
								}else{
									RESULT=new ParserResult(pn.value);
								}
								
							}
								
						}
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(92/*function_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // function_call ::= name LEFTPAR RIGHTPAR 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
			
						ParserResult pn=(ParserResult)n;
						VariableSymbol f=findSymbol(pn.value, nleft, nright);	
					        if (f==null)
							RESULT=new ParserResult(pn.value);
					  	else{
							if(!(f.type instanceof FunctionType)){
								agregarError("'"+((String)pn.value)+"' no es una funcion", nleft, nright);
								RESULT=new ParserResult(pn.value);
							}else if(!f.type.getProduct().isEmpty()){
								agregarError("La funcion '"+((String)pn.value)+
								"' recibe "+(f.type.getProduct().size())+" parametros. O suministrados", nleft, nright);
								RESULT=new ParserResult(pn.value);
							}else if(((FunctionType)f.type).getRange() == null){
								agregarError("No se puede usar una llamada a procedimiento como operando", nleft, nright);
								RESULT=new ParserResult(pn.value);
							}else{
								String lugar=temp_nuevo();
								gen("call", pn.value, "0", lugar);							
								RESULT=new ParserResult(pn.value, f.type, lugar);
							}
						}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(92/*function_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // procedure_call ::= GET LEFTPAR selected_component RIGHTPAR SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		
					  VariableSymbol f=findSymbol(i, ileft, iright);
					  if(f!=null){
						if(!f.type.isPrimitive()){
							agregarError("La funcion 'get' solo acepta parametros con tipos primitivos (boolean"+
							"float o integer)", ileft, iright);
						}else{
							String tipo=f.type.getClass().getSimpleName();
							String lugar=i.toString();
							gen("get", tipo.split("Type")[0], "", lugar);
						}
					
					  }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(91/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // procedure_call ::= GET LEFTPAR identifier RIGHTPAR SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		
					  VariableSymbol f=findSymbol(i, ileft, iright);
					  if(f!=null){
						if(!f.type.isPrimitive()){
							agregarError("La funcion 'get' solo acepta parametros con tipos primitivos (boolean"+
							"float o integer)", ileft, iright);
						}else{
							String tipo=f.type.getClass().getSimpleName();
							String lugar=i.toString();
							gen("get", tipo.split("Type")[0], "", lugar);
						}
					
					  }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(91/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // procedure_call ::= PUT actual_parameter_part SEMICOLON 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
						boolean v=validateBuiltIn("PUT", p, pleft, pright);						
						if(v){
							ParserResult uP=((ArrayList<ParserResult>)p).get(0);
							String lugar=temp_nuevo();
							String tipo=uP.type.getClass().getSimpleName();
							gen("put", 
								tipo.split("Type")[0],
								uP.value,
								"");
							RESULT=new ParserResult("put", uP.type, lugar);
						}
						
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(91/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // procedure_call ::= name SEMICOLON 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					/*si no esta clean, alguien ya se hizo cargo de ella:
					entonces, solo hacer la llamada si aun no ha pasado por function_call
					*/
					ParserResult pn=(ParserResult)n;
					VariableSymbol f=findSymbol(pn.value, nleft, nright);
					if(f != null){
						if(pn.clean){
							if(!(f.type instanceof FunctionType)){
								agregarError("'"+((String)pn.value)+"' no es un procedimiento", nleft, nright);
							}else if(!f.type.getProduct().isEmpty()){
								agregarError("El procedimiento'"+((String)pn.value)+
								"' recibe "+(f.type.getProduct().size())+" parametros. O suministrados", nleft, nright);
							}else if(((FunctionType)f.type).getRange() != null){
								agregarError("'"+((String)pn.value)+"' no es un procedimiento", nleft, nright);
							}else{
								gen("call", pn.value, "0", "");	
							}
						
						}else{
							if(!(f.type instanceof FunctionType)){
								agregarError("'"+((String)pn.value)+"' no es un procedimiento", nleft, nright);
							}
						}
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(91/*procedure_call*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // designator_option ::= designator 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=d;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(90/*designator_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // designator_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(90/*designator_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // subprogram_body ::= subprogram_specification_is declarative_part BEGIN NT$6 sequence_of_statements END designator_option SEMICOLON NT$7 placeholder 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		Object designator=(s instanceof ParserResult) ? ((ParserResult)s).value : s;
					check_coherence(designator,sleft, sright, e, eleft, eright);
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(89/*subprogram_body*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-9)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$7 ::= 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;

					  if(s != null){
						if(s instanceof ParserResult){
							ParserResult ps=(ParserResult)s;
							for(Type r : returns){
								if(!(r instanceof ErrorType))
									compare_types(ps.type,r,sleft, sright);
							}
							if (returns.size() < branches)
								agregarError("Sentencia de retorno faltante para el subprograma '"+((String)ps.value)+"'"
								, sleft, sright);
						}else{
							if(returns.size()>0)	
								agregarError("Un procedimiento no puede retornar un valor"+
								" (En el procedimiento '"+((String)s)+"') ", sleft, sright);
						}
					  }
					  ParserResult tr=(ParserResult)t;
					  completa(tr.backpatch.next, cuadruplos.size());
					Object designator=(s instanceof ParserResult) ? ((ParserResult)s).value : s;
					String id=designator.toString();
					if(currentScope.getParent() == null)
						gen("glblExit", currentScope.getFlatId(), "", "");
					else
						gen("exit",currentScope.getFlatId(), "", "");
					if(currentScope.getParent() != null)
						  currentScope=currentScope.getParent();
					  returns=new ArrayList<Type>();
					  branches=0;
					  if(currentExit != null )	
						  agregarError("No puede salir de un subprograma con una sentencia de salida", sleft, sright);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(105/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$6 ::= 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
Object designator=(s instanceof ParserResult) ? ((ParserResult)s).value : s;
					parser.setUnclosed((" end "+((String)designator)+";"), "begin",bleft, bright);
					gen("initFunction", currentScope.getFlatId(),
					 String.valueOf(currentScope.relAddress), "");
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(104/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // mode ::= IN OUT 
            {
              Object RESULT = null;
		RESULT="INOUT";
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(88/*mode*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // mode ::= OUT 
            {
              Object RESULT = null;
		RESULT="OUT";
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(88/*mode*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // mode ::= IN 
            {
              Object RESULT = null;
		RESULT="IN";
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(88/*mode*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // mode ::= 
            {
              Object RESULT = null;
		RESULT="IN";
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(88/*mode*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parameter_declaration ::= identifier_list COLON mode subtype_indication initialization_option 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					
					ParserResult ps=(ParserResult)s;
	                                if (ps.type != null){
					ArrayList<String> il=(ArrayList<String>)l;
					ArrayList<ParserResult> r=new ArrayList<ParserResult>();
						if(((String)ps.value).equalsIgnoreCase(ps.type.name)){
							String nombre="";
							String mode=(String)m;
							if(o != null){
								ParserResult po=(ParserResult)o;
								boolean compare;
								if(!mode.equalsIgnoreCase("in")){
									agregarError("Los parametros '"+il.toString()+"' no son de tipo 'in'"+
									", no pueden ser inicializados", oleft, oright);
									compare=false;	
								}else{
									compare=compare_types(ps.type, po.type, oleft, oright);
								}
								Type tipo=ps.type;
								for(String id :il){									
									nombre=(mode.equalsIgnoreCase("in")) ? id+"$constant" : id;
									if(compare){
										generar_asignacion(po, id);
									}
									r.add(new ParserResult(nombre, tipo));
								}
								RESULT=r;
							}else{
								for(String id: il){
									nombre=(mode.equalsIgnoreCase("in")) ? id+"$constant" : id;
									r.add(new ParserResult(nombre, ps.type));
								}
								RESULT=r;
							}
						}else{
							for(String id: il)
								r.add(new ParserResult(id));
							RESULT=r;
							agregarError("'"+((String)ps.value)+"' no ha sido declarado como subtipo", sleft, sright);
						}
                	                }else{
						RESULT=null;
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(87/*parameter_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // parameter_declaration ::= identifier COLON mode subtype_indication initialization_option 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					ParserResult ps=(ParserResult)s;
					String mode=(String)m;
	                                if (ps.type != null){
						if(((String)ps.value).equalsIgnoreCase(ps.type.name)){
							String nombre=(mode.equalsIgnoreCase("in")) ? ((String)i)+"$constant" : (String)i;
							if(o != null){
								ParserResult po=(ParserResult)o;
								if(mode.equalsIgnoreCase("in")){
									if(compare_types(ps.type, po.type, oleft, oright)){
										generar_asignacion(po, i);
									}
								}else{
									agregarError("El parametro '"+i.toString()+"' no es de tipo 'in'"+
									", no puede ser inicializado", oleft, oright);
								}
								Type tipo=ps.type;
								ParserResult r=new ParserResult(nombre, tipo);
								RESULT=r;
							}else{
								RESULT=new ParserResult(nombre, ps.type);
							}
						}else{
							RESULT=new ParserResult(i);
							agregarError("'"+((String)ps.value)+"' no ha sido declarado como subtipo", sleft, sright);							     }
                	                }else{
						RESULT=null;
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(87/*parameter_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // parameter_declaration_list ::= parameter_declaration_list SEMICOLON parameter_declaration 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(l != null){
						ArrayList<ParserResult> ll=(ArrayList<ParserResult>)l;
						if(d != null){
							if(!(d instanceof ArrayList)){
								ll.add((ParserResult)d);
							}else{
								ll.addAll((ArrayList<ParserResult>)d);
							}
						}
						RESULT=ll;
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(86/*parameter_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parameter_declaration_list ::= parameter_declaration 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(d != null){
						ArrayList<ParserResult> r=new ArrayList<ParserResult>();
					if (!(d instanceof ArrayList)){
						r.add((ParserResult)d);
						RESULT=r;
					}else{
						r.addAll((ArrayList<ParserResult>)d);
						RESULT=r;
					}
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(86/*parameter_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // formal_part_option ::= formal_part 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=f;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(85/*formal_part_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // formal_part_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(85/*formal_part_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // formal_part ::= LEFTPAR parameter_declaration_list NT$5 RIGHTPAR 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(84/*formal_part*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$5 ::= 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
RESULT=l;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(103/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // operator_symbol ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(String.format("\"%s\"", s),
					  new StringType(((String)s).length()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(83/*operator_symbol*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // designator ::= operator_symbol 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=o;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(82/*designator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // designator ::= identifier 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=i;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(82/*designator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // subprogram_specification_is ::= FUNCTION designator formal_part_option RETURN subtype_indication IS 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					String id=i.toString().toLowerCase();
					branches=1;
					ParserResult ps=(ParserResult)s;
					if(ps.type != null){
					if(f != null){
						
						ArrayList<ParserResult> fl=(ArrayList<ParserResult>)f;
						ArrayList<Type> ft=new ArrayList<Type>();
						for (ParserResult p:fl)
							ft.add(p.type);							
						if(ps.type != null){
							if((currentScope != null) && !currentScope.put(i, new VariableSymbol(new FunctionType(ps.type, ft)))){
								agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
							}else{
								if(currentScope != null){
									SymbolTable scope=new SymbolTable(currentScope, id);
									currentScope.addChild(scope);
									currentScope=scope;		
									gen("function", id, "", "");	
								}else{
									currentScope=new SymbolTable(id);
									gen("glbl", currentScope.getFlatId(), "", "");
								}
								String nombre="";
								boolean cons=false;
								int paramCount=0;
								VariableSymbol sym=null;
								for(ParserResult p: fl){
									nombre=((String)p.value).split("\\$")[0];
									cons=((String)p.value).contains("$constant");
									if(!cons){
										agregarError("Las funciones solo pueden tener parametros de modo in",
										fleft, fright );
										cons=true;
									}
									if(paramCount <= 3){
										sym=new VariableSymbol(p.type,
												 cons, String.format("$a%d", paramCount));
									}else{
										sym=new VariableSymbol(p.type, cons);
									}
									if(!currentScope.put(nombre, sym)){
										agregarError("'"+nombre+"' ya ha sido declarado", fleft, fright);
									}else{paramCount++;}
								}
							}
						}
						
					}else{
						if((currentScope != null) && !currentScope.put(i, new VariableSymbol(new FunctionType(ps.type))))
							agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
						else{	
							if(currentScope != null){
								SymbolTable scope=new SymbolTable(currentScope, id);
								currentScope.addChild(scope);
								currentScope=scope;		
								gen("function", id, "", "");	
							}else{
								currentScope=new SymbolTable(id);
								gen("glbl", currentScope.getFlatId(), "", "");
							}
						}
						
					}
					
 					RESULT=new ParserResult(i,ps.type);
					}else{
					 RESULT=i;
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(81/*subprogram_specification_is*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // subprogram_specification_is ::= PROCEDURE identifier formal_part IS 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					  String id=i.toString().toLowerCase();
					  if( f!= null){											  	
						ArrayList<ParserResult> fl=(ArrayList<ParserResult>)f;
						ArrayList<Type> ft=new ArrayList<Type>();
						for (ParserResult p:fl)
							ft.add(p.type);
						
						if((currentScope != null) && !currentScope.put(i, new VariableSymbol(new FunctionType(ft)))){
							agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
						}else{
							if(currentScope != null){
								SymbolTable scope=new SymbolTable(currentScope, id);
								currentScope.addChild(scope);
								currentScope=scope;
								gen("function", id, "", "");
							}else{
								currentScope=new SymbolTable(id);
								gen("glbl", currentScope.getFlatId(), "", "");
							}
							String nombre="";
							boolean cons=false;
							int paramCount=0;
							VariableSymbol sym=null;
							for(ParserResult p: fl){
								nombre=((String)p.value).split("\\$")[0];
								cons=((String)p.value).contains("$constant");
								if(paramCount <= 3){
									sym=new VariableSymbol(p.type,
											 cons, String.format("$a%d", paramCount));
								}else{
									sym=new VariableSymbol(p.type, cons);
								}
								if(!currentScope.put(nombre, sym)){
									agregarError("'"+nombre+"' ya ha sido declarado", fleft, fright);
								}else{paramCount++;}
									
								
							}
						}
					    
					  }
					
					RESULT=i;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(81/*subprogram_specification_is*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // subprogram_specification_is ::= PROCEDURE identifier IS 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					String id=i.toString().toLowerCase();
                                         if(currentScope != null){
                                                if(!currentScope.put(i, new VariableSymbol(new FunctionType()))){
                                                        agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
                                                }else{
							SymbolTable scope=new SymbolTable(currentScope, id);
							currentScope.addChild(scope);
							currentScope=scope;
							gen("function", id, "", "");
						}

                                         }else{
                                          currentScope=new SymbolTable(id);
                                          boolean neverused=currentScope.put("put", new VariableSymbol(new FunctionType()));
                                          boolean neveruser2=currentScope.put("get", new VariableSymbol(new FunctionType()));
					  gen("glbl", currentScope.getFlatId(), "", "");
                                         }

                                          RESULT=i;
                                        
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(81/*subprogram_specification_is*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // subprogram_specification ::= FUNCTION designator formal_part_option RETURN subtype_indication 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
						ParserResult ps=(ParserResult)s;
						if(f != null){
							ArrayList<ParserResult> fl=(ArrayList<ParserResult>)f;
							ArrayList<Type> ft=new ArrayList<Type>();
							for (ParserResult p:fl)
								ft.add(p.type);							
							if(ps.type != null){
								if(!currentScope.put(d, new VariableSymbol(new FunctionType(ps.type, ft))))
									agregarError("'"+((String)d)+"' ya ha sido declarado.", dleft, dright);
							}
						}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(80/*subprogram_specification*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // subprogram_specification ::= PROCEDURE identifier formal_part_option 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
						if(f != null){
							ArrayList<ParserResult> fl=(ArrayList<ParserResult>)f;
							ArrayList<Type> ft=new ArrayList<Type>();
							for (ParserResult p:fl)
								ft.add(p.type);
							if(!currentScope.put(i, new VariableSymbol(new FunctionType(ft))))
								agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
						}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(80/*subprogram_specification*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // subprogram_declaration ::= subprogram_specification SEMICOLON 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(79/*subprogram_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // goto_statement ::= GOTO name SEMICOLON 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(78/*goto_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // return_statement ::= RETURN expression SEMICOLON 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
						ParserResult pe=(ParserResult)e;
						gen("return", pe.value, "", "");
						RESULT=e;
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(77/*return_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // return_statement ::= RETURN SEMICOLON 
            {
              Object RESULT = null;
		
						gen("return", "", "", "");
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(77/*return_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // when_option ::= WHEN m condition 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		 if(c != null){
						ParserResult pc=(ParserResult)c;
						if(!(pc.type instanceof BooleanType)){
							agregarError("Se esperaba un tipo booleano y se encontro"+pc.type.toString(), cleft, cright);
						}else{
							ParserResult res=new ParserResult();
							ParserResult mr=(ParserResult)m;
							res.value=mr.value;
							res.backpatch.falseJump=pc.backpatch.falseJump;
							res.backpatch.trueJump=pc.backpatch.trueJump;
							RESULT=res;

						}
					 }
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(76/*when_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // when_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(76/*when_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // name_option ::= name 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=n;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(75/*name_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // name_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(75/*name_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // exit_statement ::= EXIT name_option when_option SEMICOLON 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		if(w != null){
						  ParserResult wr=(ParserResult)w;
						  completa(wr.backpatch.falseJump, cuadruplos.size());
						  if(currentExit != null){
							currentExit=JumpTable.mergeLists(currentExit, wr.backpatch.trueJump);
						  }else{
							currentExit=wr.backpatch.trueJump;
						  }
						  if(n != null){
							  ParserResult nr=(ParserResult)n;		
							  RESULT=new ParserResult(nr.value, wr.type, wr.backpatch);
						  }else{
							  RESULT=new ParserResult(wr.type, wr.backpatch);
						  }
					  }else{
					  JumpTable verdadero=new JumpTable(cuadruplos.size());
					  BackPatchResult bpr=new BackPatchResult(verdadero, new JumpTable()); 
					  gen("goto", "", "", " ");
      						if(n != null){
							ParserResult nr=(ParserResult)n;		
							RESULT=new ParserResult(nr.value, bpr); 
						}else{
							RESULT=new ParserResult(bpr);
						}
					  if(currentExit != null){
						currentExit=JumpTable.mergeLists(currentExit, verdadero);
					  }else{
						currentExit=verdadero;
					  }
					  }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(74/*exit_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // declare_part_option ::= DECLARE declarative_part 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(73/*declare_part_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declare_part_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(73/*declare_part_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // block ::= identifier COLON declare_part_option BEGIN NT$4 sequence_of_statements END identifier SEMICOLON 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-8)).value;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(72/*block*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-8)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$4 ::= 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
parser.setUnclosed((" end "+((String)i)+ ";"), ("begin del bloque "+((String)i)),ileft, iright);
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(102/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // block ::= declare_part_option BEGIN NT$3 sequence_of_statements END SEMICOLON 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(72/*block*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$3 ::= 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
parser.setUnclosed("end;", "begin del bloque",bleft, bright);
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(101/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // iteration_clause_option ::= WHILE m condition 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		 if(c != null){
						ParserResult pc=(ParserResult)c;
						if(!(pc.type instanceof BooleanType)){
							agregarError("Se esperaba un tipo booleano y se encontro"+pc.type.toString(), cleft, cright);
						}else{
							ParserResult res=new ParserResult();
							ParserResult mr=(ParserResult)m;
							res.value=mr.value;
							res.backpatch.falseJump=pc.backpatch.falseJump;
							res.backpatch.trueJump=pc.backpatch.trueJump;
							RESULT=res;
						}
					 }
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(71/*iteration_clause_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // iteration_clause_option ::= FOR identifier IN REVERSE discrete_range m 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					SymbolTable scope=new SymbolTable(currentScope); 
					currentScope.addChild(scope);
					currentScope=scope;
					Type tipo=(r != null) ? ((ParserResult)r).type : new IntegerType();
					if(!currentScope.put(i, new VariableSymbol(tipo, true))){
						agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);
					}
					if(r != null){
						ParserResult range=(ParserResult)r;
						Object initial = ((ArrayList<Object>)range.value).get(0);
						Object fin     = ((ArrayList<Object>)range.value).get(1);
						gen(":=", fin, "", i);	
						BackPatchResult b_res=new BackPatchResult(new JumpTable(cuadruplos.size()),
                                                                                          new JumpTable(cuadruplos.size()+1));
						ArrayList<Object> post=new ArrayList<Object>(2);
						post.add(new Integer(cuadruplos.size()));
						gen("if_>=", i, initial, "");
						gen("goto", " ", "", "");
						ParserResult mr=(ParserResult)m;
						post.add(new Quadruple("sub", i.toString(), "1", i.toString()));
						RESULT=new ParserResult(post, b_res);
					}	
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(71/*iteration_clause_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // iteration_clause_option ::= FOR identifier IN discrete_range m 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					SymbolTable scope=new SymbolTable(currentScope); 
					currentScope.addChild(scope);
					currentScope=scope;
					Type tipo=(r != null) ? ((ParserResult)r).type : new IntegerType();
					if(!currentScope.put(i, new VariableSymbol(tipo, true))){
						agregarError("'"+((String)i)+"' ya ha sido declarado.", ileft, iright);					
					}
					/*
					if(r ==  null)
						agregarError("Advertencia: El rango del ciclo es nulo y no se ejecutara", rleft, rright);
					*/
					if(r != null){
						ParserResult range=(ParserResult)r;
						Object initial = ((ArrayList<Object>)range.value).get(0);
						Object fin     = ((ArrayList<Object>)range.value).get(1);
						gen(":=", initial, "", i);	
						BackPatchResult b_res=new BackPatchResult(new JumpTable(cuadruplos.size()),
                                                                                          new JumpTable(cuadruplos.size()+1));
						ArrayList<Object> post=new ArrayList<Object>(2);
						post.add(new Integer(cuadruplos.size()));
						gen("if_<", i, fin, "");
						gen("goto", " ", "", "");
						ParserResult mr=(ParserResult)m;
						post.add(new Quadruple("add", i.toString(), "1", i.toString()));
						RESULT=new ParserResult(post, b_res);
						
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(71/*iteration_clause_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // iteration_clause_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(71/*iteration_clause_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // basic_loop ::= LOOP NT$2 sequence_of_statements END LOOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		RESULT=s;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(70/*basic_loop*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$2 ::= 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
parser.setUnclosed("end loop;", "loop",lleft,lright);
					  currentExit=null;
					 
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(100/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // loop_statement ::= identifier COLON iteration_clause_option m basic_loop identifier SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					String si=(String)i; 
					String sj=(String)j;
					if(!si.equalsIgnoreCase(sj))
						agregarError("Se esperaba 'end loop "+si+"' y se encontro 'end loop "+sj+"'", jleft, jright);
					ParserResult mr=(ParserResult)m;
					ParserResult sr=(ParserResult)s;						
					if(o != null && (((ParserResult)o).value instanceof ArrayList)){
						currentScope=currentScope.getParent(); 
					  
					/*la iteration clause ya trae las cosas de la condicion Y el marcador antes de esta*/
						ParserResult iteration=(ParserResult)o;
						completa(iteration.backpatch.trueJump, mr.value);
						/*Aqui hay una disyuntiva, o viene una lista o no, si viene
						una, es porque es un for y hay que generarlo*/
						if(iteration.value instanceof ArrayList){
							ArrayList<Object> post=(ArrayList)iteration.value;
							completa(sr.backpatch.next, cuadruplos.size());
							Quadruple step=(Quadruple)post.get(1);
							gen(step.operador, step.arg1, step.arg2, step.res);
							gen("goto", "", "", post.get(0));
						}else{
							completa(sr.backpatch.next, iteration.value);	
							gen("goto", "", "", iteration.value);
						}
						RESULT=new ParserResult(
							new BackPatchResult(iteration.backpatch.falseJump)
						);				
					}else{
						completa(sr.backpatch.next, mr.value);
						gen("goto", "", "", mr.value);
						RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
						
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(69/*loop_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // loop_statement ::= iteration_clause_option m basic_loop SEMICOLON NT$1 placeholder 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		/*la iteration clause ya trae las cosas de la condicion Y el marcador antes de esta*/
						ParserResult mr=(ParserResult)m;
						ParserResult sr=(ParserResult)s;
						JumpTable siguiente;
						if(o != null){
							ParserResult iteration=(ParserResult)o;
							completa(iteration.backpatch.trueJump, mr.value);						
							if(iteration.value instanceof ArrayList){
								ArrayList<Object> post=(ArrayList)iteration.value;
								completa(sr.backpatch.next, cuadruplos.size());
								Quadruple step=(Quadruple)post.get(1);
								gen(step.operador, step.arg1, step.arg2, step.res);
								gen("goto", "", "", post.get(0));
							}else{
								completa(sr.backpatch.next, iteration.value);	
								gen("goto","", "", iteration.value);
							}
							/*Completar la sequence_of_staments que podria traer las listas de los exit_staments
							  Verdadera: si se cumple sera la siguiente (porque sale)
							  Falsa: completarla con la condicion */
							siguiente=iteration.backpatch.falseJump;
						}else{
							completa(sr.backpatch.next, mr.value);
							gen("goto", "", "", mr.value);
							siguiente=new JumpTable();
						}
						RESULT=new ParserResult(
							new BackPatchResult(siguiente)
						);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(69/*loop_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$1 ::= 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;

					 if(o != null && (((ParserResult)o).value instanceof ArrayList))
						currentScope=currentScope.getParent(); 
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(99/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condition ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(67/*condition*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // else_option ::= n ELSE m sequence_of_statements 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		ParserResult ps=(ParserResult)s;
				  ParserResult mr=(ParserResult)m;
				  ParserResult nr=(ParserResult)n;
				  ps.backpatch.next=JumpTable.mergeLists(ps.backpatch.next, nr.backpatch.next);
				  RESULT=new ParserResult(mr.value, ps.backpatch);
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(66/*else_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // else_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(66/*else_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // elsif_list ::= elsif_list n ELSIF m condition THEN m sequence_of_statements 
            {
              Object RESULT = null;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).value;
		int munoleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int munoright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object muno = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mdosleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mdosright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object mdos = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		 branches++;
					  if(c != null){
						ParserResult pc=(ParserResult)c;
						ParserResult ps=(ParserResult)s;					
						ParserResult pn=(ParserResult)n;
						ParserResult pm1=(ParserResult)muno;
						ParserResult pm2=(ParserResult)mdos;
						ParserResult pelsif=(ParserResult)elsif;

						if(!(pc.type instanceof BooleanType)){
							agregarError("Una condicion debe ser de un tipo booleano y se encontro "+pc.type.toString(),
						        cleft, cright);
						}else{
							completa(pc.backpatch.trueJump, pm2.value);
							completa(pelsif.backpatch.falseJump, pm1.value);
							RESULT=new ParserResult(
								new BackPatchResult(
									JumpTable.mergeLists(pn.backpatch.next,
										JumpTable.mergeLists(ps.backpatch.next, pelsif.backpatch.next)
									),
									new JumpTable(),
									pc.backpatch.falseJump
								)
							);
						}
					 }
					
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(65/*elsif_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // elsif_list ::= ELSIF condition THEN m sequence_of_statements 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
						branches++;
						if(c != null){
							ParserResult pc=(ParserResult)c;
							ParserResult pm=(ParserResult)m;
							ParserResult ps=(ParserResult)s;
							if(!(pc.type instanceof BooleanType)){
								agregarError("Una condicion debe ser de un tipo booleano y se encontro "+pc.type.toString(),
							        cleft, cright);
							}else{
							completa(pc.backpatch.trueJump, pm.value);			
							RESULT=new ParserResult(
							 new BackPatchResult(
								ps.backpatch.next,
								new JumpTable(),
								pc.backpatch.falseJump
							 )
							);
							}
						}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(65/*elsif_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // if_statement ::= if_header n m elsif_list else_option END IF SEMICOLON 
            {
              Object RESULT = null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).right;
		Object header = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-6)).value;
		int mdosleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int mdosright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object mdos = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		
					 if(header != null){ 
							ParserResult pc=(ParserResult)header;
							ParserResult pm2=(ParserResult)mdos;
							ParserResult pn=(ParserResult)n;
							ParserResult pelsif=(ParserResult)elsif;
							ParserResult pelse=(ParserResult)els;
							BackPatchResult siguiente=new BackPatchResult();
							completa(pc.backpatch.trueJump, pc.value);
							completa(pc.backpatch.falseJump, pm2.value);
							siguiente.next=JumpTable.mergeLists(
											JumpTable.mergeLists(pc.backpatch.next,pn.backpatch.next),
											pelsif.backpatch.next
										);	
							if(pelse != null){
								completa(pelsif.backpatch.falseJump, pelse.value);
								siguiente.next=JumpTable.mergeLists(siguiente.next, pelse.backpatch.next);
							}else{
								siguiente.next=JumpTable.mergeLists(siguiente.next, pelsif.backpatch.falseJump);
							}
							RESULT=new ParserResult(siguiente);
						}else{
							RESULT=new ParserResult(new BackPatchResult());
						}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(64/*if_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-7)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // if_statement ::= if_header else_option END IF SEMICOLON 
            {
              Object RESULT = null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object header = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		
					if(header != null){
						ParserResult pc=(ParserResult)header;
						ParserResult RetVal=new ParserResult();
						completa(pc.backpatch.trueJump, pc.value);
						RetVal.backpatch.next=JumpTable.mergeLists(pc.backpatch.next, pc.backpatch.falseJump);
						if(els != null){
							ParserResult pelse=(ParserResult)els;
							completa(pc.backpatch.falseJump, pelse.value);
							RetVal.backpatch.next=JumpTable.mergeLists(pc.backpatch.next,
									           pelse.backpatch.next);
						}
						RESULT=RetVal;
					 }else{
						RESULT=new ParserResult(new BackPatchResult());
					 }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(64/*if_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // if_header ::= IF condition THEN NT$0 m sequence_of_statements 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		 branches++;
					 if(c != null){
						ParserResult pc=(ParserResult)c;
						if(!(pc.type instanceof BooleanType)){
							agregarError("Una condicion debe ser de un tipo booleano y se encontro "+pc.type.toString(),
							 cleft, cright);
							RESULT=null;
						}else{
							ParserResult pm=(ParserResult)m;
							ParserResult ps=(ParserResult)s;
							RESULT=new ParserResult(pm.value,
										 new BackPatchResult(ps.backpatch.next,
		 	       										 pc.backpatch.trueJump,
													 pc.backpatch.falseJump));
						}
					}
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(68/*if_header*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$0 ::= 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
parser.setUnclosed("end if;", "if", ileft, iright);
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(98/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assignment_statement ::= name ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					if(e != null){
						ParserResult pe=(ParserResult)e;
						ParserResult pn=(ParserResult)n;
						
						if(pn.type != null){
						VariableSymbol gn=currentScope.get(pn.value);
						if(gn.type instanceof FunctionType)
						agregarError("El lado izquierdo de la asignacion debe ser una variable, no una funcion", nleft, nright);
						else if(gn.constant)
					agregarError("El lado izquierdo de la asignacion debe ser una variable, no un objeto constante", nleft, nright);
						else				
						    if(compare_types(pn.type, pe.type, eleft, eright)){
							generar_asignacion(pe, pn.value);
						    }
						}
					}
					
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(63/*assignment_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // null_statement ::= NULL SEMICOLON 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(62/*null_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // label ::= LEFTLABEL identifier RIGHTLABEL 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(61/*label*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // compound_statement ::= block 
            {
              Object RESULT = null;
		parser.emptyLastUnclosed();
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(60/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // compound_statement ::= loop_statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		parser.emptyLastUnclosed();
						  RESULT=s;
						  if(currentExit != null){
							completa(currentExit, cuadruplos.size());
							currentExit=null;
						  }
						
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(60/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // compound_statement ::= if_statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		parser.emptyLastUnclosed(); RESULT=s;
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(60/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // simple_statement ::= code_statement 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // simple_statement ::= procedure_call 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
					  
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // simple_statement ::= goto_statement 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // simple_statement ::= return_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(e != null){
						ParserResult pe=(ParserResult)e;
						returns.add(pe.type);
					}else{
						returns.add(new ErrorType());
					}
					RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // simple_statement ::= exit_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // simple_statement ::= assignment_statement 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // simple_statement ::= null_statement 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(new BackPatchResult(new JumpTable()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(59/*simple_statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // label_list ::= label_list label 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(58/*label_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // label_list ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(58/*label_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // statement ::= error 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(57/*statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // statement ::= label_list compound_statement 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=c;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(57/*statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement ::= label_list simple_statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=s;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(57/*statement*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sequence_of_statements ::= sequence_of_statements m statement 
            {
              Object RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
						ParserResult qr=(ParserResult)q;
						ParserResult mr=(ParserResult)m;
						ParserResult sr=(ParserResult)s;
						completa(qr.backpatch.next, mr.value);
						RESULT=new ParserResult(
							new BackPatchResult(sr.backpatch.next)
						);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(56/*sequence_of_statements*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sequence_of_statements ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=s;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(56/*sequence_of_statements*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // allocator ::= NEW name 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(55/*allocator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // qualified_expression ::= name TICK aggregate 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(54/*qualified_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // qualified_expression ::= name TICK LEFTPAR expression RIGHTPAR 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(54/*qualified_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // multiplying_operator ::= REM 
            {
              Object RESULT = null;
		RESULT= new ParserResult("rem");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(53/*multiplying_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // multiplying_operator ::= MOD 
            {
              Object RESULT = null;
		RESULT= new ParserResult("mod");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(53/*multiplying_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // multiplying_operator ::= DIVIDE 
            {
              Object RESULT = null;
		RESULT= new ParserResult("div");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(53/*multiplying_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // multiplying_operator ::= MULTIPLY 
            {
              Object RESULT = null;
		RESULT= new ParserResult("mul");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(53/*multiplying_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_operator ::= ABS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult("abs", new IntegerType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(52/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unary_operator ::= NOT 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult("not", new BooleanType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(52/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unary_operator ::= MINUS 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult("neg", new IntegerType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(52/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unary_operator ::= PLUS 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult("+", new IntegerType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(52/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // adding_operator ::= CONCATENATE 
            {
              Object RESULT = null;
		RESULT= new ParserResult("&");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(51/*adding_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // adding_operator ::= MINUS 
            {
              Object RESULT = null;
		RESULT= new ParserResult("sub");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(51/*adding_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // adding_operator ::= PLUS 
            {
              Object RESULT = null;
		RESULT=new ParserResult("add");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(51/*adding_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // relational_operator ::= LTEQ 
            {
              Object RESULT = null;
		RESULT= new ParserResult("<=");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relational_operator ::= GTEQ 
            {
              Object RESULT = null;
		RESULT= new ParserResult(">=");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relational_operator ::= GT 
            {
              Object RESULT = null;
		RESULT= new ParserResult(">");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relational_operator ::= LT 
            {
              Object RESULT = null;
		RESULT= new ParserResult("<");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relational_operator ::= INEQUALITY 
            {
              Object RESULT = null;
		RESULT= new ParserResult("/=");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relational_operator ::= EQUAL 
            {
              Object RESULT = null;
		RESULT= new ParserResult("==");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(50/*relational_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // primary ::= LEFTPAR expression RIGHTPAR 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // primary ::= qualified_expression 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // primary ::= allocator 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // primary ::= name 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		ParserResult nr=(ParserResult)n;
					  /***/
					  if(!nr.clean){						
						RESULT=new ParserResult(nr.place, nr.type);
					  }else{
					 	RESULT=n;
					 }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // primary ::= aggregate 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primary ::= literal 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=l;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(49/*primary*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= primary EXPONENTIATE primary 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if(ptipo.isNumeric() && qtipo.isNumeric()){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								String lugar=temp_nuevo();
								gen("**", pr.value, qr.value, lugar);
								RESULT=new ParserResult(lugar, ptipo);
							}
							else {
								RESULT= null;
							}
						}else{
							if(!ptipo.isNumeric())
							    agregarError("Se esperaba un tipo numerico y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo numerico y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(48/*factor*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= primary 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					   ParserResult pr=(ParserResult)p;
					   if(pr.type != null){
						RESULT=pr;						
					   }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(48/*factor*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term multiplying_operator factor 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if ((p != null) && (q != null)){
							
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult or=(ParserResult)o;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if(ptipo.isNumeric() && qtipo.isNumeric()){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								String lugar=temp_nuevo();
								gen(or.value, pr.value, qr.value, lugar);
								RESULT=new ParserResult(lugar, ptipo);
							}else{ 
								RESULT= null;
							}
						}else{
							if(!ptipo.isNumeric())
							    agregarError("Se esperaba un tipo numerico y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo numerico y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					}	
					}	
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(47/*term*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= factor 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(f != null){					  
					   ParserResult pr=(ParserResult)f;
					   if(pr.type != null){
						RESULT=pr;						
					   }
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(47/*term*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term_list ::= term_list adding_operator term 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult or=(ParserResult)o;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if(ptipo.isNumeric() && qtipo.isNumeric()){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								String lugar=temp_nuevo();
								gen(or.value, pr.value, qr.value, lugar);
								RESULT=new ParserResult(lugar, ptipo);
							}else {
								RESULT= null;
							}
						}else{
							if(!ptipo.isNumeric())
							    agregarError("Se esperaba un tipo numerico y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo numerico y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(46/*term_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term_list ::= term 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(t != null){					  
					   ParserResult pr=(ParserResult)t;
					   if(pr.type != null){
						RESULT=pr;						
					   }
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(46/*term_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simple_expression ::= unary_operator term_list 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(t != null){
						ParserResult pt=(ParserResult)t;
					if(pt.type != null){						
					 Type ptipo=(pt.type instanceof FunctionType)? (((FunctionType)pt.type).getRange()) : pt.type;
						ParserResult po=(ParserResult)o;
						Type so=(Type)po.type;						
						if(so.isNumeric()){
							if(ptipo.isNumeric()){
							    String lugar=temp_nuevo();
							    gen(po.value, pt.value, "", lugar);
							    RESULT=new ParserResult(lugar, ptipo);
							}else{								
							    agregarError("Se esperaba un tipo numerico y se encontro "+ptipo.toString(), oleft, oright);
							    RESULT=null;
							}	
						}else{
						/**Si la term_list es boolean, TIENE que traer su lista de backpatch*/
							if(ptipo instanceof BooleanType){
							    String lugar=temp_nuevo();
							    gen(po.value, pt.value, "", lugar);	
							    if(pt.backpatch != null){
								RESULT=new ParserResult(lugar, ptipo, 
									   new BackPatchResult(pt.backpatch.falseJump, pt.backpatch.trueJump));
							    }else{
								RESULT=new ParserResult(lugar, ptipo);
							    }
							}else{
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), oleft, oright);
							    RESULT=null;
							}
						}						
					}
					}

					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(45/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simple_expression ::= term_list 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if(t != null){					  
					   ParserResult pr=(ParserResult)t;
					   if(pr.type != null){
						RESULT=pr;						
					   }
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(45/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // membership_operator ::= NOT IN 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(44/*membership_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // membership_operator ::= IN 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(44/*membership_operator*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relation ::= simple_expression membership_operator subtype_indication 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					  if(p != null){
						ParserResult pr=(ParserResult)p;
						ParserResult ps=(ParserResult)s;
						if ((ps.type != null) && (pr.type != null)){
						 	Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
							if(compare_types(ptipo, ps.type, sleft, sright)){
								RESULT=pr;
							}else{
								RESULT=null;
							}						
						}
					  }
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(43/*relation*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // relation ::= simple_expression membership_operator range 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if(ptipo.isNumeric() && qtipo.isNumeric()){
							if(compare_types(ptipo,qtipo, qleft, qright))
								RESULT=pr;
							else 
								RESULT= null;
						}else{
							if(!ptipo.isNumeric())
							    agregarError("Se esperaba un tipo numerico y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo numerico y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
					 
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(43/*relation*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // relation ::= simple_expression relational_operator simple_expression 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult po=(ParserResult)o;
					 if((pr.type != null) && (qr.type != null)){
						BackPatchResult res=new BackPatchResult(new JumpTable(cuadruplos.size()),
											new JumpTable(cuadruplos.size()+1));
						gen(getIf(po.value), pr.value, qr.value, " ");
						gen("goto", " ", "", "");
						RESULT=new ParserResult(new BooleanType(), res);
						}
						
					 }
				

					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(43/*relation*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // relation ::= simple_expression 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=s;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(43/*relation*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // orelse_expression ::= orelse_expression OR_ELSE m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult pm=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.falseJump, pm.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									JumpTable.mergeLists(pr.backpatch.trueJump, qr.backpatch.trueJump),
									qr.backpatch.falseJump
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(ptipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}

					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(42/*orelse_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // orelse_expression ::= relation OR_ELSE m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.falseJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									JumpTable.mergeLists(pr.backpatch.trueJump, qr.backpatch.trueJump),
									qr.backpatch.falseJump
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
						
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(42/*orelse_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // andthen_expression ::= andthen_expression AND_THEN m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.trueJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									qr.backpatch.trueJump,	
									JumpTable.mergeLists(pr.backpatch.falseJump, qr.backpatch.falseJump)
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(ptipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}

					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(41/*andthen_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // andthen_expression ::= relation AND_THEN m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
				 	 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.trueJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									qr.backpatch.trueJump,	
									JumpTable.mergeLists(pr.backpatch.falseJump, qr.backpatch.falseJump)
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}

					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(41/*andthen_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // xor_expression ::= xor_expression XOR relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright))
								RESULT=pr;
							else 
								RESULT= null;
						}else{
							if(ptipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(40/*xor_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // xor_expression ::= relation XOR relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright))
								RESULT=pr;
							else 
								RESULT= null;
						}else{
							if(ptipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(40/*xor_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // or_expression ::= or_expression OR m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.falseJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									JumpTable.mergeLists(pr.backpatch.trueJump, qr.backpatch.trueJump),
									qr.backpatch.falseJump
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(39/*or_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // or_expression ::= relation OR m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){							
								completa(pr.backpatch.falseJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									JumpTable.mergeLists(pr.backpatch.trueJump, qr.backpatch.trueJump),
									qr.backpatch.falseJump
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(39/*or_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // and_expression ::= and_expression AND m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.trueJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									qr.backpatch.trueJump,	
									JumpTable.mergeLists(pr.backpatch.falseJump, qr.backpatch.falseJump)
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(38/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // and_expression ::= relation AND m relation 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if((p != null) && (q != null)){
					
					 ParserResult pr=(ParserResult)p;
					 ParserResult qr=(ParserResult)q;
					 ParserResult mr=(ParserResult)m;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if((ptipo instanceof BooleanType) && (qtipo instanceof BooleanType)){
							if(compare_types(ptipo,qtipo, qleft, qright)){
								completa(pr.backpatch.trueJump, mr.value);
								RESULT=new ParserResult(ptipo, 
								new BackPatchResult(
									qr.backpatch.trueJump,	
									JumpTable.mergeLists(pr.backpatch.falseJump, qr.backpatch.falseJump)
								));
							}else{ 
								RESULT= null;
							}
						}else{
							if(qtipo instanceof BooleanType)
							    agregarError("Se esperaba un tipo booleano y se encontro "+ptipo.toString(), pleft, pright);
							else 
							    agregarError("Se esperaba un tipo booleano y se encontro "+qtipo.toString(), qleft, qright);
							RESULT=null;
						}
						
					 }
				
					}
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(38/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= orelse_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= andthen_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= xor_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= or_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= and_expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= relation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(37/*expression*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // component_association ::= choice_list ARROW expression 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(36/*component_association*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // component_association ::= expression 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(36/*component_association*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // component_association_list ::= component_association_list COMMA component_association 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(35/*component_association_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // component_association_list ::= component_association COMMA component_association 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(35/*component_association_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // aggregate ::= LEFTPAR choice_list ARROW expression RIGHTPAR 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(34/*aggregate*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // aggregate ::= LEFTPAR component_association_list RIGHTPAR 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(34/*aggregate*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= NULL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT= new ParserResult(n);
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(33/*literal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT= new ParserResult(getNumeric(b), new BooleanType(), getBackPatch(b));
					  gen("goto", " ", "", "");
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(33/*literal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= CHARACTER_LITERAL 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT= new ParserResult(c, new StringType(1));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(33/*literal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT= new ParserResult(f, new FloatType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(33/*literal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=new ParserResult(i, new IntegerType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(33/*literal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // selected_component ::= name POINT operator_symbol 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(32/*selected_component*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // selected_component ::= name POINT ALL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		
					VariableSymbol f=findSymbol(n, nleft, nright);
					if(f != null)
						RESULT=new ParserResult(n, f.type);
					else
						RESULT=new ParserResult(n);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(32/*selected_component*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // selected_component ::= name POINT identifier 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
						ParserResult namen=(ParserResult)n;
						String valex=((String)namen.value)+"."+((String)i);
						Type t=null;
						VariableSymbol f=currentScope.get(valex);		
						if (f !=null)
							t=f.type;
						else
							parser.errores.add("No se puede encontrar el componente '"+((String)i)+
							"' para el prefijo '"+((String)namen.value)+ "'. En linea "+String.valueOf(nleft+1)+
							", columna "+String.valueOf(nright+1));
						RESULT=new ParserResult(valex, t);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(32/*selected_component*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // name ::= operator_symbol 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					  ParserResult pi=(ParserResult)i;
					  VariableSymbol f=currentScope.get(pi.value);					  
					  if(f!= null)
						RESULT=new ParserResult(i, f.type);						 
					  else
						RESULT=pi;
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(31/*name*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // name ::= function_call 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=f;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(31/*name*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // name ::= selected_component 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=s;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(31/*name*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // name ::= identifier 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					  VariableSymbol f=findSymbol(i, ileft, iright);
					  if(f!= null)
						RESULT=new ParserResult(i, f.type);						 
					  else
						RESULT=new ParserResult(i);
					
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(31/*name*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declarative_item ::= error SEMICOLON 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(30/*declarative_item*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declarative_item ::= subprogram_body 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(30/*declarative_item*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarative_item ::= declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(30/*declarative_item*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarative_item_list ::= declarative_item_list declarative_item 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(29/*declarative_item_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarative_item_list ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(29/*declarative_item_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declarative_part ::= declarative_item_list 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(28/*declarative_part*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // choice_list ::= choice_list VERTICAL_LINE choice 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(27/*choice_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // choice_list ::= choice 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(27/*choice_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // choice ::= range 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(26/*choice*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // choice ::= name range_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(26/*choice*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // choice ::= OTHERS 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(26/*choice*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // choice ::= simple_expression 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(26/*choice*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // discrete_range ::= range 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=r;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(25/*discrete_range*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // discrete_range ::= numeric_type range_constraint_option 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(25/*discrete_range*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // discrete_range ::= name range_constraint_option 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(25/*discrete_range*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fixed_point_constraint ::= DELTA simple_expression range_constraint_option 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(24/*fixed_point_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // range_constraint_option ::= range_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(23/*range_constraint_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // range_constraint_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(23/*range_constraint_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // floating_point_constraint ::= DIGITS simple_expression range_constraint_option 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(22/*floating_point_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // accuracy_constraint ::= fixed_point_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(21/*accuracy_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // accuracy_constraint ::= floating_point_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(21/*accuracy_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // range ::= simple_expression DOUBLEDOT simple_expression 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
					if ((t != null) && (f != null)){
							
					 ParserResult pr=(ParserResult)t;
					 ParserResult qr=(ParserResult)f;
					 if((pr.type != null) && (qr.type != null)){
					 Type ptipo=(pr.type instanceof FunctionType)? (((FunctionType)pr.type).getRange()) : pr.type;
					 Type qtipo=(qr.type instanceof FunctionType)? (((FunctionType)qr.type).getRange()) : qr.type;
						if(ptipo.isDiscrete() && qtipo.isDiscrete()){
							if(compare_types(ptipo,qtipo, fleft, fright)){
								ArrayList<Object> rVal=new ArrayList<Object>();
								rVal.add(pr.value);
								rVal.add(qr.value);
								RESULT=new ParserResult(rVal, ptipo);
							}else{ 
								RESULT= null;
							}
						}else{
							if(!ptipo.isDiscrete())
							    agregarError("Se esperaba un tipo discreto y se encontro "+ptipo.toString(), tleft, tright);
							else 
							    agregarError("Se esperaba un tipo discreto y se encontro "+qtipo.toString(), fleft, fright);
							RESULT=null;
						}
						
					}	
					}	
		
		
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(20/*range*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // range_constraint ::= RANGE range 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(19/*range_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subtype_indication_with_constraint ::= FLOAT accuracy_constraint 
            {
              Object RESULT = null;
		RESULT=new ParserResult(new FloatType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(18/*subtype_indication_with_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subtype_indication_with_constraint ::= numeric_type range_constraint 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		RESULT=n;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(18/*subtype_indication_with_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subtype_indication_with_constraint ::= name accuracy_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(18/*subtype_indication_with_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subtype_indication_with_constraint ::= name range_constraint 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(18/*subtype_indication_with_constraint*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subtype_indication ::= primitive_type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=t;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(17/*subtype_indication*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subtype_indication ::= subtype_indication_with_constraint 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=c;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(17/*subtype_indication*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subtype_indication ::= name 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=n;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(17/*subtype_indication*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subtype_declaration ::= SUBTYPE identifier IS subtype_indication SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
					ParserResult ps=(ParserResult)s;
					if(ps.type!= null){
					if(((String)ps.value).equalsIgnoreCase(ps.type.name)){
						Type t=ps.type;
						t.name=(String)i;
						if(!currentScope.put(i, new VariableSymbol(t, true))){
							agregarError("El tipo '"+((String)i)+"' ya ha sido declarado", ileft, iright);
						}
					}
					}else{
						agregarError("'"+((String)ps.value)+"' no ha sido declarado como subtipo", sleft, sright);
					}
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(16/*subtype_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-4)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identifier_list ::= identifier_list COMMA identifier 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		ArrayList<String> r =new ArrayList<String>();
				  r.addAll((ArrayList<String>)i);r.add((String)j);	
				  RESULT=r;	
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(9/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identifier_list ::= identifier COMMA identifier 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		ArrayList<String>r=new ArrayList<String>();
				  r.add((String)i); r.add((String)j);
				  RESULT=r;		
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(9/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number_declaration ::= identifier_list COLON CONSTANT ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		if(o != null){
				ParserResult po=(ParserResult)o;ArrayList<String> pi=(ArrayList<String>)i;
				for(String id:pi){
					if(!currentScope.put(id, new VariableSymbol(po.type, true)))
						agregarError("El identificador "+id+" ya ha sido declarado", ileft, iright);
					else
						generar_asignacion(po, id);
				}	
				}  		
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(15/*number_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // number_declaration ::= identifier COLON CONSTANT ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		if(o != null){
				  ParserResult po=(ParserResult)o;
			          if(!currentScope.put(i, new VariableSymbol(po.type, true)))
					agregarError("El identificador "+((String)i)+" ya ha sido declarado", ileft, iright);
				  else
					generar_asignacion(po, i);
				  }
				
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(15/*number_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initialization_option ::= ASSIGNMENT expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(14/*initialization_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initialization_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(14/*initialization_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // object_declaration ::= identifier_list COLON constant_option subtype_indication initialization_option SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		
				ParserResult ps=(ParserResult)s; 
				if (ps.type != null){
				ArrayList<String> il=(ArrayList<String>)i;
				boolean isConstant=(c != null); 
				if(((String)ps.value).equalsIgnoreCase(ps.type.name)){
				if(o != null){				
					ParserResult po=(ParserResult)o;
					boolean compare=compare_types(ps.type, po.type, oleft, oright);
					Type tipo=ps.type;
					for(String id:il){
						if(!currentScope.put(id, new VariableSymbol(tipo, isConstant)))
							agregarError("El identificador "+id+" ya ha sido declarado", ileft, iright);
						else
							generar_asignacion(po, id);
					}	
				}else{
				   if(isConstant)
					agregarError("La declaracion de un objeto constante requiere una expresion de inicializacion", ileft, iright);	  
				   for(String id:il){
					if(!currentScope.put(id, new VariableSymbol(ps.type)))
						agregarError("El identificador "+id+" ya ha sido declarado", ileft, iright);
				   }	
				}
				}else{
					agregarError("'"+((String)ps.value)+"' no ha sido declarado como subtipo", sleft, sright);
	
				}
				}
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(13/*object_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // object_declaration ::= identifier COLON constant_option subtype_indication initialization_option SEMICOLON 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		ParserResult ps=(ParserResult)s; 
				if (ps.type != null){				
				boolean isConstant=(c != null); 
				if(((String)ps.value).equalsIgnoreCase(ps.type.name)){
				if(o != null){			
					ParserResult po=(ParserResult)o;
					boolean compare=compare_types(ps.type, po.type, oleft, oright);
					Type tipo=ps.type;
					if(!currentScope.put(i, new VariableSymbol(tipo, isConstant)))
						agregarError("El identificador "+((String)i)+" ya ha sido declarado", ileft, iright);
					else
						generar_asignacion(po, i);
				}else{
				   if(isConstant)
					agregarError("La declaracion de un objeto constante requiere una expresion de inicializacion", ileft, iright);					        if(!currentScope.put(i, new VariableSymbol(ps.type)))
					agregarError("El identificador "+((String)i)+" ya ha sido declarado", ileft, iright);
				   	
				}
				}else{
					agregarError("'"+((String)ps.value)+"' no ha sido declarado como subtipo", sleft, sright);	
				}
					
				}
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(13/*object_declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-5)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= number_declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(12/*declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= subtype_declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(12/*declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= subprogram_declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(12/*declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= object_declaration 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(12/*declaration*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument ::= identifier ARROW expression 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argument ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=e;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argument_list ::= argument_list COMMA argument 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		if(a != null){
			  ArrayList<ParserResult> r=new ArrayList<ParserResult>();
			  r.addAll((ArrayList<ParserResult>)l);
			  r.add((ParserResult)a);
			  RESULT=r;
			 }else{RESULT=l;}			
			
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(10/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-2)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argument_list ::= argument 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		if(a != null){
			 ArrayList<ParserResult> r=new ArrayList<ParserResult>();
			  r.add((ParserResult)a);
			  RESULT=r;
			}
			
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(10/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifier ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=i;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(8/*identifier*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= numeric_type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		RESULT=(ParserResult)t;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitive_type ::= BOOLEAN 
            {
              Object RESULT = null;
		RESULT=new ParserResult("boolean",new BooleanType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // numeric_type ::= FLOAT 
            {
              Object RESULT = null;
		RESULT=new ParserResult("float", new FloatType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(7/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // numeric_type ::= INTEGER 
            {
              Object RESULT = null;
		RESULT=new ParserResult("integer", new IntegerType());
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(7/*numeric_type*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // n ::= 
            {
              Object RESULT = null;
		BackPatchResult br= new BackPatchResult(new JumpTable(cuadruplos.size()));
			gen("goto", " ", "", "");
			RESULT=new ParserResult(br);
		
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(4/*n*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // m ::= 
            {
              Object RESULT = null;
		RESULT=new ParserResult(new Integer(cuadruplos.size()));
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(3/*m*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // placeholder ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(2/*placeholder*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // goal ::= compilation 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).value;
		
if(parser.errores.size() == 0){	
	if(DEBUG){
		int i=0;
		for(Quadruple c: cuadruplos){
			System.out.println(i+"\t"+c.toString());
			i++;
		}
	}
	if(currentScope != null){
		SequentialSymbolTable tabla=new SequentialSymbolTable(currentScope);
		RESULT=new FrontEndResult(cuadruplos, tabla);
	}
}else{
	RESULT=null;
}

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // constant_option ::= CONSTANT 
            {
              Object RESULT = null;
		RESULT=true;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(5/*constant_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // constant_option ::= 
            {
              Object RESULT = null;

              CUP$parserSemantic$result = new java_cup.runtime.Symbol(5/*constant_option*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          return CUP$parserSemantic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).value;
		RESULT = start_val;
              CUP$parserSemantic$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-1)).left, ((java_cup.runtime.Symbol)CUP$parserSemantic$stack.elementAt(CUP$parserSemantic$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parserSemantic$parser.done_parsing();
          return CUP$parserSemantic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

