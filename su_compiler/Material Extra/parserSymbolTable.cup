import java_cup.runtime.*;
import Ada95_Semantic.*;
import java.util.ArrayList;
import Ada95_Intermediate.*;
/* Preliminaries to set up and use the scanner.  */
/*init with {: scanner.init();              :};*/
scan with {: return super.getScanner().next_token(); :};

action code{: 
	public SymbolTable currentScope = null;
	public ArrayList<VariableSymbol> multipleDeclaration = new ArrayList(); 
	public ArrayList<Object> multipleFunctionDec = new ArrayList();
	public ArrayList<VariableSymbol> functionVariables = new ArrayList();
	public ArrayList oids = new ArrayList();
	public Type currentType = null;
	
	public SymbolTable returnWholeTable(){
		SymbolTable table = currentScope;
		while(table.parent != null){
			table = table.parent;
			
		}
		return table;
	}
:};

/* Terminals (tokens returned by the scanner). */
terminal            PUTTOK, PARIZQ, PARDER, ENDLINE, GETTOK, COMATOK, 
					BOOLEANVALUE, POINTTOK, ASIGNATION, ANOTATION, ARRAYTOK, LETTER, INTOK, OUTTOK, INOUTTOK, FUNCIONTOK, RETURNTOK, OFTOK, 
					ISTOK, BEGINTOK, ENDTOK, PROCEDURETOK, TYPETOK, INTEGERTOK, BOOLEANTOK, FLOATTOK, WHILETOK, LOOPTOK, FORTOK, RANGETOK, 
					IFTOK, THENTOK, IDENTIFIER, ELSIFTOK, ELSETOK, OPSUMA, OPMULT, OPRELACIONAL, OPBOOL, EXITTOK, WHENTOK, UNDERSCORE;
					
terminal Integer 	NUMBER;

/* Non terminals */
/* put-get */
non terminal            put, get, contentPutGet, valuePutGet, morePutGet;
/*declaraciones */
non terminal			declaracion, moreDeclaracion, declare, assign, typeDeclaracion, valueDeclaracion;
/*expresiones aritmeticas */
non terminal 			arithmetical, a, b, d, f;
/*arrays */
non terminal 			array, range, twoD, typeArray, arrayAsign, asignacion, arrayStart, moreArrayAsign, asign;
/*Expresiones booleanas */
non terminal 			expresion, moreBoolean, operacion, operando, booleanInit;
/* If Statement */
non terminal 			if, contentIf, elsif, else, conditionIf;
/* loop statement */
non terminal 			loop, contentLoop, exit;
/* While statement */	
non terminal 			while, conditionWhile, contentWhile;
/* For Statement */
non terminal 			for, contentFor, rangeParams;
/* Function declaration */
non terminal 			function, declaracionesFunction,paramsFunction, typeFunction, moreFunction, repeatFunction, returnExpect, returnVal, 
						contentFunction, moreParamsFunction, typeParamFunction;
/*Procedure declaration */
non terminal 			procedure, paramsProcedure, innerParams, params, wichParams,  
						moreProcedure, typeProcedure, declaracionesProcedure,  
						innerProcedure, contentProcedure, moreParamsProcedure;
/*the whole */
non terminal			programInit, procedureInit, ifInit, programRecovery, llamadoMetodo, variables, moreVariable;

start with programInit;
/* The grammar */

programInit ::= procedure programInit| function programInit| error programRecovery | ;
programRecovery ::= declaracion programRecovery | put programRecovery | get programRecovery | ifInit programRecovery | for programRecovery | while programRecovery | 
					loop programRecovery | programInit | arrayStart programRecovery;
/* The grammar */
/*----------------------Declaraciones */
declaracion ::= IDENTIFIER:i {:
	 
	VariableSymbol temporal = new VariableSymbol(currentType);
	temporal.id = ((Token)i).getIdentificador();
	temporal.type = currentType;
	oids.add(temporal.id);
	multipleDeclaration.add(temporal);
:}
moreDeclaracion declare assign ENDLINE {:
	for(int j = 0; j < multipleDeclaration.size(); j++){
		Object temp1 = oids.get(j);
		VariableSymbol temp2 = multipleDeclaration.get(j);
		temp2.type = currentType;
		currentScope.put(temp1, temp2);
	}
	multipleDeclaration = new ArrayList();
	oids = new ArrayList();
	currentType = null;
:};
moreDeclaracion ::= COMATOK IDENTIFIER:i 
{:
	VariableSymbol temporal = new VariableSymbol(currentType);
	temporal.id = ((Token)i).getIdentificador();
	oids.add(temporal.id);
	multipleDeclaration.add(temporal);
:}	
moreDeclaracion | ;
declare ::= ANOTATION typeDeclaracion | ;
typeDeclaracion ::= INTEGERTOK {:currentType = new IntegerType();:}
| BOOLEANTOK {:currentType = new BooleanType();:}
| FLOATTOK{:currentType = new FloatType();:};
valueDeclaracion ::= BOOLEANVALUE | arithmetical;
assign ::= ASIGNATION valueDeclaracion | ;

/*---------------------- Put Get */
put ::= PUTTOK PARIZQ contentPutGet PARDER ENDLINE
		| PUTTOK PARIZQ PARDER ENDLINE;
get ::= GETTOK PARIZQ IDENTIFIER PARDER ENDLINE;
contentPutGet ::= valuePutGet morePutGet ;
valuePutGet ::=  LETTER | BOOLEANVALUE | arithmetical ;
morePutGet ::= COMATOK valuePutGet morePutGet | ;

/*---------------------- Expresiones Aritmeticas */
arithmetical ::= a b;
a ::= f d;
b ::= OPSUMA a b | ;
d ::= OPMULT f d | ;
f ::= IDENTIFIER | IDENTIFIER llamadoMetodo | NUMBER | NUMBER POINTTOK NUMBER | PARIZQ arithmetical PARDER;

/*---------------------- Expresiones Booleanas */
booleanInit ::= expresion;
expresion ::= PARIZQ expresion PARDER moreBoolean | operando moreBoolean | moreBoolean;
moreBoolean ::= operacion expresion | ;
operacion ::= OPBOOL | OPRELACIONAL;
operando ::= IDENTIFIER | IDENTIFIER llamadoMetodo | NUMBER | NUMBER POINTTOK NUMBER | BOOLEANVALUE;

/*--------------------- IF */
ifInit ::= if;
if ::= IFTOK conditionIf THENTOK contentIf elsif else ENDTOK IFTOK ENDLINE;
contentIf ::= IDENTIFIER asign ENDLINE contentIf| put contentIf| get contentIf| for contentIf| arrayAsign contentIf| if contentIf | while contentIf | loop contentIf | ;
elsif ::= ELSIFTOK conditionIf THENTOK contentIf elsif| ;
else ::= ELSETOK contentIf | ;
conditionIf ::= booleanInit;

/*--------------------- FOR */
for ::= FORTOK IDENTIFIER INTOK rangeParams RANGETOK rangeParams LOOPTOK contentFor ENDTOK LOOPTOK ENDLINE;
rangeParams ::= arithmetical;
contentFor ::= IDENTIFIER asign ENDLINE contentFor | put contentFor | get contentFor| for contentFor | arrayAsign contentFor| if contentFor | while contentFor | loop contentFor | ;

/*--------------------- LOOP */
loop ::= LOOPTOK contentLoop ENDTOK LOOPTOK ENDLINE;
contentLoop ::= IDENTIFIER asign ENDLINE contentLoop | put contentLoop | get contentLoop | for contentLoop | 
				arrayAsign contentLoop | if contentLoop | while contentLoop | exit ENDLINE contentLoop | loop contentLoop | ;
exit ::= EXITTOK WHENTOK booleanInit 
			|EXITTOK error booleanInit;

/*--------------------- Arrays */
arrayStart ::= array | arrayAsign ;

array ::= TYPETOK IDENTIFIER ISTOK ARRAYTOK range OFTOK typeArray ENDLINE;
			
range ::= PARIZQ arithmetical RANGETOK arithmetical twoD PARDER;
twoD ::= COMATOK arithmetical RANGETOK arithmetical | ;
typeArray ::= BOOLEANTOK | INTEGERTOK | FLOATTOK;

arrayAsign ::= IDENTIFIER PARIZQ arithmetical moreArrayAsign PARDER asign ENDLINE;
asign ::= ASIGNATION asignacion| ;
moreArrayAsign ::= COMATOK arithmetical | ;
asignacion ::= BOOLEANVALUE | arithmetical ;

/*-------------------- while */
while ::= WHILETOK conditionWhile LOOPTOK contentWhile ENDTOK LOOPTOK ENDLINE;
conditionWhile ::= booleanInit;
contentWhile ::= IDENTIFIER asign ENDLINE contentWhile | put contentWhile| get contentWhile| for contentWhile |
					arrayAsign contentWhile| if contentWhile | while contentWhile | loop contentWhile | ;

/*-------------------- function */
function ::= FUNCIONTOK IDENTIFIER:i
{:
	String id = ((Token)i).getIdentificador();
	SymbolTable temp = new SymbolTable(currentScope, id);
	currentScope.addChild(temp);
	currentScope = temp;
:}
 paramsFunction returnExpect ISTOK declaracionesFunction BEGINTOK contentFunction ENDTOK IDENTIFIER ENDLINE 
{: 
	for(int m = 0; m < functionVariables.size(); m++){
		VariableSymbol temp = functionVariables.get(m);
		if(currentScope.get(temp.id) == null)
			currentScope.put(temp.id, temp);
		else
			System.out.println("Variable " + temp.id + " no se puede agregar porque ya existe");
	}
	functionVariables = new ArrayList();
	multipleFunctionDec = new ArrayList();
	currentScope = currentScope.parent;
:};
declaracionesFunction ::= declaracion declaracionesFunction| array declaracionesFunction | function declaracionesFunction | ;
paramsFunction ::= PARIZQ IDENTIFIER:i{:
	multipleFunctionDec.add(i);
:} moreFunction ANOTATION typeParamFunction typeFunction:tf{:
	for(int m = 0; m < multipleFunctionDec.size(); m++){
		VariableSymbol temp = new VariableSymbol(((ParserResult)tf).type);
		temp.id =((Token)multipleFunctionDec.get(m)).getIdentificador();
		temp.accessType = "in";
		temp.isParameter = true;
		functionVariables.add(temp);
	}
	functionVariables = new ArrayList();
	multipleFunctionDec = new ArrayList();
:} moreParamsFunction PARDER | ;
					
moreParamsFunction ::= ENDLINE IDENTIFIER:i{:
	multipleFunctionDec.add(i);
:} moreFunction ANOTATION typeFunction:tf{:
	for(int m = 0; m < multipleFunctionDec.size(); m++){
		VariableSymbol temp = new VariableSymbol(((ParserResult)tf).type);
		temp.id =((Token)multipleFunctionDec.get(m)).getIdentificador();
		temp.accessType = "in";
		temp.isParameter = true;
		functionVariables.add(temp);
	}
	multipleFunctionDec = new ArrayList();
:} moreParamsFunction | ;
typeFunction ::= INTEGERTOK {:RESULT = new ParserResult(new IntegerType());:} 
| BOOLEANTOK{:RESULT = new ParserResult(new BooleanType());:} 
| FLOATTOK{:RESULT = new ParserResult(new FloatType());:};
typeParamFunction ::= INTOK | ;
moreFunction ::= COMATOK IDENTIFIER:i{:
	multipleFunctionDec.add(i);
:} moreFunction | ;
repeatFunction ::= ENDLINE paramsFunction | ;
returnExpect ::= RETURNTOK typeFunction;
returnVal ::= RETURNTOK BOOLEANVALUE ENDLINE | RETURNTOK arithmetical ENDLINE;
contentFunction ::= IDENTIFIER asign ENDLINE contentFunction | put contentFunction | get contentFunction| for contentFunction | loop contentFunction |
					arrayAsign contentFunction| if contentFunction | while contentFunction  | returnVal contentFunction | ;

/*---------------------- procedure */
procedureInit ::= procedure;
procedure ::= PROCEDURETOK IDENTIFIER:i {:
	String id = ((Token)i).getIdentificador();
	if(currentScope != null){
		SymbolTable newScope = new SymbolTable(currentScope, id);
		currentScope.addChild(newScope);
		currentScope = newScope;
	}else{
		currentScope = new SymbolTable(currentScope, id);
	}
:} paramsProcedure ISTOK  declaracionesProcedure  BEGINTOK contentProcedure ENDTOK IDENTIFIER ENDLINE 
{:
	for(int m = 0; m < functionVariables.size(); m++){
		VariableSymbol temp = functionVariables.get(m);
		if(currentScope.get(temp.id) == null)
			currentScope.put(temp.id, temp);
		else
			System.out.println("Variable " + temp.id + " no se puede agregar porque ya existe");
	}
	functionVariables = new ArrayList();
	multipleFunctionDec = new ArrayList();
	if(currentScope.parent != null){
		currentScope = currentScope.parent;
	}else{
		System.out.println("Terminado, se imprimira el arbol (SymbolTable): ");
		currentScope.printTree(currentScope, 0);
	}
:};

declaracionesProcedure ::= declaracion declaracionesProcedure| arrayStart declaracionesProcedure | procedure declaracionesProcedure| function declaracionesProcedure | ;
paramsProcedure ::= PARIZQ innerParams PARDER | PARIZQ PARDER | innerParams | ;
innerParams ::= params moreParamsProcedure ;
moreParamsProcedure ::= ENDLINE params moreParamsProcedure | ;
params ::= IDENTIFIER:i {:multipleFunctionDec.add(i);:} moreProcedure ANOTATION wichParams:wp typeProcedure:tp{:
	for(int m = 0; m < multipleFunctionDec.size(); m++){
		VariableSymbol temp = new VariableSymbol(((ParserResult)tp).type);
		temp.id =((Token)multipleFunctionDec.get(m)).getIdentificador();
		temp.accessType = wp.toString();
		temp.isParameter = true;
		functionVariables.add(temp);
	}
	multipleFunctionDec = new ArrayList();
:} | array;
wichParams ::= INTOK {:RESULT = "in";:} | OUTTOK {:RESULT = "out";:}| INOUTTOK {:RESULT = "inout";:}|{:RESULT = "in";:} ;
moreProcedure ::= COMATOK IDENTIFIER:i {:
	multipleFunctionDec.add(i);
:} moreProcedure | ;
innerProcedure ::= procedure innerProcedure | function innerProcedure | ;
contentProcedure ::= IDENTIFIER asign ENDLINE contentProcedure | put contentProcedure | get contentProcedure| for contentProcedure 
					| arrayAsign contentProcedure| if contentProcedure | while contentProcedure | loop contentProcedure | ;
typeProcedure ::= INTEGERTOK {:RESULT = new ParserResult(new IntegerType());:} 
| BOOLEANTOK{:RESULT = new ParserResult(new BooleanType());:} 
| FLOATTOK{:RESULT = new ParserResult(new FloatType());:};

/*----------------- conflicts --------------*/
llamadoMetodo ::= PARIZQ variables PARDER |
					PARIZQ PARDER ; 
variables ::= BOOLEANVALUE moreVariable | arithmetical moreVariable | arithmetical | BOOLEANVALUE;
moreVariable ::= COMATOK variables;