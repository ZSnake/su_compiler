import java_cup.runtime.*;
import Ada95_Semantic.*;
import Ada95_Intermediate.*;
import java.util.ArrayList;
/* Preliminaries to set up and use the scanner.  */
init with {:
	action_obj.currentScope = this.scope;
	//scanner.init(); 
:};
scan with {: return super.getScanner().next_token(); :};

action code{: 
	public SymbolTable currentScope;
	ArrayList<VariableSymbol> multipleDeclaration = new ArrayList();
	public ArrayList<Quadruple> cuadruplos = new ArrayList(); //Cuadruplos de codigo intermedio
	int numeroTemporal;
	/*Metodos de generacion de cuadruplos con sus diferentes variantes*/
	public void gen(String action, String arg1, String arg2, String res){
		cuadruplos.add(new Quadruple(action, arg1, arg2, res));
	}
	
	public void gen(String action, String arg1, String res){
		cuadruplos.add(new Quadruple(action, arg1, res));
	}
	
	public void gen(String action, String arg1){
		cuadruplos.add(new Quadruple(action, arg1));
	}
	
	public void gen(String action){
		cuadruplos.add(new Quadruple(action));
	}
	
	public String obtenerTemporal(){
		int temp = numeroTemporal;
		numeroTemporal++;
		return "t" + temp;	
	}
:};

parser code{:
	public SymbolTable scope;
:}

/* Terminals (tokens returned by the scanner). */
terminal            PUTTOK, PARIZQ, PARDER, ENDLINE, GETTOK, COMATOK, 
					BOOLEANVALUE, POINTTOK, ASIGNATION, ANOTATION, ARRAYTOK, LETTER, INTOK, OUTTOK, INOUTTOK, FUNCIONTOK, RETURNTOK, OFTOK, 
					ISTOK, BEGINTOK, ENDTOK, PROCEDURETOK, TYPETOK, INTEGERTOK, BOOLEANTOK, FLOATTOK, WHILETOK, LOOPTOK, FORTOK, RANGETOK, 
					IFTOK, THENTOK, IDENTIFIER, ELSIFTOK, ELSETOK, OPSUMA, OPMULT, OPRELACIONAL, OPBOOL, EXITTOK, WHENTOK, UNDERSCORE;
					
terminal Integer 	NUMBER;

/* Non terminals */
/* put-get */
non terminal            put, get, contentPutGet, valuePutGet, morePutGet;
/*declaraciones */
non terminal			declaracion, moreDeclaracion, declare, assign, typeDeclaracion, valueDeclaracion;
/*expresiones aritmeticas */
non terminal 			arithmetical, a, b, d, f;
/*arrays */
non terminal 			array, range, twoD, typeArray, arrayAsign, asignacion, arrayStart, moreArrayAsign, asign;
/*Expresiones booleanas */
non terminal 			expresion, moreBoolean, operacion, operando, booleanInit;
/* If Statement */
non terminal 			if, contentIf, elsif, else, conditionIf;
/* loop statement */
non terminal 			loop, contentLoop, exit;
/* While statement */	
non terminal 			while, conditionWhile, contentWhile;
/* For Statement */
non terminal 			for, contentFor, rangeParams;
/* Function declaration */
non terminal 			function, declaracionesFunction,paramsFunction, typeFunction, moreFunction, repeatFunction, returnExpect, returnVal, 
						contentFunction, moreParamsFunction, typeParamFunction;
/*Procedure declaration */
non terminal 			procedure, paramsProcedure, innerParams, params, wichParams,  
						moreProcedure, typeProcedure, declaracionesProcedure,  
						innerProcedure, contentProcedure, moreParamsProcedure;
/*the whole */
non terminal			programInit, procedureInit, ifInit, programRecovery, llamadoMetodo, variables, moreVariable;

start with programInit;
/* The grammar */

programInit ::= procedure programInit| function programInit| error programRecovery | ;
programRecovery ::= declaracion programRecovery | put programRecovery | get programRecovery | ifInit programRecovery | for programRecovery | while programRecovery | 
					loop programRecovery | programInit | arrayStart programRecovery;
/* The grammar */
/*----------------------Declaraciones */
declaracion ::= IDENTIFIER:i{:
	System.out.println("Current Scope: " + currentScope.id );
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);
:} moreDeclaracion declare assign:a ENDLINE {:
	ParserResult resultado = (ParserResult)a;
	for(VariableSymbol var : multipleDeclaration){
		if(resultado != null){
			if(var.type.equals(resultado.type)){
				System.out.println("La variable " + var.id + " se puede asignar, los tipos concuerdan");
			}else{
				System.out.println("La variable " + var.id + "no se puede asignar, los tipos NO concuerdan");
			}
		}
	}
	multipleDeclaration = new ArrayList();
:};
moreDeclaracion ::= COMATOK IDENTIFIER:i {:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	multipleDeclaration.add(var);
:} moreDeclaracion | ;
declare ::= ANOTATION typeDeclaracion | ;
typeDeclaracion ::= INTEGERTOK 
| BOOLEANTOK 
| FLOATTOK ;
valueDeclaracion ::= BOOLEANVALUE {:RESULT = new ParserResult(new BooleanType());:} | arithmetical:ar {:RESULT = ar;:};
assign ::= ASIGNATION valueDeclaracion:vd {:RESULT = (ParserResult)vd;:} | ;

/*---------------------- Put Get */
put ::= PUTTOK PARIZQ contentPutGet PARDER ENDLINE
		| PUTTOK PARIZQ PARDER ENDLINE;
get ::= GETTOK PARIZQ IDENTIFIER PARDER ENDLINE;
contentPutGet ::= valuePutGet morePutGet ;
valuePutGet ::=  LETTER | BOOLEANVALUE | arithmetical ;
morePutGet ::= COMATOK valuePutGet morePutGet | ;

/*---------------------- Expresiones Aritmeticas */
arithmetical ::= a:var1 b:var2{:
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}
:};
a ::= f:var1 d:var2 {:
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}
:};
b ::= OPSUMA a:var1 b:var2{:
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}
:} | {:RESULT = null;:};
d ::= OPMULT f:var1 d:var2 {:
	ParserResult p1 = (ParserResult)var1;
	ParserResult p2 = (ParserResult)var2;
	if(p2 != null){
		if(p1.type.equals(p2.type)){
			System.out.println("Aritmetica, mismo tipo.. Se puede operar");
			RESULT = p1;
		}else{
			System.out.println("Error, dos tipos diferentes, no se puede operar");
			RESULT = new ParserResult(new ErrorType());
		}
	}else{
		RESULT = p1;
	}
:} | {:RESULT = null;:};
f ::= IDENTIFIER:i{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	if(var != null){
		if(!var.accessType.equals("out")){
			RESULT = new ParserResult(var.type);
		}else{
			System.out.println("Variable de tipo out no puede ser asignada");
			RESULT = null;
		}
	}else{
		RESULT = new ParserResult(new ErrorType());
	}
:} 
| IDENTIFIER llamadoMetodo 
| NUMBER {:RESULT = new ParserResult(new IntegerType());:}
| NUMBER POINTTOK NUMBER {: RESULT = new ParserResult(new FloatType()); :}
| PARIZQ arithmetical:ar {:
	RESULT = (ParserResult)ar;
:} PARDER;

/*---------------------- Expresiones Booleanas */
booleanInit ::= expresion ;
expresion ::= PARIZQ expresion PARDER moreBoolean | operando moreBoolean | moreBoolean;
moreBoolean ::= operacion expresion | ;
operacion ::= OPBOOL | OPRELACIONAL;
operando ::= IDENTIFIER | IDENTIFIER llamadoMetodo | NUMBER | NUMBER POINTTOK NUMBER | BOOLEANVALUE;

/*--------------------- IF */
ifInit ::= if;
if ::= IFTOK conditionIf THENTOK contentIf elsif else ENDTOK IFTOK ENDLINE;
contentIf ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}
:} ENDLINE contentIf| put contentIf| get contentIf| for contentIf| arrayAsign contentIf| if contentIf | while contentIf | loop contentIf | ;
elsif ::= ELSIFTOK conditionIf THENTOK contentIf elsif| ;
else ::= ELSETOK contentIf | ;
conditionIf ::= booleanInit;

/*--------------------- FOR */
for ::= FORTOK IDENTIFIER INTOK rangeParams RANGETOK rangeParams LOOPTOK contentFor ENDTOK LOOPTOK ENDLINE;
rangeParams ::= arithmetical;
contentFor ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}
:} ENDLINE contentFor | put contentFor | get contentFor| for contentFor | arrayAsign contentFor| if contentFor | while contentFor | loop contentFor | ;

/*--------------------- LOOP */
loop ::= LOOPTOK contentLoop ENDTOK LOOPTOK ENDLINE;
contentLoop ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}
:} ENDLINE contentLoop | put contentLoop | get contentLoop | for contentLoop | 
				arrayAsign contentLoop | if contentLoop | while contentLoop | exit ENDLINE contentLoop | loop contentLoop | ;
exit ::= EXITTOK WHENTOK booleanInit ;

/*--------------------- Arrays */
arrayStart ::= array | arrayAsign ;

array ::= TYPETOK IDENTIFIER ISTOK ARRAYTOK range OFTOK typeArray ENDLINE;
			
range ::= PARIZQ arithmetical RANGETOK arithmetical twoD PARDER;
twoD ::= COMATOK arithmetical RANGETOK arithmetical | ;
typeArray ::= BOOLEANTOK | INTEGERTOK | FLOATTOK;

/*------------------------Asignaciones */
arrayAsign ::= IDENTIFIER PARIZQ arithmetical moreArrayAsign PARDER asign ENDLINE;
asign ::= ASIGNATION asignacion:a {:RESULT = (ParserResult)a;:}| ;
moreArrayAsign ::= COMATOK arithmetical | ;
asignacion ::= BOOLEANVALUE {:RESULT = new ParserResult(new BooleanType());:}| arithmetical:ar {:RESULT = (ParserResult)ar;:};

/*-------------------- while */
while ::= WHILETOK conditionWhile LOOPTOK contentWhile ENDTOK LOOPTOK ENDLINE;
conditionWhile ::= booleanInit;
contentWhile ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(var.type.equals(assignment.type)){
			System.out.println("La variable "+ var.id + " se puede asignar");
		}else{
			System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}
:} ENDLINE contentWhile | put contentWhile| get contentWhile| for contentWhile |
					arrayAsign contentWhile| if contentWhile | while contentWhile | loop contentWhile | ;

/*-------------------- function */
function ::= FUNCIONTOK IDENTIFIER:i {:
	currentScope = currentScope.findChild(((Token)i).getIdentificador());
:} paramsFunction returnExpect ISTOK declaracionesFunction BEGINTOK contentFunction ENDTOK IDENTIFIER ENDLINE {:
	currentScope = currentScope.parent;
:};
declaracionesFunction ::= declaracion declaracionesFunction| array declaracionesFunction | function declaracionesFunction | ;
paramsFunction ::= PARIZQ IDENTIFIER moreFunction ANOTATION typeParamFunction typeFunction moreParamsFunction PARDER | ;
					
moreParamsFunction ::= ENDLINE IDENTIFIER moreFunction ANOTATION typeFunction moreParamsFunction | ;
typeFunction ::= INTEGERTOK {:RESULT = new ParserResult(new IntegerType());:}
| BOOLEANTOK {:RESULT = new ParserResult(new BooleanType());:}
| FLOATTOK {:RESULT = new ParserResult(new FloatType());:};
typeParamFunction ::= INTOK | ;
moreFunction ::= COMATOK IDENTIFIER moreFunction | ;
repeatFunction ::= ENDLINE paramsFunction | ;
returnExpect ::= RETURNTOK typeFunction:tf {:RESULT = tf;:};
returnVal ::= RETURNTOK BOOLEANVALUE ENDLINE {:RESULT = new ParserResult(new BooleanType());:}
| RETURNTOK arithmetical:a ENDLINE{:RESULT = a;:};
contentFunction ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(var != null){
		if(!var.accessType.equals("in")){
			if(var.type.equals(assignment.type)){
				System.out.println("La variable "+ var.id + " se puede asignar");
			}else{
				System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
			}
		}else{
			System.out.println("La variable " + var.id + " no se puede cambiar por ser de tipo in");
		}
	}else{
		System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
	}
:} ENDLINE contentFunction | put contentFunction | get contentFunction| for contentFunction | loop contentFunction |
					arrayAsign contentFunction| if contentFunction | while contentFunction  | returnVal contentFunction | ;

/*---------------------- procedure */
procedureInit ::= procedure;
procedure ::= PROCEDURETOK IDENTIFIER:i {:
	if(!currentScope.id.equals(((Token)i).getIdentificador())){
		currentScope = currentScope.findChild(((Token)i).getIdentificador());
	}else{
		System.out.println("Iniciando, se imprimira arbol (Semantic): ");
		currentScope.printTree(currentScope, 0);
	}	
:} paramsProcedure ISTOK declaracionesProcedure  BEGINTOK contentProcedure ENDTOK IDENTIFIER ENDLINE {:
	if(currentScope.parent != null){
		currentScope = currentScope.parent;
	}
:};
declaracionesProcedure ::= declaracion declaracionesProcedure| arrayStart declaracionesProcedure | procedure declaracionesProcedure| function declaracionesProcedure | ;
paramsProcedure ::= PARIZQ innerParams PARDER | PARIZQ PARDER | innerParams | ;
innerParams ::= params moreParamsProcedure ;
moreParamsProcedure ::= ENDLINE params moreParamsProcedure | ;
params ::= IDENTIFIER moreProcedure ANOTATION wichParams typeProcedure | array;
wichParams ::= INTOK | OUTTOK | INOUTTOK | ;
moreProcedure ::= COMATOK IDENTIFIER moreProcedure | ;
innerProcedure ::= procedure innerProcedure | function innerProcedure | ;
contentProcedure ::= IDENTIFIER:i asign:as{:
	VariableSymbol var = currentScope.get(((Token)i).getIdentificador());
	ParserResult assignment = (ParserResult)as;
	if(assignment != null){
		if(var != null){
			if(!var.accessType.equals("in")){
				if(var.type.equals(assignment.type)){
					System.out.println("La variable "+ var.id + " se puede asignar");
				}else{
					System.out.println("La variable " +var.id + "no se puede asignar, tipos no concuerdan");
				}
			}else{
				System.out.println("La variable " + var.id + " no se puede modificar por ser de tipo in");
			}
		}else{
			System.out.println("La variable " + ((Token)i).getIdentificador() + " no existe");
		}
	}else{
		System.out.println("No se pueden asignar variables de tipo out");
	}
:} ENDLINE contentProcedure | put contentProcedure | get contentProcedure| for contentProcedure 
					| arrayAsign contentProcedure| if contentProcedure | while contentProcedure | loop contentProcedure | ;
typeProcedure ::= INTEGERTOK | BOOLEANTOK | FLOATTOK;

/*----------------- conflicts --------------*/
llamadoMetodo ::= PARIZQ variables PARDER |
					PARIZQ PARDER ; 
variables ::= BOOLEANVALUE moreVariable | arithmetical moreVariable | arithmetical | BOOLEANVALUE;
moreVariable ::= COMATOK variables;